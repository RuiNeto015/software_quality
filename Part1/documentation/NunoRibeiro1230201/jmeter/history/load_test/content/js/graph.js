/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 27962.0, "series": [{"data": [[0.0, 1.0], [0.1, 3.0], [0.2, 3.0], [0.3, 3.0], [0.4, 3.0], [0.5, 3.0], [0.6, 3.0], [0.7, 3.0], [0.8, 3.0], [0.9, 3.0], [1.0, 3.0], [1.1, 3.0], [1.2, 3.0], [1.3, 3.0], [1.4, 3.0], [1.5, 3.0], [1.6, 3.0], [1.7, 3.0], [1.8, 3.0], [1.9, 3.0], [2.0, 3.0], [2.1, 4.0], [2.2, 4.0], [2.3, 4.0], [2.4, 4.0], [2.5, 4.0], [2.6, 4.0], [2.7, 4.0], [2.8, 4.0], [2.9, 4.0], [3.0, 4.0], [3.1, 4.0], [3.2, 4.0], [3.3, 4.0], [3.4, 4.0], [3.5, 4.0], [3.6, 4.0], [3.7, 4.0], [3.8, 4.0], [3.9, 4.0], [4.0, 4.0], [4.1, 4.0], [4.2, 4.0], [4.3, 4.0], [4.4, 4.0], [4.5, 4.0], [4.6, 4.0], [4.7, 4.0], [4.8, 4.0], [4.9, 4.0], [5.0, 5.0], [5.1, 5.0], [5.2, 5.0], [5.3, 5.0], [5.4, 5.0], [5.5, 5.0], [5.6, 5.0], [5.7, 5.0], [5.8, 5.0], [5.9, 5.0], [6.0, 5.0], [6.1, 5.0], [6.2, 5.0], [6.3, 5.0], [6.4, 5.0], [6.5, 5.0], [6.6, 5.0], [6.7, 6.0], [6.8, 6.0], [6.9, 6.0], [7.0, 6.0], [7.1, 6.0], [7.2, 6.0], [7.3, 6.0], [7.4, 6.0], [7.5, 6.0], [7.6, 6.0], [7.7, 6.0], [7.8, 6.0], [7.9, 6.0], [8.0, 6.0], [8.1, 6.0], [8.2, 7.0], [8.3, 7.0], [8.4, 7.0], [8.5, 7.0], [8.6, 7.0], [8.7, 7.0], [8.8, 7.0], [8.9, 7.0], [9.0, 7.0], [9.1, 7.0], [9.2, 7.0], [9.3, 7.0], [9.4, 8.0], [9.5, 8.0], [9.6, 8.0], [9.7, 8.0], [9.8, 8.0], [9.9, 8.0], [10.0, 8.0], [10.1, 8.0], [10.2, 8.0], [10.3, 8.0], [10.4, 9.0], [10.5, 9.0], [10.6, 9.0], [10.7, 9.0], [10.8, 9.0], [10.9, 9.0], [11.0, 9.0], [11.1, 9.0], [11.2, 9.0], [11.3, 9.0], [11.4, 10.0], [11.5, 10.0], [11.6, 10.0], [11.7, 10.0], [11.8, 10.0], [11.9, 10.0], [12.0, 10.0], [12.1, 11.0], [12.2, 11.0], [12.3, 11.0], [12.4, 11.0], [12.5, 11.0], [12.6, 11.0], [12.7, 12.0], [12.8, 12.0], [12.9, 12.0], [13.0, 12.0], [13.1, 12.0], [13.2, 12.0], [13.3, 13.0], [13.4, 13.0], [13.5, 13.0], [13.6, 13.0], [13.7, 13.0], [13.8, 14.0], [13.9, 14.0], [14.0, 14.0], [14.1, 14.0], [14.2, 15.0], [14.3, 15.0], [14.4, 15.0], [14.5, 15.0], [14.6, 16.0], [14.7, 16.0], [14.8, 16.0], [14.9, 17.0], [15.0, 17.0], [15.1, 17.0], [15.2, 18.0], [15.3, 18.0], [15.4, 18.0], [15.5, 19.0], [15.6, 19.0], [15.7, 20.0], [15.8, 20.0], [15.9, 21.0], [16.0, 21.0], [16.1, 21.0], [16.2, 22.0], [16.3, 22.0], [16.4, 23.0], [16.5, 23.0], [16.6, 24.0], [16.7, 25.0], [16.8, 25.0], [16.9, 26.0], [17.0, 27.0], [17.1, 27.0], [17.2, 28.0], [17.3, 29.0], [17.4, 30.0], [17.5, 31.0], [17.6, 31.0], [17.7, 32.0], [17.8, 33.0], [17.9, 34.0], [18.0, 36.0], [18.1, 37.0], [18.2, 38.0], [18.3, 39.0], [18.4, 40.0], [18.5, 41.0], [18.6, 43.0], [18.7, 44.0], [18.8, 45.0], [18.9, 46.0], [19.0, 48.0], [19.1, 49.0], [19.2, 51.0], [19.3, 52.0], [19.4, 54.0], [19.5, 56.0], [19.6, 57.0], [19.7, 59.0], [19.8, 61.0], [19.9, 63.0], [20.0, 65.0], [20.1, 66.0], [20.2, 68.0], [20.3, 70.0], [20.4, 72.0], [20.5, 74.0], [20.6, 76.0], [20.7, 78.0], [20.8, 80.0], [20.9, 82.0], [21.0, 84.0], [21.1, 86.0], [21.2, 88.0], [21.3, 90.0], [21.4, 92.0], [21.5, 94.0], [21.6, 96.0], [21.7, 98.0], [21.8, 99.0], [21.9, 101.0], [22.0, 103.0], [22.1, 105.0], [22.2, 107.0], [22.3, 108.0], [22.4, 111.0], [22.5, 112.0], [22.6, 114.0], [22.7, 116.0], [22.8, 118.0], [22.9, 120.0], [23.0, 122.0], [23.1, 125.0], [23.2, 127.0], [23.3, 129.0], [23.4, 131.0], [23.5, 133.0], [23.6, 134.0], [23.7, 137.0], [23.8, 139.0], [23.9, 142.0], [24.0, 144.0], [24.1, 146.0], [24.2, 148.0], [24.3, 151.0], [24.4, 154.0], [24.5, 157.0], [24.6, 159.0], [24.7, 162.0], [24.8, 166.0], [24.9, 168.0], [25.0, 171.0], [25.1, 173.0], [25.2, 176.0], [25.3, 177.0], [25.4, 179.0], [25.5, 182.0], [25.6, 184.0], [25.7, 187.0], [25.8, 190.0], [25.9, 193.0], [26.0, 195.0], [26.1, 198.0], [26.2, 200.0], [26.3, 202.0], [26.4, 205.0], [26.5, 207.0], [26.6, 209.0], [26.7, 211.0], [26.8, 212.0], [26.9, 214.0], [27.0, 215.0], [27.1, 217.0], [27.2, 220.0], [27.3, 223.0], [27.4, 224.0], [27.5, 226.0], [27.6, 228.0], [27.7, 230.0], [27.8, 232.0], [27.9, 235.0], [28.0, 237.0], [28.1, 239.0], [28.2, 241.0], [28.3, 244.0], [28.4, 246.0], [28.5, 248.0], [28.6, 250.0], [28.7, 252.0], [28.8, 255.0], [28.9, 257.0], [29.0, 259.0], [29.1, 262.0], [29.2, 266.0], [29.3, 269.0], [29.4, 271.0], [29.5, 273.0], [29.6, 275.0], [29.7, 277.0], [29.8, 280.0], [29.9, 282.0], [30.0, 285.0], [30.1, 286.0], [30.2, 288.0], [30.3, 291.0], [30.4, 293.0], [30.5, 295.0], [30.6, 297.0], [30.7, 299.0], [30.8, 301.0], [30.9, 303.0], [31.0, 306.0], [31.1, 308.0], [31.2, 311.0], [31.3, 314.0], [31.4, 317.0], [31.5, 320.0], [31.6, 322.0], [31.7, 325.0], [31.8, 329.0], [31.9, 331.0], [32.0, 334.0], [32.1, 336.0], [32.2, 340.0], [32.3, 343.0], [32.4, 345.0], [32.5, 348.0], [32.6, 351.0], [32.7, 354.0], [32.8, 358.0], [32.9, 360.0], [33.0, 364.0], [33.1, 366.0], [33.2, 369.0], [33.3, 372.0], [33.4, 376.0], [33.5, 381.0], [33.6, 385.0], [33.7, 387.0], [33.8, 389.0], [33.9, 392.0], [34.0, 394.0], [34.1, 397.0], [34.2, 400.0], [34.3, 402.0], [34.4, 405.0], [34.5, 407.0], [34.6, 409.0], [34.7, 412.0], [34.8, 415.0], [34.9, 418.0], [35.0, 421.0], [35.1, 425.0], [35.2, 427.0], [35.3, 429.0], [35.4, 430.0], [35.5, 432.0], [35.6, 434.0], [35.7, 435.0], [35.8, 437.0], [35.9, 439.0], [36.0, 441.0], [36.1, 443.0], [36.2, 446.0], [36.3, 448.0], [36.4, 450.0], [36.5, 451.0], [36.6, 452.0], [36.7, 455.0], [36.8, 459.0], [36.9, 464.0], [37.0, 467.0], [37.1, 472.0], [37.2, 475.0], [37.3, 477.0], [37.4, 480.0], [37.5, 482.0], [37.6, 484.0], [37.7, 486.0], [37.8, 490.0], [37.9, 493.0], [38.0, 495.0], [38.1, 498.0], [38.2, 500.0], [38.3, 502.0], [38.4, 505.0], [38.5, 507.0], [38.6, 509.0], [38.7, 511.0], [38.8, 513.0], [38.9, 515.0], [39.0, 516.0], [39.1, 519.0], [39.2, 520.0], [39.3, 521.0], [39.4, 523.0], [39.5, 524.0], [39.6, 526.0], [39.7, 528.0], [39.8, 530.0], [39.9, 533.0], [40.0, 535.0], [40.1, 537.0], [40.2, 540.0], [40.3, 544.0], [40.4, 548.0], [40.5, 551.0], [40.6, 555.0], [40.7, 557.0], [40.8, 559.0], [40.9, 561.0], [41.0, 563.0], [41.1, 565.0], [41.2, 567.0], [41.3, 569.0], [41.4, 571.0], [41.5, 574.0], [41.6, 577.0], [41.7, 580.0], [41.8, 582.0], [41.9, 585.0], [42.0, 587.0], [42.1, 591.0], [42.2, 593.0], [42.3, 594.0], [42.4, 597.0], [42.5, 599.0], [42.6, 601.0], [42.7, 603.0], [42.8, 605.0], [42.9, 608.0], [43.0, 610.0], [43.1, 613.0], [43.2, 616.0], [43.3, 619.0], [43.4, 622.0], [43.5, 625.0], [43.6, 626.0], [43.7, 627.0], [43.8, 629.0], [43.9, 630.0], [44.0, 632.0], [44.1, 635.0], [44.2, 637.0], [44.3, 639.0], [44.4, 642.0], [44.5, 645.0], [44.6, 647.0], [44.7, 649.0], [44.8, 652.0], [44.9, 656.0], [45.0, 660.0], [45.1, 663.0], [45.2, 666.0], [45.3, 666.0], [45.4, 667.0], [45.5, 669.0], [45.6, 670.0], [45.7, 674.0], [45.8, 678.0], [45.9, 681.0], [46.0, 683.0], [46.1, 685.0], [46.2, 687.0], [46.3, 689.0], [46.4, 693.0], [46.5, 698.0], [46.6, 700.0], [46.7, 703.0], [46.8, 705.0], [46.9, 710.0], [47.0, 712.0], [47.1, 716.0], [47.2, 719.0], [47.3, 720.0], [47.4, 722.0], [47.5, 724.0], [47.6, 726.0], [47.7, 728.0], [47.8, 730.0], [47.9, 733.0], [48.0, 736.0], [48.1, 740.0], [48.2, 743.0], [48.3, 747.0], [48.4, 749.0], [48.5, 750.0], [48.6, 752.0], [48.7, 756.0], [48.8, 759.0], [48.9, 762.0], [49.0, 765.0], [49.1, 768.0], [49.2, 771.0], [49.3, 774.0], [49.4, 776.0], [49.5, 778.0], [49.6, 781.0], [49.7, 784.0], [49.8, 786.0], [49.9, 788.0], [50.0, 790.0], [50.1, 792.0], [50.2, 794.0], [50.3, 795.0], [50.4, 797.0], [50.5, 798.0], [50.6, 801.0], [50.7, 803.0], [50.8, 805.0], [50.9, 809.0], [51.0, 813.0], [51.1, 816.0], [51.2, 818.0], [51.3, 822.0], [51.4, 825.0], [51.5, 827.0], [51.6, 829.0], [51.7, 831.0], [51.8, 833.0], [51.9, 834.0], [52.0, 836.0], [52.1, 838.0], [52.2, 841.0], [52.3, 843.0], [52.4, 846.0], [52.5, 851.0], [52.6, 854.0], [52.7, 858.0], [52.8, 860.0], [52.9, 862.0], [53.0, 863.0], [53.1, 867.0], [53.2, 870.0], [53.3, 872.0], [53.4, 874.0], [53.5, 876.0], [53.6, 879.0], [53.7, 881.0], [53.8, 884.0], [53.9, 886.0], [54.0, 888.0], [54.1, 891.0], [54.2, 895.0], [54.3, 898.0], [54.4, 901.0], [54.5, 904.0], [54.6, 907.0], [54.7, 911.0], [54.8, 914.0], [54.9, 917.0], [55.0, 919.0], [55.1, 921.0], [55.2, 923.0], [55.3, 925.0], [55.4, 927.0], [55.5, 929.0], [55.6, 931.0], [55.7, 934.0], [55.8, 937.0], [55.9, 939.0], [56.0, 942.0], [56.1, 944.0], [56.2, 946.0], [56.3, 948.0], [56.4, 949.0], [56.5, 952.0], [56.6, 955.0], [56.7, 957.0], [56.8, 959.0], [56.9, 961.0], [57.0, 964.0], [57.1, 967.0], [57.2, 970.0], [57.3, 972.0], [57.4, 975.0], [57.5, 977.0], [57.6, 978.0], [57.7, 979.0], [57.8, 981.0], [57.9, 985.0], [58.0, 989.0], [58.1, 992.0], [58.2, 995.0], [58.3, 1000.0], [58.4, 1003.0], [58.5, 1005.0], [58.6, 1007.0], [58.7, 1010.0], [58.8, 1012.0], [58.9, 1014.0], [59.0, 1016.0], [59.1, 1017.0], [59.2, 1019.0], [59.3, 1020.0], [59.4, 1022.0], [59.5, 1023.0], [59.6, 1024.0], [59.7, 1025.0], [59.8, 1026.0], [59.9, 1028.0], [60.0, 1030.0], [60.1, 1032.0], [60.2, 1034.0], [60.3, 1036.0], [60.4, 1038.0], [60.5, 1040.0], [60.6, 1042.0], [60.7, 1044.0], [60.8, 1045.0], [60.9, 1046.0], [61.0, 1047.0], [61.1, 1049.0], [61.2, 1050.0], [61.3, 1052.0], [61.4, 1055.0], [61.5, 1057.0], [61.6, 1059.0], [61.7, 1061.0], [61.8, 1063.0], [61.9, 1065.0], [62.0, 1068.0], [62.1, 1070.0], [62.2, 1073.0], [62.3, 1077.0], [62.4, 1079.0], [62.5, 1081.0], [62.6, 1084.0], [62.7, 1089.0], [62.8, 1093.0], [62.9, 1097.0], [63.0, 1101.0], [63.1, 1104.0], [63.2, 1108.0], [63.3, 1113.0], [63.4, 1116.0], [63.5, 1118.0], [63.6, 1120.0], [63.7, 1122.0], [63.8, 1124.0], [63.9, 1128.0], [64.0, 1131.0], [64.1, 1134.0], [64.2, 1137.0], [64.3, 1139.0], [64.4, 1140.0], [64.5, 1143.0], [64.6, 1146.0], [64.7, 1151.0], [64.8, 1158.0], [64.9, 1165.0], [65.0, 1169.0], [65.1, 1172.0], [65.2, 1176.0], [65.3, 1178.0], [65.4, 1180.0], [65.5, 1182.0], [65.6, 1184.0], [65.7, 1188.0], [65.8, 1192.0], [65.9, 1196.0], [66.0, 1198.0], [66.1, 1201.0], [66.2, 1203.0], [66.3, 1206.0], [66.4, 1208.0], [66.5, 1211.0], [66.6, 1213.0], [66.7, 1216.0], [66.8, 1219.0], [66.9, 1223.0], [67.0, 1228.0], [67.1, 1231.0], [67.2, 1236.0], [67.3, 1239.0], [67.4, 1243.0], [67.5, 1247.0], [67.6, 1252.0], [67.7, 1256.0], [67.8, 1258.0], [67.9, 1261.0], [68.0, 1264.0], [68.1, 1268.0], [68.2, 1274.0], [68.3, 1279.0], [68.4, 1282.0], [68.5, 1285.0], [68.6, 1288.0], [68.7, 1295.0], [68.8, 1300.0], [68.9, 1307.0], [69.0, 1314.0], [69.1, 1319.0], [69.2, 1325.0], [69.3, 1331.0], [69.4, 1334.0], [69.5, 1338.0], [69.6, 1341.0], [69.7, 1344.0], [69.8, 1351.0], [69.9, 1356.0], [70.0, 1362.0], [70.1, 1365.0], [70.2, 1369.0], [70.3, 1373.0], [70.4, 1376.0], [70.5, 1380.0], [70.6, 1384.0], [70.7, 1387.0], [70.8, 1392.0], [70.9, 1398.0], [71.0, 1403.0], [71.1, 1407.0], [71.2, 1415.0], [71.3, 1426.0], [71.4, 1431.0], [71.5, 1435.0], [71.6, 1437.0], [71.7, 1440.0], [71.8, 1449.0], [71.9, 1454.0], [72.0, 1457.0], [72.1, 1460.0], [72.2, 1464.0], [72.3, 1469.0], [72.4, 1473.0], [72.5, 1478.0], [72.6, 1481.0], [72.7, 1486.0], [72.8, 1496.0], [72.9, 1500.0], [73.0, 1504.0], [73.1, 1509.0], [73.2, 1513.0], [73.3, 1516.0], [73.4, 1520.0], [73.5, 1525.0], [73.6, 1531.0], [73.7, 1538.0], [73.8, 1544.0], [73.9, 1551.0], [74.0, 1558.0], [74.1, 1564.0], [74.2, 1568.0], [74.3, 1573.0], [74.4, 1577.0], [74.5, 1582.0], [74.6, 1588.0], [74.7, 1595.0], [74.8, 1601.0], [74.9, 1610.0], [75.0, 1616.0], [75.1, 1621.0], [75.2, 1625.0], [75.3, 1630.0], [75.4, 1637.0], [75.5, 1642.0], [75.6, 1645.0], [75.7, 1654.0], [75.8, 1662.0], [75.9, 1668.0], [76.0, 1676.0], [76.1, 1687.0], [76.2, 1698.0], [76.3, 1706.0], [76.4, 1713.0], [76.5, 1719.0], [76.6, 1722.0], [76.7, 1727.0], [76.8, 1732.0], [76.9, 1736.0], [77.0, 1742.0], [77.1, 1745.0], [77.2, 1748.0], [77.3, 1751.0], [77.4, 1756.0], [77.5, 1764.0], [77.6, 1772.0], [77.7, 1778.0], [77.8, 1781.0], [77.9, 1783.0], [78.0, 1787.0], [78.1, 1790.0], [78.2, 1795.0], [78.3, 1801.0], [78.4, 1808.0], [78.5, 1817.0], [78.6, 1825.0], [78.7, 1831.0], [78.8, 1840.0], [78.9, 1849.0], [79.0, 1858.0], [79.1, 1867.0], [79.2, 1875.0], [79.3, 1890.0], [79.4, 1903.0], [79.5, 1910.0], [79.6, 1919.0], [79.7, 1923.0], [79.8, 1929.0], [79.9, 1939.0], [80.0, 1947.0], [80.1, 1955.0], [80.2, 1963.0], [80.3, 1974.0], [80.4, 1980.0], [80.5, 1988.0], [80.6, 1996.0], [80.7, 2005.0], [80.8, 2013.0], [80.9, 2022.0], [81.0, 2031.0], [81.1, 2038.0], [81.2, 2045.0], [81.3, 2055.0], [81.4, 2067.0], [81.5, 2074.0], [81.6, 2083.0], [81.7, 2091.0], [81.8, 2099.0], [81.9, 2109.0], [82.0, 2121.0], [82.1, 2133.0], [82.2, 2144.0], [82.3, 2158.0], [82.4, 2169.0], [82.5, 2186.0], [82.6, 2198.0], [82.7, 2213.0], [82.8, 2230.0], [82.9, 2237.0], [83.0, 2244.0], [83.1, 2251.0], [83.2, 2264.0], [83.3, 2284.0], [83.4, 2296.0], [83.5, 2316.0], [83.6, 2326.0], [83.7, 2340.0], [83.8, 2349.0], [83.9, 2370.0], [84.0, 2377.0], [84.1, 2382.0], [84.2, 2390.0], [84.3, 2402.0], [84.4, 2411.0], [84.5, 2429.0], [84.6, 2444.0], [84.7, 2466.0], [84.8, 2478.0], [84.9, 2498.0], [85.0, 2510.0], [85.1, 2524.0], [85.2, 2540.0], [85.3, 2550.0], [85.4, 2559.0], [85.5, 2573.0], [85.6, 2596.0], [85.7, 2611.0], [85.8, 2621.0], [85.9, 2629.0], [86.0, 2652.0], [86.1, 2668.0], [86.2, 2683.0], [86.3, 2697.0], [86.4, 2713.0], [86.5, 2726.0], [86.6, 2743.0], [86.7, 2763.0], [86.8, 2780.0], [86.9, 2809.0], [87.0, 2818.0], [87.1, 2824.0], [87.2, 2828.0], [87.3, 2831.0], [87.4, 2839.0], [87.5, 2849.0], [87.6, 2866.0], [87.7, 2878.0], [87.8, 2887.0], [87.9, 2901.0], [88.0, 2918.0], [88.1, 2934.0], [88.2, 2952.0], [88.3, 2970.0], [88.4, 2980.0], [88.5, 2991.0], [88.6, 3011.0], [88.7, 3025.0], [88.8, 3050.0], [88.9, 3077.0], [89.0, 3087.0], [89.1, 3103.0], [89.2, 3120.0], [89.3, 3130.0], [89.4, 3148.0], [89.5, 3165.0], [89.6, 3180.0], [89.7, 3195.0], [89.8, 3212.0], [89.9, 3228.0], [90.0, 3246.0], [90.1, 3265.0], [90.2, 3295.0], [90.3, 3338.0], [90.4, 3363.0], [90.5, 3387.0], [90.6, 3402.0], [90.7, 3434.0], [90.8, 3457.0], [90.9, 3504.0], [91.0, 3534.0], [91.1, 3562.0], [91.2, 3578.0], [91.3, 3592.0], [91.4, 3608.0], [91.5, 3629.0], [91.6, 3649.0], [91.7, 3668.0], [91.8, 3686.0], [91.9, 3721.0], [92.0, 3765.0], [92.1, 3793.0], [92.2, 3816.0], [92.3, 3827.0], [92.4, 3853.0], [92.5, 3876.0], [92.6, 3915.0], [92.7, 3932.0], [92.8, 3966.0], [92.9, 3987.0], [93.0, 4002.0], [93.1, 4034.0], [93.2, 4047.0], [93.3, 4066.0], [93.4, 4086.0], [93.5, 4112.0], [93.6, 4130.0], [93.7, 4165.0], [93.8, 4195.0], [93.9, 4235.0], [94.0, 4280.0], [94.1, 4365.0], [94.2, 4420.0], [94.3, 4501.0], [94.4, 4587.0], [94.5, 4664.0], [94.6, 4704.0], [94.7, 4727.0], [94.8, 4791.0], [94.9, 4829.0], [95.0, 4890.0], [95.1, 4928.0], [95.2, 4957.0], [95.3, 5011.0], [95.4, 5031.0], [95.5, 5079.0], [95.6, 5154.0], [95.7, 5208.0], [95.8, 5270.0], [95.9, 5315.0], [96.0, 5327.0], [96.1, 5356.0], [96.2, 5441.0], [96.3, 5581.0], [96.4, 5679.0], [96.5, 5709.0], [96.6, 5904.0], [96.7, 5980.0], [96.8, 6001.0], [96.9, 6073.0], [97.0, 6174.0], [97.1, 6303.0], [97.2, 6396.0], [97.3, 6477.0], [97.4, 6616.0], [97.5, 6674.0], [97.6, 6808.0], [97.7, 6874.0], [97.8, 6966.0], [97.9, 7002.0], [98.0, 7086.0], [98.1, 7149.0], [98.2, 7292.0], [98.3, 7633.0], [98.4, 7886.0], [98.5, 8161.0], [98.6, 8430.0], [98.7, 8891.0], [98.8, 9023.0], [98.9, 9316.0], [99.0, 9698.0], [99.1, 10156.0], [99.2, 10853.0], [99.3, 11251.0], [99.4, 11461.0], [99.5, 12398.0], [99.6, 12855.0], [99.7, 15199.0], [99.8, 17064.0], [99.9, 18737.0], [100.0, 27962.0]], "isOverall": false, "label": "Create Person Record - LoadTest", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 31108.0, "series": [{"data": [[0.0, 31108.0], [100.0, 6244.0], [200.0, 6514.0], [300.0, 4911.0], [400.0, 5686.0], [500.0, 6221.0], [600.0, 5783.0], [700.0, 5668.0], [800.0, 5444.0], [900.0, 5608.0], [1000.0, 6650.0], [1100.0, 4430.0], [1200.0, 3885.0], [1300.0, 3043.0], [1400.0, 2819.0], [1500.0, 2679.0], [1600.0, 2077.0], [1700.0, 2914.0], [1800.0, 1552.0], [1900.0, 1840.0], [2000.0, 1651.0], [2100.0, 1149.0], [2200.0, 1160.0], [2300.0, 1233.0], [2400.0, 888.0], [2500.0, 1022.0], [2600.0, 994.0], [2800.0, 1469.0], [2700.0, 764.0], [2900.0, 961.0], [3000.0, 726.0], [3100.0, 935.0], [3200.0, 710.0], [3300.0, 508.0], [3400.0, 445.0], [3500.0, 641.0], [3700.0, 415.0], [3600.0, 715.0], [3800.0, 608.0], [3900.0, 607.0], [4000.0, 667.0], [4200.0, 300.0], [4300.0, 190.0], [4100.0, 510.0], [4600.0, 253.0], [4400.0, 212.0], [4500.0, 171.0], [4700.0, 331.0], [4800.0, 282.0], [5000.0, 350.0], [4900.0, 353.0], [5100.0, 233.0], [5300.0, 417.0], [5200.0, 244.0], [5500.0, 117.0], [5400.0, 137.0], [5600.0, 230.0], [5700.0, 107.0], [5800.0, 56.0], [6000.0, 220.0], [6100.0, 105.0], [5900.0, 282.0], [6300.0, 158.0], [6200.0, 104.0], [6400.0, 154.0], [6500.0, 93.0], [6600.0, 199.0], [6700.0, 93.0], [6900.0, 221.0], [6800.0, 222.0], [7100.0, 115.0], [7000.0, 211.0], [7300.0, 48.0], [7200.0, 114.0], [7400.0, 19.0], [7500.0, 59.0], [7600.0, 51.0], [7700.0, 35.0], [7900.0, 60.0], [7800.0, 76.0], [8000.0, 51.0], [8100.0, 48.0], [8200.0, 69.0], [8300.0, 43.0], [8400.0, 43.0], [8500.0, 52.0], [8600.0, 25.0], [8700.0, 11.0], [8900.0, 106.0], [8800.0, 30.0], [9000.0, 95.0], [9100.0, 33.0], [9200.0, 13.0], [9400.0, 18.0], [9500.0, 25.0], [9300.0, 62.0], [9600.0, 67.0], [9700.0, 28.0], [9800.0, 17.0], [9900.0, 13.0], [10000.0, 21.0], [10100.0, 88.0], [10200.0, 46.0], [10300.0, 7.0], [10500.0, 8.0], [10600.0, 11.0], [10700.0, 17.0], [10400.0, 9.0], [11000.0, 47.0], [10800.0, 40.0], [11100.0, 54.0], [11200.0, 55.0], [10900.0, 11.0], [11700.0, 2.0], [11400.0, 80.0], [11300.0, 32.0], [11500.0, 18.0], [11600.0, 46.0], [11800.0, 19.0], [11900.0, 7.0], [12000.0, 10.0], [12100.0, 9.0], [12200.0, 3.0], [12500.0, 10.0], [12300.0, 14.0], [12600.0, 9.0], [12700.0, 56.0], [12400.0, 56.0], [12800.0, 13.0], [12900.0, 2.0], [13000.0, 7.0], [13100.0, 4.0], [13200.0, 8.0], [13300.0, 7.0], [13600.0, 6.0], [13400.0, 4.0], [13500.0, 5.0], [13700.0, 4.0], [13800.0, 1.0], [14100.0, 2.0], [14300.0, 1.0], [13900.0, 2.0], [14800.0, 3.0], [14600.0, 19.0], [14700.0, 15.0], [14500.0, 11.0], [14400.0, 2.0], [15100.0, 26.0], [15200.0, 6.0], [14900.0, 4.0], [15000.0, 8.0], [15600.0, 1.0], [15700.0, 1.0], [16100.0, 35.0], [16200.0, 3.0], [16600.0, 24.0], [16800.0, 9.0], [17200.0, 5.0], [17000.0, 24.0], [17400.0, 11.0], [16400.0, 1.0], [17600.0, 12.0], [18400.0, 4.0], [18200.0, 2.0], [17800.0, 11.0], [18600.0, 3.0], [19200.0, 1.0], [19000.0, 2.0], [18800.0, 1.0], [20000.0, 1.0], [23400.0, 1.0], [25800.0, 2.0], [26200.0, 1.0], [26600.0, 7.0], [26400.0, 2.0], [16500.0, 33.0], [17100.0, 30.0], [16900.0, 8.0], [16700.0, 16.0], [17300.0, 11.0], [18300.0, 5.0], [18100.0, 2.0], [17900.0, 8.0], [17500.0, 5.0], [17700.0, 9.0], [18500.0, 4.0], [18700.0, 17.0], [19100.0, 29.0], [19900.0, 1.0], [23500.0, 1.0], [25700.0, 29.0], [25900.0, 1.0], [26300.0, 45.0], [26500.0, 2.0], [27900.0, 2.0]], "isOverall": false, "label": "Create Person Record - LoadTest", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 27900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3284.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 95193.0, "series": [{"data": [[0.0, 29446.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 3284.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 14769.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 95193.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 104.52230176211462, "minX": 1.6998024E12, "maxY": 400.0, "series": [{"data": [[1.69980282E12, 400.0], [1.69980312E12, 396.3620178041544], [1.69980252E12, 394.81125880421564], [1.69980306E12, 400.0], [1.6998024E12, 104.52230176211462], [1.69980276E12, 400.0], [1.69980246E12, 271.64674019447955], [1.69980264E12, 400.0], [1.6998027E12, 400.0], [1.699803E12, 400.0], [1.69980258E12, 400.0], [1.69980288E12, 400.0], [1.69980294E12, 400.0]], "isOverall": false, "label": "Load Test - Create Person", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69980312E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3.8500000000000005, "minX": 1.0, "maxY": 5709.0, "series": [{"data": [[2.0, 1952.3333333333333], [3.0, 2899.0], [4.0, 5704.0], [5.0, 1155.2], [6.0, 5709.0], [7.0, 1150.2], [8.0, 1888.3333333333333], [9.0, 2854.0], [10.0, 816.2857142857143], [11.0, 1421.5], [12.0, 2823.0], [13.0, 7.2], [14.0, 8.166666666666666], [15.0, 7.6], [16.0, 7.666666666666666], [17.0, 9.0], [18.0, 7.333333333333333], [19.0, 8.11111111111111], [20.0, 9.142857142857144], [21.0, 7.25], [22.0, 7.6], [23.0, 8.25], [24.0, 8.75], [25.0, 8.833333333333332], [26.0, 8.25], [27.0, 6.9], [28.0, 8.142857142857142], [29.0, 13.90909090909091], [30.0, 8.8], [31.0, 7.875], [32.0, 6.166666666666667], [33.0, 7.0], [34.0, 7.0], [35.0, 7.833333333333333], [36.0, 4.857142857142857], [37.0, 6.3076923076923075], [38.0, 4.909090909090909], [39.0, 6.384615384615384], [40.0, 4.125], [41.0, 8.714285714285714], [42.0, 5.533333333333333], [43.0, 5.5], [44.0, 6.222222222222222], [45.0, 5.125000000000001], [46.0, 4.615384615384616], [47.0, 4.470588235294119], [48.0, 4.933333333333333], [49.0, 5.666666666666667], [50.0, 4.6000000000000005], [51.0, 6.684210526315789], [52.0, 5.062500000000002], [53.0, 5.222222222222222], [54.0, 6.708333333333334], [55.0, 4.999999999999999], [56.0, 5.533333333333332], [57.0, 4.631578947368421], [58.0, 5.705882352941177], [59.0, 5.615384615384616], [60.0, 5.3999999999999995], [61.0, 5.562499999999999], [62.0, 3.8500000000000005], [63.0, 4.666666666666667], [64.0, 6.105263157894737], [65.0, 4.071428571428571], [66.0, 4.833333333333333], [67.0, 4.666666666666666], [68.0, 5.272727272727273], [69.0, 3.869565217391304], [70.0, 5.333333333333333], [71.0, 5.304347826086955], [72.0, 5.045454545454545], [73.0, 4.782608695652174], [74.0, 9.200000000000001], [75.0, 4.4], [76.0, 5.714285714285714], [77.0, 4.869565217391304], [78.0, 5.478260869565218], [79.0, 4.826086956521738], [80.0, 5.1], [81.0, 6.6842105263157885], [82.0, 4.821428571428572], [83.0, 5.761904761904762], [84.0, 5.239999999999999], [85.0, 4.666666666666665], [86.0, 4.076923076923077], [87.0, 4.72], [88.0, 5.241379310344827], [89.0, 5.619047619047619], [90.0, 4.5882352941176485], [91.0, 6.238095238095237], [92.0, 5.296296296296296], [93.0, 5.181818181818182], [94.0, 7.1], [95.0, 6.741935483870968], [96.0, 7.032258064516128], [97.0, 5.285714285714286], [98.0, 6.8965517241379315], [99.0, 5.968749999999998], [100.0, 7.205882352941177], [101.0, 6.083333333333334], [102.0, 4.6875], [103.0, 5.375], [104.0, 6.68], [105.0, 5.4375], [106.0, 6.545454545454545], [107.0, 5.742857142857143], [108.0, 6.0769230769230775], [109.0, 5.964285714285715], [110.0, 7.102564102564101], [111.0, 5.749999999999998], [112.0, 5.735294117647059], [113.0, 6.7777777777777795], [114.0, 7.4411764705882355], [115.0, 5.225806451612904], [116.0, 6.677419354838709], [117.0, 6.95], [118.0, 7.142857142857143], [119.0, 5.0256410256410255], [120.0, 6.249999999999999], [121.0, 8.305555555555557], [122.0, 6.717948717948718], [123.0, 8.156249999999996], [124.0, 6.9230769230769225], [125.0, 5.374999999999999], [126.0, 5.641025641025641], [127.0, 5.473684210526318], [128.0, 5.562499999999999], [129.0, 6.560975609756096], [130.0, 6.756756756756757], [131.0, 11.612903225806452], [132.0, 7.315789473684211], [133.0, 8.41025641025641], [134.0, 7.704545454545453], [135.0, 7.131578947368421], [136.0, 4.888888888888889], [137.0, 6.073170731707316], [138.0, 6.864864864864866], [139.0, 4.883720930232559], [140.0, 6.891304347826086], [141.0, 6.333333333333335], [142.0, 4.739130434782608], [143.0, 7.162790697674419], [144.0, 6.7317073170731705], [145.0, 8.567567567567568], [146.0, 7.710526315789475], [147.0, 9.280000000000001], [148.0, 4.2727272727272725], [149.0, 6.816326530612246], [150.0, 7.395348837209301], [151.0, 7.4411764705882355], [152.0, 4.866666666666665], [153.0, 6.341463414634146], [154.0, 7.739130434782607], [155.0, 7.5625], [156.0, 8.104166666666664], [157.0, 8.261904761904763], [158.0, 7.666666666666668], [159.0, 6.926829268292682], [160.0, 7.796296296296298], [161.0, 11.297872340425533], [162.0, 11.023255813953488], [163.0, 10.391304347826088], [164.0, 11.548387096774192], [165.0, 5.428571428571428], [166.0, 7.416666666666667], [167.0, 8.43478260869565], [168.0, 8.333333333333337], [169.0, 6.211538461538463], [170.0, 7.260000000000001], [171.0, 11.787878787878789], [172.0, 7.607843137254899], [173.0, 9.0], [174.0, 9.338983050847457], [175.0, 8.760869565217392], [176.0, 9.129629629629626], [177.0, 8.68], [178.0, 10.799999999999999], [179.0, 12.261538461538464], [180.0, 15.317073170731708], [181.0, 12.315789473684207], [182.0, 10.210526315789473], [183.0, 9.57627118644068], [184.0, 8.56], [185.0, 7.442307692307694], [186.0, 6.6607142857142865], [187.0, 8.886792452830191], [188.0, 9.450980392156865], [189.0, 7.068965517241378], [190.0, 9.459999999999999], [191.0, 9.673913043478262], [192.0, 5.224137931034482], [193.0, 8.018181818181818], [194.0, 9.079999999999998], [195.0, 16.287878787878793], [196.0, 14.415094339622643], [197.0, 12.838235294117647], [198.0, 11.38], [199.0, 11.672131147540982], [200.0, 17.85483870967742], [201.0, 16.285714285714292], [202.0, 8.969230769230773], [203.0, 7.9399999999999995], [204.0, 14.666666666666666], [205.0, 13.688524590163935], [206.0, 13.593220338983048], [207.0, 14.985507246376814], [208.0, 9.055555555555555], [209.0, 8.586206896551726], [210.0, 102.41935483870968], [211.0, 12.703703703703708], [212.0, 5.8484848484848495], [213.0, 9.031746031746033], [214.0, 8.924528301886795], [215.0, 17.927536231884055], [216.0, 14.622950819672132], [217.0, 12.44927536231884], [218.0, 11.17142857142857], [219.0, 9.984848484848484], [220.0, 13.067796610169491], [221.0, 12.828124999999998], [222.0, 8.720588235294118], [223.0, 14.98591549295775], [224.0, 11.999999999999996], [225.0, 6.050847457627118], [226.0, 6.1076923076923055], [227.0, 11.424657534246576], [228.0, 8.142857142857139], [229.0, 4.514705882352944], [230.0, 5.420289855072464], [231.0, 6.0], [232.0, 4.701492537313433], [233.0, 7.016129032258066], [234.0, 11.395061728395065], [235.0, 19.176470588235286], [236.0, 8.16901408450704], [237.0, 10.743243243243244], [238.0, 10.83098591549296], [239.0, 10.623188405797103], [240.0, 16.905405405405403], [241.0, 20.65079365079366], [242.0, 9.292682926829272], [243.0, 15.986301369863014], [244.0, 10.47142857142857], [245.0, 12.777777777777775], [246.0, 11.824324324324328], [247.0, 14.301369863013702], [248.0, 13.278481012658228], [249.0, 10.940298507462689], [250.0, 13.792682926829269], [251.0, 9.597014925373132], [252.0, 5.157894736842106], [253.0, 8.973333333333334], [254.0, 8.899999999999999], [255.0, 11.529411764705882], [257.0, 10.277777777777784], [256.0, 10.0], [258.0, 14.409638554216862], [259.0, 8.91139240506329], [260.0, 11.884615384615381], [261.0, 11.644736842105265], [262.0, 6.320987654320991], [263.0, 9.525], [264.0, 6.822784810126582], [270.0, 8.97058823529412], [271.0, 15.64893617021277], [268.0, 6.296296296296296], [269.0, 8.60493827160494], [265.0, 6.4230769230769225], [266.0, 8.670886075949369], [267.0, 11.617283950617285], [273.0, 14.146666666666663], [272.0, 7.156626506024099], [274.0, 13.146067415730334], [275.0, 5.194444444444444], [276.0, 5.166666666666668], [277.0, 8.325301204819274], [278.0, 8.098765432098768], [279.0, 6.2588235294117665], [280.0, 11.24705882352941], [286.0, 5.8850574712643695], [287.0, 4.91860465116279], [284.0, 6.670588235294119], [285.0, 5.174418604651162], [281.0, 8.240506329113924], [282.0, 5.411764705882353], [283.0, 4.571428571428571], [289.0, 5.170454545454545], [288.0, 5.105882352941178], [290.0, 5.9767441860465125], [291.0, 6.215909090909091], [292.0, 8.012820512820513], [293.0, 15.593749999999998], [294.0, 10.280487804878051], [295.0, 8.499999999999998], [296.0, 7.828282828282828], [302.0, 7.294117647058822], [303.0, 8.864583333333337], [300.0, 12.977528089887635], [301.0, 8.274725274725274], [297.0, 5.266666666666667], [298.0, 5.920454545454543], [299.0, 7.175824175824175], [305.0, 4.626373626373626], [304.0, 7.967741935483872], [306.0, 4.835164835164834], [307.0, 5.136363636363634], [308.0, 5.402061855670103], [309.0, 6.648936170212767], [310.0, 4.793478260869566], [311.0, 7.076086956521741], [312.0, 5.234042553191488], [318.0, 5.135416666666669], [319.0, 5.884210526315788], [316.0, 5.698924731182795], [317.0, 6.597938144329897], [313.0, 5.414893617021277], [314.0, 7.478260869565219], [315.0, 5.8125], [321.0, 6.989690721649482], [320.0, 6.829787234042553], [322.0, 5.377551020408164], [323.0, 5.494845360824744], [324.0, 5.680412371134022], [325.0, 4.721649484536083], [326.0, 4.927835051546393], [327.0, 6.757575757575759], [328.0, 4.947916666666664], [334.0, 5.111111111111109], [335.0, 5.198019801980198], [332.0, 5.367346938775508], [333.0, 5.326732673267325], [329.0, 5.5148514851485135], [330.0, 5.464646464646466], [331.0, 5.509999999999998], [337.0, 9.308510638297877], [336.0, 5.252427184466021], [338.0, 7.283018867924526], [339.0, 5.762376237623764], [340.0, 8.441176470588232], [341.0, 15.617647058823525], [342.0, 5.702970297029703], [343.0, 5.547169811320755], [344.0, 5.274509803921571], [350.0, 5.766355140186915], [351.0, 6.653846153846155], [348.0, 5.6513761467889925], [349.0, 5.346153846153846], [345.0, 57.67924528301887], [346.0, 5.500000000000001], [347.0, 5.130000000000003], [353.0, 5.880733944954125], [352.0, 6.047169811320755], [354.0, 11.276190476190475], [355.0, 20.228571428571424], [356.0, 15.723809523809514], [357.0, 10.380000000000003], [358.0, 15.016260162601638], [359.0, 8.578431372549021], [360.0, 13.769911504424774], [366.0, 9.129629629629626], [367.0, 7.1651376146788985], [364.0, 13.679611650485434], [365.0, 10.311926605504587], [361.0, 10.500000000000002], [362.0, 12.848484848484848], [363.0, 16.915966386554608], [369.0, 12.601851851851853], [368.0, 19.843478260869574], [370.0, 5.648148148148148], [371.0, 23.963963963963966], [372.0, 10.375], [373.0, 19.504273504273502], [374.0, 32.882882882882896], [375.0, 10.784313725490193], [376.0, 19.74166666666667], [382.0, 60.80180180180184], [383.0, 70.56910569105692], [380.0, 22.94495412844037], [381.0, 41.351351351351326], [377.0, 67.61320754716985], [378.0, 28.672268907563044], [379.0, 22.15384615384616], [385.0, 19.015748031496074], [384.0, 27.49056603773586], [386.0, 14.522522522522525], [387.0, 16.2621359223301], [388.0, 116.8086956521739], [389.0, 29.39130434782609], [390.0, 12.603960396039598], [391.0, 88.33834586466169], [392.0, 50.282051282051285], [398.0, 148.84732824427482], [399.0, 91.51748251748252], [396.0, 2776.8891687657406], [397.0, 73.06741573033709], [393.0, 13.974576271186436], [394.0, 17.7280701754386], [395.0, 79.936], [400.0, 1603.5529230432185], [1.0, 3019.5]], "isOverall": false, "label": "Create Person Record - LoadTest", "isController": false}, {"data": [[377.9662419757267, 1344.7854119361973]], "isOverall": false, "label": "Create Person Record - LoadTest-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 400.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1033.5666666666666, "minX": 1.6998024E12, "maxY": 654647.8666666667, "series": [{"data": [[1.69980282E12, 493364.3], [1.69980312E12, 70289.73333333334], [1.69980252E12, 606964.8666666667], [1.69980306E12, 213522.35], [1.6998024E12, 30346.333333333332], [1.69980276E12, 333899.0333333333], [1.69980246E12, 128478.01666666666], [1.69980264E12, 652233.1833333333], [1.6998027E12, 654647.8666666667], [1.699803E12, 257558.18333333332], [1.69980258E12, 477851.7], [1.69980288E12, 414314.31666666665], [1.69980294E12, 357870.5833333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69980282E12, 12520.05], [1.69980312E12, 1033.5666666666666], [1.69980252E12, 36752.73333333333], [1.69980306E12, 4620.033333333334], [1.6998024E12, 18698.65], [1.69980276E12, 12193.166666666666], [1.69980246E12, 79102.83333333333], [1.69980264E12, 46474.183333333334], [1.6998027E12, 16836.566666666666], [1.699803E12, 5129.716666666666], [1.69980258E12, 12187.9], [1.69980288E12, 10239.533333333333], [1.69980294E12, 6588.516666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69980312E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6.411618942731286, "minX": 1.6998024E12, "maxY": 3784.8747903856997, "series": [{"data": [[1.69980282E12, 1660.5922337806683], [1.69980312E12, 3749.719287833824], [1.69980252E12, 753.5528252925932], [1.69980306E12, 3784.8747903856997], [1.6998024E12, 6.411618942731286], [1.69980276E12, 2055.515633571038], [1.69980246E12, 8.736800887554683], [1.69980264E12, 601.9982708664386], [1.6998027E12, 1134.1713927526719], [1.699803E12, 3201.6812499999905], [1.69980258E12, 1553.4867763858151], [1.69980288E12, 1928.2188034188075], [1.69980294E12, 2224.080436264482]], "isOverall": false, "label": "Create Person Record - LoadTest", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69980312E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 6.038270925110137, "minX": 1.6998024E12, "maxY": 1289.0991242779996, "series": [{"data": [[1.69980282E12, 735.7185738108462], [1.69980312E12, 1232.3388724035588], [1.69980252E12, 269.0463379759573], [1.69980306E12, 1289.0991242779996], [1.6998024E12, 6.038270925110137], [1.69980276E12, 933.1507405375763], [1.69980246E12, 7.918814853488223], [1.69980264E12, 305.69997195999593], [1.6998027E12, 493.4972837442524], [1.699803E12, 1072.4326562500016], [1.69980258E12, 703.6554491116032], [1.69980288E12, 782.5714150047489], [1.69980294E12, 831.4802317655051]], "isOverall": false, "label": "Create Person Record - LoadTest", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69980312E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.75137665198238, "minX": 1.6998024E12, "maxY": 2560.7293768545965, "series": [{"data": [[1.69980282E12, 827.0850472484698], [1.69980312E12, 2560.7293768545965], [1.69980252E12, 470.3600593126071], [1.69980306E12, 2480.8399478293286], [1.6998024E12, 1.75137665198238], [1.69980276E12, 920.5206801974748], [1.69980246E12, 3.4245904848920006], [1.69980264E12, 257.11846901579725], [1.6998027E12, 554.5162079875828], [1.699803E12, 2004.4075000000025], [1.69980258E12, 742.5689838696486], [1.69980288E12, 1024.2469135802394], [1.69980294E12, 1336.558736650753]], "isOverall": false, "label": "Create Person Record - LoadTest", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69980312E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.6998024E12, "maxY": 27962.0, "series": [{"data": [[1.69980282E12, 11375.0], [1.69980264E12, 10028.0], [1.69980312E12, 5557.0], [1.6998027E12, 10662.0], [1.69980252E12, 9581.0], [1.69980258E12, 11940.0], [1.6998024E12, 200.0], [1.69980288E12, 11986.0], [1.69980294E12, 11593.0], [1.69980276E12, 27962.0], [1.69980246E12, 64.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69980282E12, 7928.200000000001], [1.69980264E12, 2001.0], [1.69980312E12, 5557.0], [1.6998027E12, 5872.800000000001], [1.69980252E12, 2553.5000000000027], [1.69980258E12, 7148.0], [1.6998024E12, 9.0], [1.69980288E12, 7395.800000000001], [1.69980294E12, 11489.5], [1.69980276E12, 6887.0], [1.69980246E12, 18.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69980282E12, 11282.0], [1.69980264E12, 7858.24], [1.69980312E12, 5557.0], [1.6998027E12, 7330.959999999939], [1.69980252E12, 6622.0], [1.69980258E12, 11057.0], [1.6998024E12, 14.0], [1.69980288E12, 10463.52], [1.69980294E12, 11593.0], [1.69980276E12, 26383.41], [1.69980246E12, 33.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69980282E12, 9517.399999999998], [1.69980264E12, 3787.3999999999996], [1.69980312E12, 5557.0], [1.6998027E12, 6209.15], [1.69980252E12, 4792.349999999999], [1.69980258E12, 9092.0], [1.6998024E12, 11.0], [1.69980288E12, 8592.599999999999], [1.69980294E12, 11527.0], [1.69980276E12, 16538.05], [1.69980246E12, 23.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69980282E12, 1192.0], [1.69980264E12, 4.0], [1.69980312E12, 5323.0], [1.6998027E12, 226.0], [1.69980252E12, 2.0], [1.69980258E12, 726.0], [1.6998024E12, 2.0], [1.69980288E12, 1579.0], [1.69980294E12, 7844.0], [1.69980276E12, 1055.0], [1.69980246E12, 2.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69980282E12, 4130.0], [1.69980264E12, 354.0], [1.69980312E12, 5342.0], [1.6998027E12, 2679.0], [1.69980252E12, 31.0], [1.69980258E12, 3416.0], [1.6998024E12, 6.0], [1.69980288E12, 4908.0], [1.69980294E12, 11190.5], [1.69980276E12, 3231.0], [1.69980246E12, 6.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69980312E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 4.0, "minX": 1.0, "maxY": 26381.0, "series": [{"data": [[2.0, 4869.0], [3.0, 2828.0], [4.0, 3192.0], [5.0, 4010.5], [7.0, 2548.5], [9.0, 491.0], [10.0, 4937.0], [11.0, 1458.0], [12.0, 1841.5], [13.0, 12581.0], [14.0, 3171.0], [16.0, 3676.0], [18.0, 1724.5], [20.0, 2190.0], [21.0, 6734.0], [23.0, 1392.0], [24.0, 1879.5], [25.0, 7849.5], [26.0, 7162.5], [27.0, 6511.0], [28.0, 2627.0], [29.0, 9.0], [30.0, 168.0], [31.0, 3575.0], [33.0, 3121.5], [35.0, 25766.0], [34.0, 7939.0], [36.0, 3034.5], [38.0, 5.0], [39.0, 4055.5], [40.0, 3583.0], [41.0, 5576.5], [42.0, 7.0], [43.0, 2971.0], [46.0, 3968.5], [48.0, 5.0], [50.0, 2735.0], [52.0, 5.0], [55.0, 5.0], [57.0, 4249.0], [61.0, 5.0], [63.0, 5.0], [62.0, 26381.0], [66.0, 5.0], [71.0, 2775.0], [75.0, 1628.0], [72.0, 5148.0], [74.0, 9651.0], [79.0, 6.0], [80.0, 6.0], [81.0, 2021.0], [83.0, 3865.0], [86.0, 6.0], [85.0, 10865.0], [88.0, 5.0], [90.0, 6.0], [91.0, 3985.0], [94.0, 7.0], [95.0, 7926.5], [92.0, 5905.0], [98.0, 7.0], [99.0, 6.0], [97.0, 7061.0], [102.0, 7.0], [103.0, 10764.0], [100.0, 11498.0], [105.0, 7.0], [106.0, 2598.0], [108.0, 6.0], [111.0, 7.0], [115.0, 505.0], [113.0, 4443.0], [119.0, 5.0], [117.0, 598.0], [124.0, 13.0], [127.0, 4284.0], [134.0, 8.0], [128.0, 7.0], [130.0, 6.0], [132.0, 3424.0], [133.0, 6967.0], [138.0, 6.0], [136.0, 11.0], [137.0, 6.0], [139.0, 2974.0], [141.0, 4173.0], [150.0, 11.0], [149.0, 9.0], [145.0, 8.0], [151.0, 4357.0], [148.0, 1297.0], [144.0, 4314.0], [156.0, 7.0], [158.0, 7.0], [152.0, 6030.0], [157.0, 528.0], [159.0, 2703.0], [166.0, 9.0], [163.0, 10.0], [165.0, 2406.0], [164.0, 5020.0], [160.0, 5192.0], [172.0, 12.0], [174.0, 10.0], [173.0, 8.0], [170.0, 2420.5], [169.0, 3101.0], [168.0, 2266.5], [178.0, 7.0], [176.0, 2656.0], [183.0, 4000.5], [190.0, 14.0], [191.0, 14.0], [186.0, 2934.0], [188.0, 3986.5], [193.0, 7.0], [199.0, 14.0], [196.0, 12.0], [192.0, 3750.0], [202.0, 11.0], [201.0, 4752.0], [205.0, 2068.0], [204.0, 3713.0], [207.0, 918.0], [206.0, 5573.0], [200.0, 8290.0], [210.0, 8.0], [214.0, 7.0], [215.0, 11049.0], [213.0, 5994.0], [209.0, 6973.0], [212.0, 2481.0], [208.0, 4283.0], [211.0, 9165.0], [217.0, 13.0], [216.0, 7.0], [221.0, 5032.0], [223.0, 7212.0], [229.0, 24.0], [224.0, 2585.0], [226.0, 3515.0], [227.0, 3673.0], [228.0, 2476.0], [233.0, 6.0], [235.0, 11.0], [237.0, 2566.0], [236.0, 5143.0], [240.0, 12.0], [243.0, 7.0], [246.0, 15.0], [241.0, 9.0], [247.0, 5153.0], [245.0, 6839.5], [248.0, 6.0], [252.0, 9.0], [249.0, 5520.5], [253.0, 6962.0], [265.0, 30.0], [256.0, 5.0], [270.0, 6.0], [271.0, 7.0], [263.0, 5733.0], [269.0, 3982.0], [264.0, 4121.0], [261.0, 4679.5], [280.0, 2849.0], [273.0, 5.0], [275.0, 5.0], [284.0, 3209.0], [276.0, 6.0], [282.0, 5.0], [283.0, 4.0], [279.0, 6083.5], [281.0, 3935.0], [274.0, 5077.0], [301.0, 6.0], [293.0, 6.0], [297.0, 4.0], [302.0, 11.0], [296.0, 2549.0], [299.0, 1422.0], [300.0, 3718.0], [298.0, 2541.0], [292.0, 9092.0], [289.0, 3342.0], [294.0, 302.5], [288.0, 1896.0], [290.0, 3789.0], [306.0, 5319.0], [308.0, 4.0], [315.0, 7.0], [318.0, 396.0], [310.0, 8256.5], [305.0, 3880.0], [319.0, 95.0], [312.0, 3234.5], [313.0, 3838.0], [314.0, 2229.0], [316.0, 229.5], [307.0, 8692.0], [311.0, 2934.0], [323.0, 5.0], [327.0, 6.0], [326.0, 3534.0], [330.0, 5.0], [331.0, 3019.0], [333.0, 5.0], [334.0, 10.0], [329.0, 5204.5], [321.0, 2132.0], [322.0, 4839.5], [320.0, 11.0], [332.0, 1686.0], [337.0, 2812.5], [340.0, 10.0], [344.0, 6.0], [347.0, 5.0], [351.0, 8.0], [341.0, 7.0], [336.0, 6743.0], [343.0, 4970.5], [346.0, 218.5], [345.0, 6084.0], [339.0, 3197.5], [348.0, 3976.0], [364.0, 11.0], [360.0, 6.0], [362.0, 9.0], [361.0, 1573.0], [363.0, 11.0], [366.0, 24.0], [365.0, 5224.0], [353.0, 8428.0], [352.0, 4823.0], [354.0, 2877.0], [355.0, 90.0], [358.0, 2998.5], [359.0, 3990.0], [369.0, 69.5], [368.0, 18.0], [380.0, 12.0], [382.0, 57.0], [375.0, 104.0], [378.0, 6306.0], [373.0, 2084.0], [371.0, 3308.5], [377.0, 5020.0], [387.0, 1197.5], [398.0, 3460.0], [397.0, 13.0], [394.0, 1028.5], [393.0, 2587.5], [388.0, 219.0], [395.0, 3263.0], [385.0, 8064.0], [384.0, 2021.0], [391.0, 3503.0], [389.0, 1821.0], [401.0, 1430.0], [404.0, 16.0], [412.0, 31.0], [408.0, 4082.5], [405.0, 1673.0], [400.0, 2433.5], [406.0, 5067.0], [407.0, 5692.0], [411.0, 8260.0], [409.0, 954.0], [403.0, 874.5], [402.0, 1599.0], [426.0, 1483.0], [420.0, 7220.0], [421.0, 2160.0], [425.0, 589.5], [422.0, 565.5], [419.0, 1821.0], [427.0, 2019.5], [424.0, 2244.0], [447.0, 6465.0], [435.0, 277.0], [432.0, 3250.0], [446.0, 160.0], [436.0, 4036.0], [439.0, 3439.0], [452.0, 1676.0], [461.0, 143.0], [463.0, 1987.0], [457.0, 1996.5], [458.0, 1934.0], [456.0, 1851.5], [460.0, 3391.0], [477.0, 1506.0], [471.0, 594.0], [474.0, 1023.0], [479.0, 4066.0], [469.0, 5922.0], [482.0, 3718.0], [484.0, 3598.0], [493.0, 3907.0], [503.0, 1223.5], [529.0, 310.0], [542.0, 1584.0], [562.0, 130.0], [549.0, 200.5], [599.0, 181.5], [581.0, 4927.0], [594.0, 1350.0], [626.0, 422.0], [628.0, 1357.0], [662.0, 1854.5], [646.0, 323.5], [1.0, 4269.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 5351.0], [3.0, 6314.5], [4.0, 10883.0], [5.0, 872.0], [7.0, 2387.0], [8.0, 5242.0], [9.0, 1445.0], [10.0, 1635.0], [12.0, 5706.5], [13.0, 2307.0], [14.0, 967.0], [16.0, 426.0], [18.0, 5802.5], [19.0, 7199.0], [20.0, 2824.5], [21.0, 2626.0], [23.0, 1905.0], [25.0, 1108.5], [27.0, 1803.0], [29.0, 13251.5], [30.0, 17793.0], [31.0, 3165.0], [34.0, 12210.0], [36.0, 979.0], [39.0, 2831.5], [40.0, 889.0], [41.0, 937.0], [42.0, 452.0], [45.0, 2371.0], [47.0, 1082.0], [46.0, 2504.0], [50.0, 1026.5], [59.0, 18234.0], [58.0, 1270.5], [61.0, 1659.0], [62.0, 8356.0], [64.0, 3556.0], [71.0, 980.5], [72.0, 1177.0], [75.0, 957.0], [74.0, 1611.0], [79.0, 1078.0], [81.0, 249.0], [83.0, 924.0], [80.0, 2015.0], [86.0, 439.0], [85.0, 4158.0], [90.0, 893.0], [91.0, 969.0], [89.0, 2731.0], [95.0, 1324.0], [92.0, 1868.0], [94.0, 1801.0], [98.0, 448.0], [99.0, 903.0], [97.0, 1535.0], [102.0, 4071.0], [103.0, 1261.0], [100.0, 3102.0], [106.0, 688.0], [105.0, 1339.0], [111.0, 2266.0], [109.0, 2986.0], [115.0, 1870.5], [113.0, 1700.0], [114.0, 6824.0], [117.0, 953.0], [119.0, 2086.0], [127.0, 1479.5], [124.0, 1383.5], [132.0, 1079.0], [133.0, 1866.0], [139.0, 564.0], [138.0, 2903.0], [141.0, 593.0], [136.0, 619.0], [151.0, 465.0], [148.0, 1875.0], [145.0, 6856.0], [150.0, 1084.0], [144.0, 859.0], [152.0, 2031.0], [157.0, 392.0], [159.0, 1399.5], [155.0, 1001.0], [165.0, 1004.0], [164.0, 1267.0], [166.0, 947.0], [160.0, 1904.0], [170.0, 3356.0], [169.0, 1105.0], [168.0, 1112.0], [173.0, 3102.0], [176.0, 463.0], [183.0, 652.0], [186.0, 976.0], [188.0, 1831.0], [190.0, 2971.0], [193.0, 481.0], [196.0, 811.0], [192.0, 2007.0], [201.0, 332.0], [205.0, 817.0], [204.0, 797.0], [207.0, 2819.0], [206.0, 780.5], [200.0, 447.0], [215.0, 578.0], [213.0, 796.0], [214.0, 511.0], [209.0, 3898.5], [212.0, 946.0], [208.0, 1567.0], [211.0, 1543.0], [221.0, 637.0], [223.0, 1027.5], [229.0, 838.0], [224.0, 609.5], [226.0, 980.0], [227.0, 742.0], [228.0, 1198.0], [225.0, 1779.5], [237.0, 1402.0], [236.0, 569.0], [241.0, 978.0], [247.0, 653.0], [245.0, 1044.0], [249.0, 901.0], [248.0, 841.0], [253.0, 718.0], [254.0, 1791.0], [269.0, 535.0], [263.0, 1359.0], [265.0, 626.0], [256.0, 668.0], [264.0, 1182.0], [261.0, 2251.0], [262.0, 2375.0], [271.0, 632.0], [267.0, 1342.0], [268.0, 1244.5], [280.0, 2373.0], [279.0, 1048.0], [281.0, 1059.0], [274.0, 276.0], [282.0, 1174.0], [284.0, 974.0], [276.0, 1174.0], [273.0, 2286.0], [300.0, 3162.0], [299.0, 1435.0], [293.0, 1319.0], [298.0, 917.0], [292.0, 748.0], [302.0, 960.0], [301.0, 835.0], [296.0, 1006.0], [289.0, 783.0], [290.0, 958.0], [294.0, 1514.0], [288.0, 301.0], [318.0, 703.0], [305.0, 584.0], [310.0, 1285.0], [309.0, 1436.0], [315.0, 808.0], [316.0, 1539.0], [306.0, 920.5], [307.0, 1257.0], [311.0, 718.0], [304.0, 2626.0], [314.0, 867.0], [312.0, 919.0], [319.0, 2839.0], [313.0, 1451.0], [323.0, 743.0], [329.0, 749.0], [321.0, 807.0], [334.0, 775.0], [327.0, 1499.5], [326.0, 861.0], [320.0, 42.0], [332.0, 137.0], [333.0, 1316.0], [322.0, 734.0], [331.0, 388.0], [336.0, 1442.5], [347.0, 778.0], [340.0, 910.5], [344.0, 1041.5], [337.0, 647.0], [341.0, 1025.0], [343.0, 2231.0], [339.0, 951.0], [346.0, 1363.5], [345.0, 1209.0], [348.0, 928.5], [354.0, 701.0], [353.0, 500.0], [364.0, 814.0], [355.0, 82.5], [358.0, 1017.0], [359.0, 1114.5], [361.0, 1022.0], [366.0, 1236.0], [360.0, 1306.5], [365.0, 1137.5], [352.0, 1574.0], [363.0, 1119.5], [369.0, 880.0], [378.0, 927.0], [375.0, 695.0], [382.0, 1750.0], [368.0, 790.0], [373.0, 697.0], [371.0, 626.0], [377.0, 1229.0], [379.0, 4714.0], [387.0, 424.0], [394.0, 365.0], [398.0, 684.0], [397.0, 1743.0], [393.0, 1037.0], [388.0, 2879.0], [395.0, 1811.0], [385.0, 1126.0], [389.0, 1216.5], [384.0, 1139.0], [391.0, 1142.0], [390.0, 2515.0], [402.0, 790.0], [405.0, 1163.0], [401.0, 903.0], [400.0, 636.0], [406.0, 433.0], [407.0, 729.0], [411.0, 1162.0], [409.0, 389.0], [403.0, 205.0], [408.0, 1474.0], [426.0, 680.0], [420.0, 1998.0], [421.0, 918.0], [425.0, 105.0], [422.0, 502.0], [419.0, 931.5], [427.0, 675.0], [424.0, 1920.0], [447.0, 610.0], [435.0, 515.0], [432.0, 721.0], [436.0, 273.0], [439.0, 1430.0], [452.0, 687.0], [461.0, 36.0], [463.0, 346.0], [457.0, 259.0], [458.0, 401.5], [456.0, 1174.0], [460.0, 1398.0], [477.0, 906.0], [471.0, 220.0], [474.0, 103.0], [479.0, 392.0], [469.0, 719.0], [464.0, 2069.5], [482.0, 633.0], [484.0, 1047.0], [493.0, 2007.0], [503.0, 349.0], [529.0, 1213.0], [542.0, 711.5], [562.0, 130.0], [549.0, 59.0], [599.0, 501.0], [581.0, 408.0], [594.0, 307.0], [626.0, 61.0], [628.0, 246.5], [662.0, 398.0], [646.0, 203.0], [1.0, 4330.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 662.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 23737.0, "series": [{"data": [[2.0, 3846.0], [3.0, 1822.0], [4.0, 2068.5], [5.0, 2441.5], [7.0, 1933.5], [9.0, 166.0], [10.0, 4210.5], [11.0, 986.0], [12.0, 1612.0], [13.0, 6884.0], [14.0, 2402.0], [16.0, 2362.0], [18.0, 1025.5], [20.0, 1101.0], [21.0, 5506.0], [23.0, 1347.5], [24.0, 1063.5], [25.0, 6040.0], [26.0, 5384.5], [27.0, 4788.0], [28.0, 1357.0], [29.0, 8.0], [30.0, 134.0], [31.0, 3128.0], [33.0, 2425.5], [35.0, 23477.0], [34.0, 7057.5], [36.0, 1759.0], [38.0, 5.0], [39.0, 3921.5], [40.0, 2596.0], [41.0, 4206.5], [42.0, 7.0], [43.0, 2015.0], [46.0, 3713.0], [48.0, 5.0], [50.0, 2304.5], [52.0, 5.0], [55.0, 5.0], [57.0, 2637.0], [61.0, 5.0], [63.0, 5.0], [62.0, 23737.0], [66.0, 5.0], [71.0, 2230.0], [75.0, 1175.0], [72.0, 3689.0], [74.0, 8393.0], [79.0, 5.0], [80.0, 6.0], [81.0, 1992.5], [83.0, 1671.0], [86.0, 5.0], [85.0, 6804.0], [88.0, 5.0], [90.0, 5.0], [91.0, 3003.0], [94.0, 6.0], [95.0, 6484.5], [92.0, 4138.0], [98.0, 6.0], [99.0, 6.0], [97.0, 5578.0], [102.0, 7.0], [103.0, 9088.0], [100.0, 10391.0], [105.0, 6.0], [106.0, 1896.0], [108.0, 6.0], [111.0, 6.0], [115.0, 313.0], [113.0, 3502.0], [119.0, 5.0], [117.0, 127.0], [124.0, 13.0], [127.0, 3106.0], [134.0, 7.5], [128.0, 7.0], [130.0, 5.0], [132.0, 2087.0], [133.0, 5328.0], [138.0, 6.0], [136.0, 11.0], [137.0, 6.0], [139.0, 2911.5], [141.0, 4167.0], [150.0, 11.0], [149.0, 9.0], [145.0, 7.0], [151.0, 3904.5], [148.0, 476.0], [144.0, 2782.0], [156.0, 7.0], [158.0, 6.0], [152.0, 4782.0], [157.0, 473.0], [159.0, 1425.0], [166.0, 9.0], [163.0, 10.0], [165.0, 1241.0], [164.0, 3741.0], [160.0, 3698.0], [172.0, 11.0], [174.0, 9.0], [173.0, 8.0], [170.0, 1252.5], [169.0, 2343.0], [168.0, 2250.5], [178.0, 7.0], [176.0, 2655.0], [183.0, 2433.5], [190.0, 13.0], [191.0, 14.0], [186.0, 2874.0], [188.0, 1958.5], [193.0, 7.0], [199.0, 13.0], [196.0, 12.0], [192.0, 1706.0], [202.0, 11.0], [201.0, 4751.0], [205.0, 1268.0], [204.0, 2913.0], [207.0, 432.0], [206.0, 5572.0], [200.0, 7073.0], [210.0, 7.0], [214.0, 7.0], [215.0, 11048.0], [213.0, 5994.0], [209.0, 2994.0], [212.0, 1546.0], [208.0, 1908.0], [211.0, 7553.0], [217.0, 13.0], [216.0, 6.0], [221.0, 4563.0], [223.0, 5212.0], [229.0, 18.5], [224.0, 1742.5], [226.0, 2389.5], [227.0, 3370.0], [228.0, 2365.0], [233.0, 5.0], [235.0, 10.0], [237.0, 1609.0], [236.0, 3945.0], [240.0, 11.5], [243.0, 7.0], [246.0, 14.5], [241.0, 9.0], [247.0, 5152.0], [245.0, 4880.5], [248.0, 5.0], [252.0, 9.0], [249.0, 4777.0], [253.0, 6036.0], [265.0, 29.0], [256.0, 4.0], [270.0, 5.0], [271.0, 7.0], [263.0, 5726.0], [269.0, 3977.0], [264.0, 4121.0], [261.0, 3393.0], [280.0, 2216.0], [273.0, 4.0], [275.0, 4.0], [284.0, 2273.0], [276.0, 5.0], [282.0, 4.0], [283.0, 4.0], [279.0, 4915.0], [281.0, 2885.0], [274.0, 5071.0], [301.0, 4.0], [293.0, 4.0], [297.0, 4.0], [302.0, 11.0], [296.0, 1581.0], [299.0, 373.0], [300.0, 2468.0], [298.0, 2416.5], [292.0, 7306.0], [289.0, 2198.0], [294.0, 174.5], [288.0, 1509.0], [290.0, 3788.5], [306.0, 4155.5], [308.0, 4.0], [315.0, 6.0], [318.0, 211.0], [310.0, 8092.0], [305.0, 3878.0], [319.0, 79.0], [312.0, 3213.5], [313.0, 3835.0], [314.0, 2229.0], [316.0, 193.0], [307.0, 8050.5], [311.0, 1957.0], [323.0, 4.0], [327.0, 5.0], [326.0, 3533.0], [330.0, 4.0], [331.0, 2579.0], [333.0, 4.0], [334.0, 9.0], [329.0, 5089.5], [321.0, 1498.0], [322.0, 3620.5], [320.0, 8.5], [332.0, 1496.0], [337.0, 1824.0], [340.0, 8.0], [344.0, 4.0], [347.0, 4.0], [351.0, 7.0], [341.0, 6.0], [336.0, 6675.0], [343.0, 2479.0], [346.0, 177.0], [345.0, 6074.0], [339.0, 1698.0], [348.0, 2459.0], [364.0, 10.0], [360.0, 5.0], [362.0, 7.0], [361.0, 1558.0], [363.0, 10.0], [366.0, 22.0], [365.0, 4193.0], [353.0, 7675.0], [352.0, 4822.0], [354.0, 1958.0], [355.0, 84.0], [358.0, 2996.0], [359.0, 3990.0], [369.0, 64.5], [368.0, 16.0], [380.0, 11.0], [382.0, 51.0], [375.0, 87.0], [378.0, 6301.0], [373.0, 2081.0], [371.0, 3302.5], [377.0, 5016.0], [387.0, 1083.0], [398.0, 3458.0], [397.0, 11.0], [394.0, 1022.5], [393.0, 1526.0], [388.0, 101.5], [395.0, 3130.0], [385.0, 6288.0], [384.0, 2017.0], [391.0, 2233.0], [389.0, 1819.0], [401.0, 1391.5], [404.0, 14.0], [412.0, 26.0], [408.0, 2551.5], [405.0, 1516.0], [400.0, 1634.5], [406.0, 5067.0], [407.0, 5691.0], [411.0, 8248.0], [409.0, 912.0], [403.0, 846.5], [402.0, 1109.0], [426.0, 1480.5], [420.0, 5311.0], [421.0, 2145.0], [425.0, 218.0], [422.0, 511.0], [419.0, 1796.5], [427.0, 2011.5], [424.0, 1977.0], [447.0, 6465.0], [435.0, 234.5], [432.0, 2239.0], [446.0, 150.0], [436.0, 3870.0], [439.0, 1986.0], [452.0, 1670.0], [461.0, 111.0], [463.0, 1978.0], [457.0, 1994.0], [458.0, 1875.5], [456.0, 1851.0], [460.0, 1929.0], [477.0, 1499.0], [471.0, 549.0], [474.0, 1008.0], [479.0, 4065.0], [469.0, 5922.0], [482.0, 3713.5], [484.0, 2508.5], [493.0, 2199.0], [503.0, 1220.0], [529.0, 207.0], [542.0, 1442.5], [562.0, 105.5], [549.0, 192.0], [599.0, 164.5], [581.0, 4922.0], [594.0, 1015.0], [626.0, 376.0], [628.0, 1101.5], [662.0, 1024.0], [646.0, 315.0], [1.0, 3925.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [3.0, 1631.5], [4.0, 8613.5], [5.0, 0.0], [7.0, 0.0], [8.0, 0.0], [9.0, 0.0], [10.0, 0.0], [12.0, 5423.0], [13.0, 0.0], [14.0, 0.0], [16.0, 0.0], [18.0, 3088.5], [19.0, 5552.0], [20.0, 2667.5], [21.0, 0.0], [23.0, 0.0], [25.0, 0.0], [27.0, 0.0], [29.0, 11965.0], [30.0, 13732.0], [31.0, 0.0], [34.0, 11889.5], [36.0, 0.0], [39.0, 1086.5], [40.0, 0.0], [41.0, 0.0], [42.0, 0.0], [45.0, 0.0], [47.0, 0.0], [46.0, 0.0], [50.0, 0.0], [59.0, 14263.0], [58.0, 0.0], [61.0, 0.0], [62.0, 0.0], [64.0, 0.0], [71.0, 0.0], [72.0, 0.0], [75.0, 0.0], [74.0, 0.0], [79.0, 0.0], [81.0, 0.0], [83.0, 0.0], [80.0, 0.0], [86.0, 0.0], [85.0, 0.0], [90.0, 0.0], [91.0, 0.0], [89.0, 0.0], [95.0, 0.0], [92.0, 0.0], [94.0, 0.0], [98.0, 0.0], [99.0, 0.0], [97.0, 0.0], [102.0, 0.0], [103.0, 0.0], [100.0, 1076.0], [106.0, 0.0], [105.0, 0.0], [111.0, 0.0], [109.0, 0.0], [115.0, 0.0], [113.0, 0.0], [114.0, 4743.5], [117.0, 0.0], [119.0, 0.0], [127.0, 0.0], [124.0, 0.0], [132.0, 0.0], [133.0, 0.0], [139.0, 0.0], [138.0, 0.0], [141.0, 0.0], [136.0, 0.0], [151.0, 0.0], [148.0, 0.0], [145.0, 0.0], [150.0, 0.0], [144.0, 0.0], [152.0, 0.0], [157.0, 0.0], [159.0, 0.0], [155.0, 0.0], [165.0, 0.0], [164.0, 0.0], [166.0, 0.0], [160.0, 0.0], [170.0, 0.0], [169.0, 0.0], [168.0, 0.0], [173.0, 0.0], [176.0, 0.0], [183.0, 0.0], [186.0, 0.0], [188.0, 0.0], [190.0, 0.0], [193.0, 0.0], [196.0, 0.0], [192.0, 0.0], [201.0, 0.0], [205.0, 0.0], [204.0, 0.0], [207.0, 0.0], [206.0, 0.0], [200.0, 0.0], [215.0, 0.0], [213.0, 0.0], [214.0, 0.0], [209.0, 0.0], [212.0, 0.0], [208.0, 0.0], [211.0, 0.0], [221.0, 0.0], [223.0, 0.0], [229.0, 0.0], [224.0, 0.0], [226.0, 0.0], [227.0, 0.0], [228.0, 0.0], [225.0, 0.0], [237.0, 0.0], [236.0, 0.0], [241.0, 0.0], [247.0, 0.0], [245.0, 0.0], [249.0, 0.0], [248.0, 0.0], [253.0, 0.0], [254.0, 0.0], [269.0, 0.0], [263.0, 0.0], [265.0, 0.0], [256.0, 0.0], [264.0, 0.0], [261.0, 0.0], [262.0, 0.0], [271.0, 0.0], [267.0, 0.0], [268.0, 0.0], [280.0, 0.0], [279.0, 0.0], [281.0, 0.0], [274.0, 0.0], [282.0, 0.0], [284.0, 0.0], [276.0, 0.0], [273.0, 0.0], [300.0, 0.0], [299.0, 0.0], [293.0, 0.0], [298.0, 0.0], [292.0, 0.0], [302.0, 0.0], [301.0, 0.0], [296.0, 0.0], [289.0, 0.0], [290.0, 0.0], [294.0, 0.0], [288.0, 0.0], [318.0, 0.0], [305.0, 0.0], [310.0, 0.0], [309.0, 0.0], [315.0, 0.0], [316.0, 0.0], [306.0, 0.0], [307.0, 0.0], [311.0, 0.0], [304.0, 0.0], [314.0, 0.0], [312.0, 0.0], [319.0, 0.0], [313.0, 0.0], [323.0, 0.0], [329.0, 0.0], [321.0, 0.0], [334.0, 0.0], [327.0, 0.0], [326.0, 0.0], [320.0, 0.0], [332.0, 0.0], [333.0, 0.0], [322.0, 0.0], [331.0, 0.0], [336.0, 0.0], [347.0, 0.0], [340.0, 0.0], [344.0, 0.0], [337.0, 0.0], [341.0, 0.0], [343.0, 0.0], [339.0, 0.0], [346.0, 0.0], [345.0, 0.0], [348.0, 0.0], [354.0, 0.0], [353.0, 0.0], [364.0, 0.0], [355.0, 0.0], [358.0, 0.0], [359.0, 0.0], [361.0, 0.0], [366.0, 0.0], [360.0, 0.0], [365.0, 0.0], [352.0, 0.0], [363.0, 0.0], [369.0, 0.0], [378.0, 0.0], [375.0, 0.0], [382.0, 0.0], [368.0, 0.0], [373.0, 0.0], [371.0, 0.0], [377.0, 0.0], [379.0, 0.0], [387.0, 0.0], [394.0, 0.0], [398.0, 0.0], [397.0, 0.0], [393.0, 0.0], [388.0, 0.0], [395.0, 0.0], [385.0, 0.0], [389.0, 0.0], [384.0, 0.0], [391.0, 0.0], [390.0, 0.0], [402.0, 0.0], [405.0, 0.0], [401.0, 0.0], [400.0, 0.0], [406.0, 0.0], [407.0, 0.0], [411.0, 0.0], [409.0, 0.0], [403.0, 0.0], [408.0, 0.0], [426.0, 0.0], [420.0, 0.0], [421.0, 0.0], [425.0, 0.0], [422.0, 0.0], [419.0, 0.0], [427.0, 0.0], [424.0, 0.0], [447.0, 0.0], [435.0, 0.0], [432.0, 0.0], [436.0, 0.0], [439.0, 0.0], [452.0, 0.0], [461.0, 0.0], [463.0, 0.0], [457.0, 0.0], [458.0, 0.0], [456.0, 0.0], [460.0, 0.0], [477.0, 0.0], [471.0, 0.0], [474.0, 0.0], [479.0, 0.0], [469.0, 0.0], [464.0, 0.0], [482.0, 0.0], [484.0, 0.0], [493.0, 0.0], [503.0, 0.0], [529.0, 0.0], [542.0, 0.0], [562.0, 0.0], [549.0, 0.0], [599.0, 0.0], [581.0, 0.0], [594.0, 0.0], [626.0, 0.0], [628.0, 0.0], [662.0, 0.0], [646.0, 0.0], [1.0, 2649.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 662.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 21.416666666666668, "minX": 1.6998024E12, "maxY": 353.1, "series": [{"data": [[1.69980282E12, 209.88333333333333], [1.69980312E12, 21.416666666666668], [1.69980252E12, 319.78333333333336], [1.69980306E12, 92.5], [1.6998024E12, 60.53333333333333], [1.69980276E12, 153.3], [1.69980246E12, 255.41666666666666], [1.69980264E12, 353.1], [1.6998027E12, 281.3333333333333], [1.699803E12, 103.61666666666666], [1.69980258E12, 205.11666666666667], [1.69980288E12, 175.5], [1.69980294E12, 146.7]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69980312E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.6998024E12, "maxY": 255.38333333333333, "series": [{"data": [[1.69980282E12, 40.28333333333333], [1.69980264E12, 149.85], [1.69980312E12, 0.06666666666666667], [1.6998027E12, 54.266666666666666], [1.69980252E12, 118.5], [1.69980258E12, 39.31666666666667], [1.6998024E12, 60.53333333333333], [1.69980288E12, 32.916666666666664], [1.69980294E12, 1.2333333333333334], [1.69980276E12, 39.3], [1.69980246E12, 255.38333333333333]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.69980312E12, 3.2666666666666666], [1.699803E12, 16.55], [1.69980306E12, 14.9], [1.69980294E12, 20.083333333333332]], "isOverall": false, "label": "422", "isController": false}, {"data": [[1.69980282E12, 169.6], [1.69980264E12, 206.78333333333333], [1.69980312E12, 24.75], [1.6998027E12, 224.91666666666666], [1.69980252E12, 196.21666666666667], [1.699803E12, 90.11666666666666], [1.69980258E12, 164.23333333333332], [1.69980306E12, 74.55], [1.69980288E12, 142.58333333333334], [1.69980294E12, 125.38333333333334], [1.69980276E12, 112.61666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69980312E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.6998024E12, "maxY": 255.38333333333333, "series": [{"data": [[1.69980282E12, 169.6], [1.69980264E12, 206.78333333333333], [1.69980312E12, 28.016666666666666], [1.6998027E12, 224.91666666666666], [1.69980252E12, 196.21666666666667], [1.699803E12, 106.66666666666667], [1.69980258E12, 164.23333333333332], [1.69980306E12, 89.45], [1.69980288E12, 142.58333333333334], [1.69980294E12, 145.46666666666667], [1.69980276E12, 112.61666666666666]], "isOverall": false, "label": "Create Person Record - LoadTest-failure", "isController": false}, {"data": [[1.69980282E12, 40.28333333333333], [1.69980264E12, 149.85], [1.69980312E12, 0.06666666666666667], [1.6998027E12, 54.266666666666666], [1.69980252E12, 118.5], [1.69980258E12, 39.31666666666667], [1.6998024E12, 60.53333333333333], [1.69980288E12, 32.916666666666664], [1.69980294E12, 1.2333333333333334], [1.69980276E12, 39.3], [1.69980246E12, 255.38333333333333]], "isOverall": false, "label": "Create Person Record - LoadTest-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69980312E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.6998024E12, "maxY": 255.38333333333333, "series": [{"data": [[1.69980282E12, 40.28333333333333], [1.69980264E12, 149.85], [1.69980312E12, 0.06666666666666667], [1.6998027E12, 54.266666666666666], [1.69980252E12, 118.5], [1.69980258E12, 39.31666666666667], [1.6998024E12, 60.53333333333333], [1.69980288E12, 32.916666666666664], [1.69980294E12, 1.2333333333333334], [1.69980276E12, 39.3], [1.69980246E12, 255.38333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69980282E12, 169.6], [1.69980264E12, 206.78333333333333], [1.69980312E12, 28.016666666666666], [1.6998027E12, 224.91666666666666], [1.69980252E12, 196.21666666666667], [1.699803E12, 106.66666666666667], [1.69980258E12, 164.23333333333332], [1.69980306E12, 89.45], [1.69980288E12, 142.58333333333334], [1.69980294E12, 145.46666666666667], [1.69980276E12, 112.61666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69980312E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

