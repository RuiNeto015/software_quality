/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 11.0, "minX": 0.0, "maxY": 38068.0, "series": [{"data": [[0.0, 11.0], [0.1, 14.0], [0.2, 14.0], [0.3, 15.0], [0.4, 15.0], [0.5, 15.0], [0.6, 16.0], [0.7, 16.0], [0.8, 17.0], [0.9, 17.0], [1.0, 18.0], [1.1, 18.0], [1.2, 19.0], [1.3, 20.0], [1.4, 20.0], [1.5, 20.0], [1.6, 21.0], [1.7, 21.0], [1.8, 22.0], [1.9, 22.0], [2.0, 23.0], [2.1, 23.0], [2.2, 24.0], [2.3, 24.0], [2.4, 25.0], [2.5, 26.0], [2.6, 26.0], [2.7, 27.0], [2.8, 28.0], [2.9, 29.0], [3.0, 29.0], [3.1, 30.0], [3.2, 30.0], [3.3, 31.0], [3.4, 32.0], [3.5, 33.0], [3.6, 34.0], [3.7, 34.0], [3.8, 35.0], [3.9, 36.0], [4.0, 37.0], [4.1, 37.0], [4.2, 38.0], [4.3, 39.0], [4.4, 40.0], [4.5, 40.0], [4.6, 41.0], [4.7, 42.0], [4.8, 43.0], [4.9, 44.0], [5.0, 44.0], [5.1, 45.0], [5.2, 46.0], [5.3, 47.0], [5.4, 48.0], [5.5, 49.0], [5.6, 50.0], [5.7, 51.0], [5.8, 52.0], [5.9, 54.0], [6.0, 55.0], [6.1, 58.0], [6.2, 59.0], [6.3, 62.0], [6.4, 64.0], [6.5, 66.0], [6.6, 68.0], [6.7, 70.0], [6.8, 71.0], [6.9, 73.0], [7.0, 76.0], [7.1, 77.0], [7.2, 79.0], [7.3, 82.0], [7.4, 84.0], [7.5, 85.0], [7.6, 87.0], [7.7, 88.0], [7.8, 91.0], [7.9, 93.0], [8.0, 96.0], [8.1, 98.0], [8.2, 102.0], [8.3, 104.0], [8.4, 107.0], [8.5, 109.0], [8.6, 111.0], [8.7, 113.0], [8.8, 115.0], [8.9, 117.0], [9.0, 120.0], [9.1, 122.0], [9.2, 125.0], [9.3, 128.0], [9.4, 132.0], [9.5, 136.0], [9.6, 140.0], [9.7, 143.0], [9.8, 147.0], [9.9, 148.0], [10.0, 153.0], [10.1, 155.0], [10.2, 168.0], [10.3, 194.0], [10.4, 214.0], [10.5, 236.0], [10.6, 262.0], [10.7, 275.0], [10.8, 291.0], [10.9, 303.0], [11.0, 322.0], [11.1, 340.0], [11.2, 356.0], [11.3, 371.0], [11.4, 383.0], [11.5, 397.0], [11.6, 414.0], [11.7, 426.0], [11.8, 447.0], [11.9, 466.0], [12.0, 475.0], [12.1, 491.0], [12.2, 498.0], [12.3, 516.0], [12.4, 532.0], [12.5, 558.0], [12.6, 569.0], [12.7, 587.0], [12.8, 605.0], [12.9, 632.0], [13.0, 653.0], [13.1, 675.0], [13.2, 708.0], [13.3, 745.0], [13.4, 771.0], [13.5, 804.0], [13.6, 839.0], [13.7, 882.0], [13.8, 919.0], [13.9, 951.0], [14.0, 1004.0], [14.1, 1040.0], [14.2, 1069.0], [14.3, 1095.0], [14.4, 1119.0], [14.5, 1150.0], [14.6, 1172.0], [14.7, 1200.0], [14.8, 1224.0], [14.9, 1241.0], [15.0, 1253.0], [15.1, 1264.0], [15.2, 1278.0], [15.3, 1288.0], [15.4, 1302.0], [15.5, 1310.0], [15.6, 1318.0], [15.7, 1328.0], [15.8, 1343.0], [15.9, 1355.0], [16.0, 1364.0], [16.1, 1375.0], [16.2, 1387.0], [16.3, 1400.0], [16.4, 1409.0], [16.5, 1422.0], [16.6, 1430.0], [16.7, 1440.0], [16.8, 1452.0], [16.9, 1460.0], [17.0, 1469.0], [17.1, 1479.0], [17.2, 1492.0], [17.3, 1503.0], [17.4, 1512.0], [17.5, 1521.0], [17.6, 1530.0], [17.7, 1540.0], [17.8, 1545.0], [17.9, 1558.0], [18.0, 1569.0], [18.1, 1580.0], [18.2, 1591.0], [18.3, 1604.0], [18.4, 1612.0], [18.5, 1620.0], [18.6, 1628.0], [18.7, 1637.0], [18.8, 1646.0], [18.9, 1659.0], [19.0, 1667.0], [19.1, 1676.0], [19.2, 1685.0], [19.3, 1701.0], [19.4, 1712.0], [19.5, 1723.0], [19.6, 1736.0], [19.7, 1746.0], [19.8, 1759.0], [19.9, 1772.0], [20.0, 1782.0], [20.1, 1796.0], [20.2, 1807.0], [20.3, 1821.0], [20.4, 1837.0], [20.5, 1849.0], [20.6, 1861.0], [20.7, 1874.0], [20.8, 1886.0], [20.9, 1897.0], [21.0, 1908.0], [21.1, 1915.0], [21.2, 1923.0], [21.3, 1939.0], [21.4, 1953.0], [21.5, 1964.0], [21.6, 1978.0], [21.7, 1990.0], [21.8, 2011.0], [21.9, 2030.0], [22.0, 2050.0], [22.1, 2057.0], [22.2, 2075.0], [22.3, 2093.0], [22.4, 2116.0], [22.5, 2133.0], [22.6, 2151.0], [22.7, 2170.0], [22.8, 2179.0], [22.9, 2192.0], [23.0, 2202.0], [23.1, 2213.0], [23.2, 2229.0], [23.3, 2245.0], [23.4, 2261.0], [23.5, 2283.0], [23.6, 2300.0], [23.7, 2315.0], [23.8, 2324.0], [23.9, 2335.0], [24.0, 2348.0], [24.1, 2363.0], [24.2, 2379.0], [24.3, 2394.0], [24.4, 2419.0], [24.5, 2439.0], [24.6, 2456.0], [24.7, 2467.0], [24.8, 2476.0], [24.9, 2487.0], [25.0, 2501.0], [25.1, 2513.0], [25.2, 2524.0], [25.3, 2534.0], [25.4, 2546.0], [25.5, 2562.0], [25.6, 2579.0], [25.7, 2601.0], [25.8, 2626.0], [25.9, 2644.0], [26.0, 2666.0], [26.1, 2691.0], [26.2, 2710.0], [26.3, 2737.0], [26.4, 2753.0], [26.5, 2775.0], [26.6, 2791.0], [26.7, 2804.0], [26.8, 2824.0], [26.9, 2844.0], [27.0, 2866.0], [27.1, 2888.0], [27.2, 2913.0], [27.3, 2929.0], [27.4, 2944.0], [27.5, 2957.0], [27.6, 2976.0], [27.7, 2990.0], [27.8, 3000.0], [27.9, 3013.0], [28.0, 3020.0], [28.1, 3034.0], [28.2, 3039.0], [28.3, 3052.0], [28.4, 3062.0], [28.5, 3072.0], [28.6, 3085.0], [28.7, 3105.0], [28.8, 3134.0], [28.9, 3144.0], [29.0, 3162.0], [29.1, 3183.0], [29.2, 3208.0], [29.3, 3231.0], [29.4, 3254.0], [29.5, 3274.0], [29.6, 3305.0], [29.7, 3329.0], [29.8, 3359.0], [29.9, 3393.0], [30.0, 3413.0], [30.1, 3450.0], [30.2, 3510.0], [30.3, 3529.0], [30.4, 3559.0], [30.5, 3585.0], [30.6, 3601.0], [30.7, 3616.0], [30.8, 3631.0], [30.9, 3649.0], [31.0, 3669.0], [31.1, 3689.0], [31.2, 3719.0], [31.3, 3736.0], [31.4, 3755.0], [31.5, 3774.0], [31.6, 3790.0], [31.7, 3803.0], [31.8, 3819.0], [31.9, 3828.0], [32.0, 3838.0], [32.1, 3855.0], [32.2, 3873.0], [32.3, 3887.0], [32.4, 3902.0], [32.5, 3930.0], [32.6, 3942.0], [32.7, 3960.0], [32.8, 3979.0], [32.9, 3992.0], [33.0, 4021.0], [33.1, 4040.0], [33.2, 4061.0], [33.3, 4114.0], [33.4, 4133.0], [33.5, 4154.0], [33.6, 4167.0], [33.7, 4198.0], [33.8, 4221.0], [33.9, 4247.0], [34.0, 4281.0], [34.1, 4305.0], [34.2, 4331.0], [34.3, 4368.0], [34.4, 4394.0], [34.5, 4420.0], [34.6, 4440.0], [34.7, 4464.0], [34.8, 4484.0], [34.9, 4513.0], [35.0, 4551.0], [35.1, 4585.0], [35.2, 4617.0], [35.3, 4669.0], [35.4, 4711.0], [35.5, 4746.0], [35.6, 4797.0], [35.7, 4899.0], [35.8, 5015.0], [35.9, 5128.0], [36.0, 5264.0], [36.1, 5361.0], [36.2, 5438.0], [36.3, 5498.0], [36.4, 5530.0], [36.5, 5558.0], [36.6, 5582.0], [36.7, 5602.0], [36.8, 5620.0], [36.9, 5643.0], [37.0, 5666.0], [37.1, 5686.0], [37.2, 5701.0], [37.3, 5723.0], [37.4, 5739.0], [37.5, 5752.0], [37.6, 5766.0], [37.7, 5789.0], [37.8, 5801.0], [37.9, 5821.0], [38.0, 5835.0], [38.1, 5853.0], [38.2, 5869.0], [38.3, 5886.0], [38.4, 5897.0], [38.5, 5920.0], [38.6, 5935.0], [38.7, 5950.0], [38.8, 5963.0], [38.9, 5971.0], [39.0, 5987.0], [39.1, 6008.0], [39.2, 6025.0], [39.3, 6050.0], [39.4, 6070.0], [39.5, 6104.0], [39.6, 6146.0], [39.7, 6176.0], [39.8, 6206.0], [39.9, 6226.0], [40.0, 6284.0], [40.1, 6313.0], [40.2, 6364.0], [40.3, 6416.0], [40.4, 6458.0], [40.5, 6491.0], [40.6, 6510.0], [40.7, 6539.0], [40.8, 6565.0], [40.9, 6587.0], [41.0, 6618.0], [41.1, 6643.0], [41.2, 6680.0], [41.3, 6710.0], [41.4, 6725.0], [41.5, 6751.0], [41.6, 6768.0], [41.7, 6785.0], [41.8, 6799.0], [41.9, 6817.0], [42.0, 6837.0], [42.1, 6860.0], [42.2, 6874.0], [42.3, 6890.0], [42.4, 6920.0], [42.5, 6956.0], [42.6, 6987.0], [42.7, 7018.0], [42.8, 7052.0], [42.9, 7079.0], [43.0, 7105.0], [43.1, 7139.0], [43.2, 7167.0], [43.3, 7185.0], [43.4, 7211.0], [43.5, 7234.0], [43.6, 7270.0], [43.7, 7304.0], [43.8, 7337.0], [43.9, 7366.0], [44.0, 7394.0], [44.1, 7429.0], [44.2, 7446.0], [44.3, 7466.0], [44.4, 7498.0], [44.5, 7516.0], [44.6, 7552.0], [44.7, 7585.0], [44.8, 7604.0], [44.9, 7629.0], [45.0, 7651.0], [45.1, 7673.0], [45.2, 7693.0], [45.3, 7716.0], [45.4, 7740.0], [45.5, 7762.0], [45.6, 7781.0], [45.7, 7800.0], [45.8, 7835.0], [45.9, 7864.0], [46.0, 7880.0], [46.1, 7904.0], [46.2, 7922.0], [46.3, 7948.0], [46.4, 7969.0], [46.5, 7992.0], [46.6, 8019.0], [46.7, 8055.0], [46.8, 8113.0], [46.9, 8133.0], [47.0, 8184.0], [47.1, 8203.0], [47.2, 8256.0], [47.3, 8312.0], [47.4, 8373.0], [47.5, 8430.0], [47.6, 8508.0], [47.7, 8613.0], [47.8, 8664.0], [47.9, 8700.0], [48.0, 8748.0], [48.1, 8802.0], [48.2, 8833.0], [48.3, 8867.0], [48.4, 8895.0], [48.5, 8926.0], [48.6, 8948.0], [48.7, 8985.0], [48.8, 9010.0], [48.9, 9031.0], [49.0, 9071.0], [49.1, 9093.0], [49.2, 9134.0], [49.3, 9156.0], [49.4, 9183.0], [49.5, 9221.0], [49.6, 9247.0], [49.7, 9276.0], [49.8, 9299.0], [49.9, 9321.0], [50.0, 9343.0], [50.1, 9356.0], [50.2, 9377.0], [50.3, 9408.0], [50.4, 9437.0], [50.5, 9465.0], [50.6, 9493.0], [50.7, 9518.0], [50.8, 9531.0], [50.9, 9558.0], [51.0, 9582.0], [51.1, 9606.0], [51.2, 9629.0], [51.3, 9647.0], [51.4, 9664.0], [51.5, 9680.0], [51.6, 9698.0], [51.7, 9713.0], [51.8, 9727.0], [51.9, 9744.0], [52.0, 9757.0], [52.1, 9776.0], [52.2, 9786.0], [52.3, 9801.0], [52.4, 9820.0], [52.5, 9837.0], [52.6, 9861.0], [52.7, 9876.0], [52.8, 9903.0], [52.9, 9921.0], [53.0, 9948.0], [53.1, 9973.0], [53.2, 9996.0], [53.3, 10015.0], [53.4, 10039.0], [53.5, 10057.0], [53.6, 10072.0], [53.7, 10086.0], [53.8, 10098.0], [53.9, 10120.0], [54.0, 10141.0], [54.1, 10159.0], [54.2, 10191.0], [54.3, 10212.0], [54.4, 10227.0], [54.5, 10249.0], [54.6, 10272.0], [54.7, 10288.0], [54.8, 10308.0], [54.9, 10324.0], [55.0, 10345.0], [55.1, 10369.0], [55.2, 10379.0], [55.3, 10399.0], [55.4, 10430.0], [55.5, 10445.0], [55.6, 10470.0], [55.7, 10518.0], [55.8, 10549.0], [55.9, 10573.0], [56.0, 10607.0], [56.1, 10631.0], [56.2, 10665.0], [56.3, 10701.0], [56.4, 10734.0], [56.5, 10775.0], [56.6, 10803.0], [56.7, 10868.0], [56.8, 10961.0], [56.9, 11009.0], [57.0, 11074.0], [57.1, 11133.0], [57.2, 11167.0], [57.3, 11218.0], [57.4, 11244.0], [57.5, 11285.0], [57.6, 11322.0], [57.7, 11343.0], [57.8, 11369.0], [57.9, 11393.0], [58.0, 11422.0], [58.1, 11442.0], [58.2, 11463.0], [58.3, 11496.0], [58.4, 11519.0], [58.5, 11535.0], [58.6, 11562.0], [58.7, 11589.0], [58.8, 11608.0], [58.9, 11629.0], [59.0, 11661.0], [59.1, 11688.0], [59.2, 11715.0], [59.3, 11741.0], [59.4, 11761.0], [59.5, 11798.0], [59.6, 11814.0], [59.7, 11828.0], [59.8, 11856.0], [59.9, 11874.0], [60.0, 11898.0], [60.1, 11925.0], [60.2, 11957.0], [60.3, 11981.0], [60.4, 12003.0], [60.5, 12032.0], [60.6, 12080.0], [60.7, 12104.0], [60.8, 12142.0], [60.9, 12166.0], [61.0, 12187.0], [61.1, 12218.0], [61.2, 12257.0], [61.3, 12288.0], [61.4, 12320.0], [61.5, 12350.0], [61.6, 12372.0], [61.7, 12398.0], [61.8, 12433.0], [61.9, 12460.0], [62.0, 12476.0], [62.1, 12493.0], [62.2, 12510.0], [62.3, 12537.0], [62.4, 12562.0], [62.5, 12575.0], [62.6, 12596.0], [62.7, 12614.0], [62.8, 12628.0], [62.9, 12644.0], [63.0, 12660.0], [63.1, 12676.0], [63.2, 12691.0], [63.3, 12706.0], [63.4, 12725.0], [63.5, 12752.0], [63.6, 12764.0], [63.7, 12778.0], [63.8, 12791.0], [63.9, 12809.0], [64.0, 12818.0], [64.1, 12830.0], [64.2, 12845.0], [64.3, 12867.0], [64.4, 12885.0], [64.5, 12905.0], [64.6, 12922.0], [64.7, 12941.0], [64.8, 12958.0], [64.9, 12981.0], [65.0, 12997.0], [65.1, 13016.0], [65.2, 13032.0], [65.3, 13050.0], [65.4, 13066.0], [65.5, 13083.0], [65.6, 13104.0], [65.7, 13136.0], [65.8, 13164.0], [65.9, 13190.0], [66.0, 13233.0], [66.1, 13288.0], [66.2, 13327.0], [66.3, 13360.0], [66.4, 13398.0], [66.5, 13458.0], [66.6, 13487.0], [66.7, 13528.0], [66.8, 13571.0], [66.9, 13601.0], [67.0, 13624.0], [67.1, 13647.0], [67.2, 13671.0], [67.3, 13695.0], [67.4, 13723.0], [67.5, 13748.0], [67.6, 13773.0], [67.7, 13805.0], [67.8, 13826.0], [67.9, 13850.0], [68.0, 13865.0], [68.1, 13879.0], [68.2, 13902.0], [68.3, 13930.0], [68.4, 13945.0], [68.5, 13963.0], [68.6, 13980.0], [68.7, 13993.0], [68.8, 14010.0], [68.9, 14026.0], [69.0, 14040.0], [69.1, 14063.0], [69.2, 14078.0], [69.3, 14094.0], [69.4, 14118.0], [69.5, 14138.0], [69.6, 14157.0], [69.7, 14168.0], [69.8, 14186.0], [69.9, 14211.0], [70.0, 14230.0], [70.1, 14251.0], [70.2, 14273.0], [70.3, 14291.0], [70.4, 14320.0], [70.5, 14337.0], [70.6, 14362.0], [70.7, 14386.0], [70.8, 14407.0], [70.9, 14428.0], [71.0, 14446.0], [71.1, 14462.0], [71.2, 14485.0], [71.3, 14496.0], [71.4, 14511.0], [71.5, 14525.0], [71.6, 14546.0], [71.7, 14556.0], [71.8, 14566.0], [71.9, 14587.0], [72.0, 14599.0], [72.1, 14614.0], [72.2, 14629.0], [72.3, 14648.0], [72.4, 14663.0], [72.5, 14678.0], [72.6, 14687.0], [72.7, 14703.0], [72.8, 14715.0], [72.9, 14725.0], [73.0, 14743.0], [73.1, 14755.0], [73.2, 14769.0], [73.3, 14779.0], [73.4, 14791.0], [73.5, 14804.0], [73.6, 14814.0], [73.7, 14829.0], [73.8, 14847.0], [73.9, 14863.0], [74.0, 14874.0], [74.1, 14892.0], [74.2, 14906.0], [74.3, 14912.0], [74.4, 14924.0], [74.5, 14933.0], [74.6, 14947.0], [74.7, 14966.0], [74.8, 14987.0], [74.9, 15001.0], [75.0, 15015.0], [75.1, 15029.0], [75.2, 15042.0], [75.3, 15059.0], [75.4, 15082.0], [75.5, 15093.0], [75.6, 15103.0], [75.7, 15122.0], [75.8, 15134.0], [75.9, 15155.0], [76.0, 15175.0], [76.1, 15195.0], [76.2, 15214.0], [76.3, 15229.0], [76.4, 15246.0], [76.5, 15259.0], [76.6, 15276.0], [76.7, 15289.0], [76.8, 15303.0], [76.9, 15319.0], [77.0, 15340.0], [77.1, 15353.0], [77.2, 15377.0], [77.3, 15395.0], [77.4, 15415.0], [77.5, 15434.0], [77.6, 15445.0], [77.7, 15455.0], [77.8, 15476.0], [77.9, 15495.0], [78.0, 15514.0], [78.1, 15524.0], [78.2, 15542.0], [78.3, 15562.0], [78.4, 15589.0], [78.5, 15603.0], [78.6, 15624.0], [78.7, 15637.0], [78.8, 15650.0], [78.9, 15665.0], [79.0, 15681.0], [79.1, 15692.0], [79.2, 15709.0], [79.3, 15724.0], [79.4, 15734.0], [79.5, 15748.0], [79.6, 15760.0], [79.7, 15772.0], [79.8, 15782.0], [79.9, 15790.0], [80.0, 15801.0], [80.1, 15811.0], [80.2, 15820.0], [80.3, 15828.0], [80.4, 15842.0], [80.5, 15853.0], [80.6, 15860.0], [80.7, 15873.0], [80.8, 15884.0], [80.9, 15897.0], [81.0, 15904.0], [81.1, 15918.0], [81.2, 15930.0], [81.3, 15939.0], [81.4, 15948.0], [81.5, 15961.0], [81.6, 15974.0], [81.7, 15988.0], [81.8, 15997.0], [81.9, 16008.0], [82.0, 16020.0], [82.1, 16031.0], [82.2, 16045.0], [82.3, 16054.0], [82.4, 16063.0], [82.5, 16075.0], [82.6, 16082.0], [82.7, 16096.0], [82.8, 16105.0], [82.9, 16112.0], [83.0, 16121.0], [83.1, 16134.0], [83.2, 16143.0], [83.3, 16153.0], [83.4, 16161.0], [83.5, 16170.0], [83.6, 16183.0], [83.7, 16189.0], [83.8, 16197.0], [83.9, 16204.0], [84.0, 16211.0], [84.1, 16219.0], [84.2, 16229.0], [84.3, 16239.0], [84.4, 16246.0], [84.5, 16255.0], [84.6, 16264.0], [84.7, 16271.0], [84.8, 16281.0], [84.9, 16290.0], [85.0, 16301.0], [85.1, 16305.0], [85.2, 16313.0], [85.3, 16322.0], [85.4, 16342.0], [85.5, 16351.0], [85.6, 16360.0], [85.7, 16379.0], [85.8, 16390.0], [85.9, 16400.0], [86.0, 16412.0], [86.1, 16429.0], [86.2, 16440.0], [86.3, 16451.0], [86.4, 16464.0], [86.5, 16475.0], [86.6, 16487.0], [86.7, 16497.0], [86.8, 16514.0], [86.9, 16524.0], [87.0, 16532.0], [87.1, 16549.0], [87.2, 16558.0], [87.3, 16569.0], [87.4, 16584.0], [87.5, 16592.0], [87.6, 16608.0], [87.7, 16624.0], [87.8, 16640.0], [87.9, 16659.0], [88.0, 16675.0], [88.1, 16686.0], [88.2, 16714.0], [88.3, 16740.0], [88.4, 16763.0], [88.5, 16785.0], [88.6, 16804.0], [88.7, 16830.0], [88.8, 16853.0], [88.9, 16874.0], [89.0, 16898.0], [89.1, 16923.0], [89.2, 16943.0], [89.3, 16965.0], [89.4, 16987.0], [89.5, 17009.0], [89.6, 17030.0], [89.7, 17062.0], [89.8, 17090.0], [89.9, 17131.0], [90.0, 17173.0], [90.1, 17203.0], [90.2, 17256.0], [90.3, 17296.0], [90.4, 17334.0], [90.5, 17368.0], [90.6, 17403.0], [90.7, 17444.0], [90.8, 17473.0], [90.9, 17506.0], [91.0, 17547.0], [91.1, 17596.0], [91.2, 17626.0], [91.3, 17675.0], [91.4, 17708.0], [91.5, 17740.0], [91.6, 17770.0], [91.7, 17837.0], [91.8, 17887.0], [91.9, 17939.0], [92.0, 17994.0], [92.1, 18055.0], [92.2, 18115.0], [92.3, 18169.0], [92.4, 18226.0], [92.5, 18289.0], [92.6, 18353.0], [92.7, 18392.0], [92.8, 18449.0], [92.9, 18505.0], [93.0, 18555.0], [93.1, 18616.0], [93.2, 18652.0], [93.3, 18704.0], [93.4, 18749.0], [93.5, 18774.0], [93.6, 18815.0], [93.7, 18859.0], [93.8, 18896.0], [93.9, 18938.0], [94.0, 18994.0], [94.1, 19041.0], [94.2, 19092.0], [94.3, 19140.0], [94.4, 19183.0], [94.5, 19232.0], [94.6, 19358.0], [94.7, 19510.0], [94.8, 19633.0], [94.9, 19733.0], [95.0, 19890.0], [95.1, 20026.0], [95.2, 20167.0], [95.3, 20365.0], [95.4, 20530.0], [95.5, 20726.0], [95.6, 20875.0], [95.7, 20958.0], [95.8, 21032.0], [95.9, 21099.0], [96.0, 21146.0], [96.1, 21170.0], [96.2, 21212.0], [96.3, 21250.0], [96.4, 21318.0], [96.5, 21379.0], [96.6, 21426.0], [96.7, 21475.0], [96.8, 21509.0], [96.9, 21538.0], [97.0, 21560.0], [97.1, 21612.0], [97.2, 21671.0], [97.3, 21847.0], [97.4, 22080.0], [97.5, 22309.0], [97.6, 22552.0], [97.7, 22740.0], [97.8, 22894.0], [97.9, 22971.0], [98.0, 23027.0], [98.1, 23088.0], [98.2, 23157.0], [98.3, 23243.0], [98.4, 23334.0], [98.5, 23393.0], [98.6, 23463.0], [98.7, 23578.0], [98.8, 23859.0], [98.9, 24635.0], [99.0, 25159.0], [99.1, 25886.0], [99.2, 27005.0], [99.3, 28506.0], [99.4, 29418.0], [99.5, 29917.0], [99.6, 30061.0], [99.7, 31012.0], [99.8, 32795.0], [99.9, 34585.0], [100.0, 38068.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1436.0, "series": [{"data": [[0.0, 1436.0], [100.0, 390.0], [33700.0, 1.0], [34500.0, 1.0], [33300.0, 1.0], [32900.0, 1.0], [34100.0, 1.0], [36100.0, 2.0], [34900.0, 1.0], [37300.0, 1.0], [37700.0, 1.0], [200.0, 89.0], [300.0, 119.0], [400.0, 122.0], [500.0, 96.0], [600.0, 75.0], [700.0, 55.0], [800.0, 47.0], [900.0, 41.0], [1000.0, 57.0], [1100.0, 68.0], [1200.0, 123.0], [1300.0, 157.0], [1400.0, 174.0], [1500.0, 178.0], [1600.0, 178.0], [1700.0, 153.0], [1800.0, 135.0], [1900.0, 149.0], [2000.0, 102.0], [2100.0, 112.0], [2200.0, 110.0], [2300.0, 126.0], [2400.0, 121.0], [2500.0, 123.0], [2600.0, 78.0], [2700.0, 94.0], [2800.0, 87.0], [2900.0, 111.0], [3000.0, 156.0], [3100.0, 86.0], [3200.0, 75.0], [3300.0, 60.0], [3400.0, 46.0], [3500.0, 71.0], [3600.0, 99.0], [3700.0, 90.0], [3800.0, 128.0], [3900.0, 95.0], [4000.0, 62.0], [4200.0, 61.0], [4100.0, 80.0], [4300.0, 61.0], [4500.0, 51.0], [4400.0, 80.0], [4600.0, 41.0], [4800.0, 18.0], [4700.0, 38.0], [4900.0, 14.0], [5100.0, 14.0], [5000.0, 17.0], [5300.0, 17.0], [5200.0, 17.0], [5600.0, 92.0], [5400.0, 28.0], [5500.0, 64.0], [5700.0, 104.0], [5800.0, 110.0], [5900.0, 115.0], [6000.0, 76.0], [6100.0, 52.0], [6300.0, 31.0], [6200.0, 52.0], [6400.0, 52.0], [6500.0, 69.0], [6600.0, 57.0], [6800.0, 92.0], [6700.0, 96.0], [6900.0, 55.0], [7100.0, 64.0], [7000.0, 62.0], [7200.0, 58.0], [7400.0, 69.0], [7300.0, 60.0], [7600.0, 76.0], [7500.0, 68.0], [7900.0, 79.0], [7700.0, 82.0], [7800.0, 70.0], [8100.0, 54.0], [8000.0, 40.0], [8200.0, 38.0], [8600.0, 41.0], [8700.0, 34.0], [8300.0, 25.0], [8400.0, 30.0], [8500.0, 13.0], [8800.0, 58.0], [8900.0, 61.0], [9000.0, 62.0], [9100.0, 60.0], [9200.0, 63.0], [9300.0, 82.0], [9400.0, 64.0], [9500.0, 79.0], [9600.0, 97.0], [9700.0, 115.0], [10200.0, 92.0], [9800.0, 87.0], [9900.0, 75.0], [10000.0, 107.0], [10100.0, 74.0], [10500.0, 52.0], [10400.0, 63.0], [10600.0, 59.0], [10700.0, 55.0], [10300.0, 97.0], [11000.0, 29.0], [11100.0, 37.0], [10900.0, 25.0], [10800.0, 23.0], [11200.0, 52.0], [11500.0, 77.0], [11400.0, 75.0], [11300.0, 64.0], [11600.0, 70.0], [11700.0, 64.0], [12000.0, 53.0], [11900.0, 64.0], [11800.0, 88.0], [12200.0, 53.0], [12100.0, 63.0], [12400.0, 79.0], [12700.0, 99.0], [12300.0, 64.0], [12500.0, 82.0], [12600.0, 115.0], [12800.0, 115.0], [13300.0, 49.0], [13100.0, 59.0], [12900.0, 96.0], [13000.0, 100.0], [13200.0, 37.0], [13500.0, 49.0], [13400.0, 37.0], [13600.0, 77.0], [13800.0, 89.0], [13700.0, 63.0], [13900.0, 98.0], [14000.0, 101.0], [14200.0, 85.0], [14300.0, 74.0], [14100.0, 94.0], [14800.0, 124.0], [14600.0, 118.0], [14700.0, 142.0], [14400.0, 103.0], [14500.0, 118.0], [14900.0, 126.0], [15000.0, 121.0], [15300.0, 98.0], [15100.0, 93.0], [15200.0, 117.0], [15600.0, 115.0], [15400.0, 109.0], [15500.0, 95.0], [15700.0, 152.0], [15800.0, 164.0], [16300.0, 161.0], [15900.0, 160.0], [16000.0, 164.0], [16100.0, 187.0], [16200.0, 206.0], [16600.0, 110.0], [16800.0, 81.0], [17400.0, 53.0], [16400.0, 144.0], [17000.0, 66.0], [17200.0, 39.0], [17600.0, 45.0], [18000.0, 29.0], [18200.0, 30.0], [18400.0, 30.0], [17800.0, 34.0], [18600.0, 39.0], [18800.0, 44.0], [19000.0, 38.0], [19200.0, 20.0], [19400.0, 10.0], [20200.0, 8.0], [19600.0, 19.0], [19800.0, 9.0], [20000.0, 14.0], [20400.0, 9.0], [20600.0, 6.0], [20800.0, 18.0], [21000.0, 27.0], [21200.0, 35.0], [21400.0, 36.0], [21600.0, 26.0], [22200.0, 3.0], [22400.0, 9.0], [22000.0, 6.0], [21800.0, 9.0], [23400.0, 22.0], [22800.0, 14.0], [23000.0, 29.0], [22600.0, 7.0], [23200.0, 17.0], [24200.0, 2.0], [24400.0, 4.0], [23600.0, 12.0], [23800.0, 2.0], [24800.0, 2.0], [25400.0, 3.0], [25000.0, 2.0], [24600.0, 5.0], [25800.0, 3.0], [26200.0, 2.0], [26600.0, 2.0], [25600.0, 1.0], [26000.0, 1.0], [27000.0, 3.0], [26800.0, 2.0], [27600.0, 2.0], [27200.0, 2.0], [27400.0, 2.0], [27800.0, 2.0], [28600.0, 2.0], [29400.0, 6.0], [29600.0, 3.0], [29000.0, 3.0], [29200.0, 4.0], [28800.0, 1.0], [30000.0, 18.0], [30400.0, 3.0], [30200.0, 3.0], [29800.0, 3.0], [30800.0, 2.0], [31000.0, 4.0], [32200.0, 3.0], [32400.0, 1.0], [34000.0, 3.0], [33200.0, 3.0], [34400.0, 1.0], [35200.0, 1.0], [38000.0, 2.0], [33900.0, 2.0], [34700.0, 1.0], [33100.0, 1.0], [35100.0, 1.0], [36700.0, 1.0], [37500.0, 1.0], [17300.0, 50.0], [16500.0, 147.0], [16700.0, 67.0], [16900.0, 80.0], [17100.0, 46.0], [17700.0, 50.0], [18300.0, 36.0], [17500.0, 38.0], [17900.0, 31.0], [18100.0, 29.0], [18500.0, 32.0], [18700.0, 48.0], [18900.0, 35.0], [19100.0, 39.0], [19300.0, 12.0], [19500.0, 15.0], [19700.0, 15.0], [19900.0, 10.0], [20300.0, 12.0], [20100.0, 12.0], [20700.0, 5.0], [20500.0, 15.0], [20900.0, 22.0], [21300.0, 32.0], [21500.0, 56.0], [21100.0, 48.0], [21900.0, 8.0], [22500.0, 7.0], [22100.0, 13.0], [22300.0, 7.0], [21700.0, 9.0], [22700.0, 10.0], [22900.0, 28.0], [23300.0, 29.0], [23500.0, 15.0], [23100.0, 23.0], [24300.0, 5.0], [23900.0, 3.0], [24500.0, 1.0], [25100.0, 7.0], [25300.0, 3.0], [25500.0, 3.0], [24900.0, 5.0], [24700.0, 3.0], [26500.0, 1.0], [25900.0, 4.0], [26100.0, 2.0], [25700.0, 1.0], [26700.0, 2.0], [27100.0, 1.0], [27500.0, 3.0], [28500.0, 3.0], [27700.0, 2.0], [27900.0, 1.0], [29500.0, 4.0], [28700.0, 2.0], [29100.0, 1.0], [28900.0, 1.0], [30500.0, 4.0], [30100.0, 2.0], [30700.0, 1.0], [29900.0, 3.0], [29700.0, 2.0], [31100.0, 2.0], [31500.0, 1.0], [31300.0, 3.0], [32300.0, 1.0], [32500.0, 1.0], [32700.0, 2.0], [33000.0, 2.0], [33400.0, 1.0], [35400.0, 2.0], [36200.0, 2.0], [37000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 38000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 30.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 14577.0, "series": [{"data": [[0.0, 2158.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 891.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 14577.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 30.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 10.055944055944053, "minX": 1.6997976E12, "maxY": 237.6104513064133, "series": [{"data": [[1.69979844E12, 200.0], [1.69979814E12, 234.43432203389872], [1.69979808E12, 221.72435233160624], [1.69979778E12, 113.40602836879442], [1.6997982E12, 222.93928128872366], [1.6997979E12, 191.8377125193197], [1.6997985E12, 169.2550231839259], [1.69979784E12, 154.94221282593335], [1.69979796E12, 220.4930313588849], [1.69979766E12, 38.57436154231348], [1.6997976E12, 10.055944055944053], [1.69979826E12, 237.6104513064133], [1.69979838E12, 232.99870967741913], [1.69979772E12, 73.64857990674014], [1.69979832E12, 221.17955112219454], [1.69979802E12, 229.5107176141658]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group (scneario 3 - spike)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6997985E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 34.05714285714286, "minX": 1.0, "maxY": 19001.21212121212, "series": [{"data": [[2.0, 8342.5], [3.0, 3375.8], [4.0, 4197.75], [5.0, 1879.111111111111], [6.0, 2074.125], [7.0, 1674.7], [8.0, 1548.5454545454545], [9.0, 1394.4999999999998], [10.0, 903.4210526315788], [11.0, 1222.7857142857142], [12.0, 916.1052631578947], [13.0, 1011.5294117647059], [14.0, 802.6666666666666], [15.0, 809.2380952380952], [16.0, 793.2272727272727], [17.0, 631.4814814814814], [18.0, 625.3214285714286], [19.0, 608.448275862069], [20.0, 637.8888888888889], [21.0, 673.2692307692307], [22.0, 505.62857142857143], [23.0, 527.4242424242424], [24.0, 34.05714285714286], [25.0, 1034.6666666666667], [26.0, 441.5581395348837], [27.0, 441.2142857142857], [28.0, 435.5238095238095], [29.0, 453.7619047619048], [30.0, 403.5333333333333], [31.0, 393.54347826086956], [32.0, 399.70212765957444], [33.0, 396.44897959183675], [34.0, 361.77358490566036], [35.0, 409.16666666666663], [36.0, 356.12500000000006], [37.0, 348.9107142857143], [38.0, 368.07272727272726], [39.0, 358.5], [40.0, 345.2666666666666], [41.0, 399.6], [42.0, 402.6575342465753], [43.0, 387.1864406779662], [44.0, 331.81159420289856], [45.0, 346.703125], [46.0, 348.2388059701492], [47.0, 322.5342465753425], [48.0, 346.3623188405797], [49.0, 320.9718309859155], [50.0, 390.4477611940298], [51.0, 527.9733333333334], [52.0, 653.8695652173913], [53.0, 686.5131578947369], [54.0, 834.8450704225353], [55.0, 952.8266666666666], [56.0, 1206.6811594202895], [57.0, 1398.8630136986308], [58.0, 1410.0434782608695], [59.0, 1543.1690140845074], [60.0, 1519.061538461539], [61.0, 1559.0149253731342], [62.0, 1698.285714285715], [63.0, 1446.1044776119404], [64.0, 1462.4603174603174], [65.0, 2163.5142857142864], [66.0, 1725.1249999999998], [67.0, 1766.9687500000002], [68.0, 1803.3593750000007], [69.0, 1879.5714285714275], [70.0, 1911.2380952380947], [71.0, 2000.9516129032256], [72.0, 1947.6825396825393], [73.0, 2010.7719298245615], [74.0, 2156.4032258064512], [75.0, 2087.2711864406783], [76.0, 2057.84126984127], [77.0, 2248.396551724138], [78.0, 2208.5084745762715], [79.0, 2299.844827586207], [80.0, 2351.660714285714], [81.0, 2345.847457627119], [82.0, 2431.653846153846], [83.0, 2588.357142857144], [84.0, 2572.8490566037735], [85.0, 2580.4181818181823], [86.0, 2655.145454545455], [87.0, 2691.245283018867], [88.0, 2696.818181818182], [89.0, 2723.2037037037035], [90.0, 2793.2830188679245], [91.0, 2483.384615384615], [92.0, 3163.235294117647], [93.0, 3124.34693877551], [94.0, 3164.25], [95.0, 3245.360000000001], [96.0, 3147.8979591836733], [97.0, 3163.16], [98.0, 3285.9607843137246], [99.0, 3139.509803921568], [100.0, 3257.7399999999993], [101.0, 3347.541666666667], [102.0, 3450.729166666666], [103.0, 3515.632653061225], [104.0, 3484.042553191489], [105.0, 3345.78], [106.0, 3632.488888888889], [107.0, 3733.9555555555553], [108.0, 3914.3409090909095], [109.0, 4172.13953488372], [110.0, 3951.95652173913], [111.0, 3864.065217391305], [112.0, 4069.7333333333345], [113.0, 4119.444444444444], [114.0, 3757.3777777777773], [115.0, 4389.533333333333], [116.0, 4155.066666666666], [117.0, 4211.906976744187], [118.0, 4197.454545454546], [119.0, 4428.906976744186], [120.0, 3876.711111111111], [121.0, 4795.227272727272], [122.0, 4604.613636363637], [123.0, 4805.6500000000015], [124.0, 4569.047619047619], [125.0, 4708.690476190473], [126.0, 4641.0250000000015], [127.0, 4724.454545454545], [128.0, 4916.785714285714], [129.0, 4806.5526315789475], [130.0, 5023.189189189189], [131.0, 5501.062499999997], [132.0, 6419.709677419355], [133.0, 6666.172413793104], [134.0, 7176.185185185183], [135.0, 7183.9629629629635], [136.0, 7887.5], [137.0, 8010.41935483871], [138.0, 7745.918918918919], [139.0, 7181.942857142858], [140.0, 6179.189189189188], [141.0, 6196.567567567567], [142.0, 6404.763157894738], [143.0, 6351.4358974358975], [144.0, 5607.574999999999], [145.0, 5916.0526315789475], [146.0, 5980.512820512821], [147.0, 5974.499999999999], [148.0, 6045.199999999999], [149.0, 5793.315789473685], [150.0, 6135.842105263158], [151.0, 5987.1500000000015], [152.0, 6296.128205128207], [153.0, 6559.216216216217], [154.0, 6602.131578947367], [155.0, 6295.657894736841], [156.0, 6239.052631578948], [157.0, 6281.972222222222], [158.0, 6895.594594594596], [159.0, 6771.970588235294], [160.0, 6996.526315789475], [161.0, 6966.081081081081], [162.0, 6655.6486486486465], [163.0, 6605.861111111111], [164.0, 7103.28205128205], [165.0, 7201.9705882352955], [166.0, 7180.763157894737], [167.0, 7520.942857142858], [168.0, 7196.083333333333], [169.0, 7087.868421052633], [170.0, 7352.848484848486], [171.0, 7253.805555555557], [172.0, 7083.685714285714], [173.0, 7518.722222222223], [174.0, 7627.305555555556], [175.0, 7857.216216216216], [176.0, 7740.677419354839], [177.0, 7840.085714285715], [178.0, 7695.485714285715], [179.0, 7981.676470588236], [180.0, 8011.722222222223], [181.0, 8232.944444444445], [182.0, 8495.970588235296], [183.0, 8300.914285714285], [184.0, 7934.999999999999], [185.0, 8203.914285714287], [186.0, 8503.58823529412], [187.0, 8121.85294117647], [188.0, 8160.857142857142], [189.0, 8460.272727272726], [190.0, 8361.757575757576], [191.0, 8761.424242424242], [192.0, 8841.48484848485], [193.0, 8714.451612903224], [194.0, 9285.457142857143], [195.0, 8888.433333333334], [196.0, 8914.941176470587], [197.0, 8971.885714285716], [198.0, 9256.93939393939], [199.0, 9307.8125], [200.0, 13569.855918692729], [201.0, 14353.49682875264], [202.0, 16146.18791946309], [203.0, 16881.48275862069], [204.0, 14317.428571428572], [205.0, 15471.016393442622], [206.0, 17438.458333333332], [207.0, 15695.170212765956], [208.0, 14469.239999999998], [209.0, 14356.740740740739], [210.0, 14862.7], [211.0, 17186.08], [212.0, 14766.870967741936], [213.0, 17744.323529411762], [214.0, 18275.88888888889], [215.0, 17362.913043478264], [216.0, 15262.65625], [217.0, 17121.258064516125], [218.0, 16813.35714285715], [219.0, 15806.137931034486], [220.0, 15276.222222222223], [221.0, 15136.782608695652], [222.0, 15240.56], [223.0, 18162.4375], [224.0, 16068.173913043478], [225.0, 16426.378378378377], [226.0, 14345.772727272726], [227.0, 16724.230769230766], [228.0, 16484.3], [229.0, 17577.099999999995], [230.0, 16036.297297297297], [231.0, 17193.541666666664], [232.0, 15460.897435897436], [233.0, 17193.36], [234.0, 16726.249999999996], [235.0, 18243.833333333332], [236.0, 15537.25], [237.0, 19001.21212121212], [238.0, 15496.565217391304], [239.0, 15642.452380952382], [240.0, 16927.357142857138], [241.0, 15594.166666666668], [242.0, 15216.173913043478], [243.0, 14807.96], [244.0, 15965.439999999999], [245.0, 15774.599999999999], [246.0, 15445.391304347824], [247.0, 17197.12121212121], [248.0, 17861.428571428572], [249.0, 16184.199999999997], [250.0, 16901.531250000004], [251.0, 17401.480000000003], [252.0, 14110.95], [253.0, 16909.92857142857], [254.0, 15151.263157894737], [255.0, 17228.666666666668], [257.0, 15586.12], [256.0, 17703.971428571433], [258.0, 16708.318181818184], [259.0, 16589.73076923077], [260.0, 16212.56666666667], [261.0, 16282.576923076922], [262.0, 16961.4], [263.0, 15873.666666666668], [264.0, 15700.379310344826], [270.0, 16040.542857142858], [271.0, 15940.111111111111], [268.0, 16107.541666666668], [269.0, 15389.375], [265.0, 16543.600000000002], [266.0, 14954.0], [267.0, 17241.391304347824], [273.0, 15383.36], [272.0, 14970.382352941177], [274.0, 15496.972222222223], [275.0, 14887.333333333332], [276.0, 15654.533333333333], [277.0, 14500.75], [278.0, 16023.615384615385], [279.0, 17357.285714285717], [280.0, 16467.71875], [286.0, 16483.600000000002], [287.0, 16174.972222222226], [284.0, 16494.53488372093], [285.0, 15950.25], [281.0, 15590.761904761906], [282.0, 16604.243902439026], [283.0, 16187.261904761903], [289.0, 16530.58620689655], [288.0, 14378.296296296296], [290.0, 17067.322580645166], [291.0, 16235.428571428572], [292.0, 17644.593750000004], [293.0, 15801.326923076926], [294.0, 18487.212121212124], [295.0, 17578.758064516136], [296.0, 18166.073529411762], [300.0, 15682.222222222228], [297.0, 15608.6511627907], [298.0, 17028.06481481481], [299.0, 15569.12295081967], [1.0, 8525.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[161.08410738559186, 9213.137007249708]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 300.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1035.2833333333333, "minX": 1.6997976E12, "maxY": 33126.316666666666, "series": [{"data": [[1.69979844E12, 10491.033333333333], [1.69979814E12, 13242.933333333332], [1.69979808E12, 13541.666666666666], [1.69979778E12, 23760.05], [1.6997982E12, 11327.616666666667], [1.6997979E12, 18170.616666666665], [1.6997985E12, 9058.283333333333], [1.69979784E12, 19926.2], [1.69979796E12, 16120.733333333334], [1.69979766E12, 28042.633333333335], [1.6997976E12, 2007.7833333333333], [1.69979826E12, 11809.733333333334], [1.69979838E12, 10879.933333333332], [1.69979772E12, 33126.316666666666], [1.69979832E12, 11261.916666666666], [1.69979802E12, 15031.216666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69979844E12, 5423.383333333333], [1.69979814E12, 6835.566666666667], [1.69979808E12, 6987.266666666666], [1.69979778E12, 12251.366666666667], [1.6997982E12, 5843.166666666667], [1.6997979E12, 9369.533333333333], [1.6997985E12, 4684.733333333334], [1.69979784E12, 10274.55], [1.69979796E12, 8312.266666666666], [1.69979766E12, 14459.766666666666], [1.6997976E12, 1035.2833333333333], [1.69979826E12, 6096.5], [1.69979838E12, 5611.916666666667], [1.69979772E12, 17081.0], [1.69979832E12, 5807.1], [1.69979802E12, 7769.433333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6997985E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 25.062937062937074, "minX": 1.6997976E12, "maxY": 19575.798709677423, "series": [{"data": [[1.69979844E12, 15943.818424566096], [1.69979814E12, 15984.281779661003], [1.69979808E12, 12548.035233160621], [1.69979778E12, 3850.873522458625], [1.6997982E12, 14885.315985130108], [1.6997979E12, 8649.93353941268], [1.6997985E12, 16534.245749613587], [1.69979784E12, 6418.7688513037365], [1.69979796E12, 10498.052264808372], [1.69979766E12, 132.8407611417126], [1.6997976E12, 25.062937062937074], [1.69979826E12, 18274.77553444182], [1.69979838E12, 19575.798709677423], [1.69979772E12, 1839.426027977955], [1.69979832E12, 14998.894014962583], [1.69979802E12, 13748.950605778185]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6997985E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 24.46153846153846, "minX": 1.6997976E12, "maxY": 19573.96000000004, "series": [{"data": [[1.69979844E12, 15941.662216288381], [1.69979814E12, 15982.26059322036], [1.69979808E12, 12546.357512953376], [1.69979778E12, 3849.3540189125306], [1.6997982E12, 14883.117719950442], [1.6997979E12, 8648.512364760432], [1.6997985E12, 16532.22565687792], [1.69979784E12, 6417.322762508804], [1.69979796E12, 10496.511324041809], [1.69979766E12, 132.33299949924893], [1.6997976E12, 24.46153846153846], [1.69979826E12, 18272.89429928741], [1.69979838E12, 19573.96000000004], [1.69979772E12, 1838.2038999576077], [1.69979832E12, 14996.760598503735], [1.69979802E12, 13747.476234855543]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6997985E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.8111888111888111, "minX": 1.6997976E12, "maxY": 1.4536805207811694, "series": [{"data": [[1.69979844E12, 0.9319092122830441], [1.69979814E12, 1.0042372881355932], [1.69979808E12, 1.0020725388601053], [1.69979778E12, 1.3711583924349886], [1.6997982E12, 0.9764560099132584], [1.6997979E12, 0.8477588871715613], [1.6997985E12, 0.9366306027820703], [1.69979784E12, 1.185341789992953], [1.69979796E12, 0.9956445993031358], [1.69979766E12, 1.4536805207811694], [1.6997976E12, 0.8111888111888111], [1.69979826E12, 0.9619952494061761], [1.69979838E12, 0.9961290322580646], [1.69979772E12, 1.2242475625264921], [1.69979832E12, 0.9413965087281804], [1.69979802E12, 1.0643056849953418]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6997985E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 11.0, "minX": 1.6997976E12, "maxY": 38068.0, "series": [{"data": [[1.69979844E12, 30803.0], [1.69979814E12, 31166.0], [1.69979808E12, 25169.0], [1.69979778E12, 14895.0], [1.6997982E12, 30572.0], [1.6997979E12, 25886.0], [1.6997985E12, 17277.0], [1.69979784E12, 13995.0], [1.69979796E12, 21359.0], [1.69979766E12, 980.0], [1.6997976E12, 469.0], [1.69979826E12, 34907.0], [1.69979838E12, 38068.0], [1.69979772E12, 5165.0], [1.69979832E12, 29532.0], [1.69979802E12, 27102.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69979844E12, 16326.8], [1.69979814E12, 18957.0], [1.69979808E12, 13630.2], [1.69979778E12, 4787.1], [1.6997982E12, 17461.6], [1.6997979E12, 9663.0], [1.6997985E12, 16947.8], [1.69979784E12, 7385.0], [1.69979796E12, 12465.2], [1.69979766E12, 414.0], [1.6997976E12, 28.599999999999994], [1.69979826E12, 21538.0], [1.69979838E12, 23397.5], [1.69979772E12, 2567.0], [1.69979832E12, 15803.800000000001], [1.69979802E12, 16424.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69979844E12, 16581.36], [1.69979814E12, 30360.800000000003], [1.69979808E12, 24515.840000000004], [1.69979778E12, 7239.319999999995], [1.6997982E12, 27733.559999999994], [1.6997979E12, 17310.449999999993], [1.6997985E12, 17164.06], [1.69979784E12, 12435.599999999999], [1.69979796E12, 20801.989999999998], [1.69979766E12, 763.02], [1.6997976E12, 279.360000000001], [1.69979826E12, 32795.80000000002], [1.69979838E12, 36378.0], [1.69979772E12, 3177.0000000000023], [1.69979832E12, 29080.28], [1.69979802E12, 26164.399999999987]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69979844E12, 16428.2], [1.69979814E12, 19195.9], [1.69979808E12, 14490.6], [1.69979778E12, 5795.35], [1.6997982E12, 17701.65], [1.6997979E12, 9780.75], [1.6997985E12, 17009.0], [1.69979784E12, 7562.0], [1.69979796E12, 13292.1], [1.69979766E12, 551.1999999999998], [1.6997976E12, 31.0], [1.69979826E12, 21646.0], [1.69979838E12, 23618.5], [1.69979772E12, 2760.0], [1.69979832E12, 16798.8], [1.69979802E12, 21884.199999999975]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69979844E12, 508.0], [1.69979814E12, 474.0], [1.69979808E12, 397.0], [1.69979778E12, 154.0], [1.6997982E12, 579.0], [1.6997979E12, 283.0], [1.6997985E12, 534.0], [1.69979784E12, 207.0], [1.69979796E12, 291.0], [1.69979766E12, 11.0], [1.6997976E12, 13.0], [1.69979826E12, 474.0], [1.69979838E12, 656.0], [1.69979772E12, 71.0], [1.69979832E12, 585.0], [1.69979802E12, 351.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69979844E12, 15974.0], [1.69979814E12, 16022.0], [1.69979808E12, 12537.0], [1.69979778E12, 3784.0], [1.6997982E12, 14205.5], [1.6997979E12, 8813.5], [1.6997985E12, 16513.0], [1.69979784E12, 6459.0], [1.69979796E12, 10285.0], [1.69979766E12, 65.0], [1.6997976E12, 22.0], [1.69979826E12, 18595.0], [1.69979838E12, 19457.0], [1.69979772E12, 1794.0], [1.69979832E12, 14874.0], [1.69979802E12, 13963.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6997985E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 21.5, "minX": 1.0, "maxY": 34175.0, "series": [{"data": [[2.0, 7001.5], [3.0, 22.0], [4.0, 15564.5], [5.0, 23.0], [6.0, 21.5], [7.0, 24.0], [8.0, 22.0], [9.0, 16195.0], [10.0, 15889.5], [11.0, 16246.0], [12.0, 16288.0], [13.0, 16008.0], [14.0, 15447.5], [15.0, 15126.0], [16.0, 14444.0], [17.0, 12803.0], [18.0, 11547.0], [19.0, 11969.0], [20.0, 9726.0], [21.0, 9174.0], [22.0, 7867.0], [23.0, 7741.0], [24.0, 6511.0], [25.0, 6472.5], [26.0, 5762.0], [27.0, 4263.5], [28.0, 3794.5], [29.0, 3937.0], [30.0, 3416.0], [31.0, 2844.0], [32.0, 3016.5], [33.0, 2900.5], [35.0, 2430.0], [34.0, 2824.5], [36.0, 2272.5], [37.0, 2032.5], [38.0, 1922.0], [39.0, 115.0], [41.0, 1459.0], [40.0, 1826.0], [42.0, 1647.0], [43.0, 1436.0], [44.0, 796.5], [45.0, 250.0], [46.0, 175.5], [47.0, 154.0], [49.0, 618.0], [48.0, 1105.0], [51.0, 200.0], [50.0, 357.5], [54.0, 488.0], [1.0, 31.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 32298.0], [17.0, 30478.5], [18.0, 33843.0], [19.0, 34175.0], [20.0, 32705.0], [11.0, 30025.0], [12.0, 34085.0], [13.0, 30009.0], [14.0, 30018.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 54.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 20.5, "minX": 1.0, "maxY": 34174.0, "series": [{"data": [[2.0, 7001.0], [3.0, 21.0], [4.0, 15563.0], [5.0, 22.0], [6.0, 20.5], [7.0, 23.0], [8.0, 22.0], [9.0, 16194.0], [10.0, 15889.0], [11.0, 16245.0], [12.0, 16286.0], [13.0, 16004.0], [14.0, 15445.0], [15.0, 15119.0], [16.0, 14443.0], [17.0, 12802.0], [18.0, 11546.0], [19.0, 11969.0], [20.0, 9725.5], [21.0, 9173.5], [22.0, 7866.0], [23.0, 7741.0], [24.0, 6509.0], [25.0, 6472.0], [26.0, 5761.5], [27.0, 4261.5], [28.0, 3788.5], [29.0, 3933.0], [30.0, 3415.5], [31.0, 2844.0], [32.0, 3015.5], [33.0, 2896.0], [35.0, 2429.0], [34.0, 2822.5], [36.0, 2271.5], [37.0, 2031.5], [38.0, 1922.0], [39.0, 115.0], [41.0, 1459.0], [40.0, 1825.0], [42.0, 1646.5], [43.0, 1435.0], [44.0, 795.5], [45.0, 249.0], [46.0, 175.5], [47.0, 154.0], [49.0, 615.0], [48.0, 1103.0], [51.0, 200.0], [50.0, 357.0], [54.0, 488.0], [1.0, 30.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 32297.5], [17.0, 30478.0], [18.0, 33843.0], [19.0, 34174.0], [20.0, 32705.0], [11.0, 30024.0], [12.0, 34085.0], [13.0, 30008.0], [14.0, 30017.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 54.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.45, "minX": 1.6997976E12, "maxY": 40.25, "series": [{"data": [[1.69979844E12, 12.483333333333333], [1.69979814E12, 14.066666666666666], [1.69979808E12, 17.75], [1.69979778E12, 28.866666666666667], [1.6997982E12, 15.116666666666667], [1.6997979E12, 21.983333333333334], [1.6997985E12, 7.45], [1.69979784E12, 24.316666666666666], [1.69979796E12, 20.8], [1.69979766E12, 33.86666666666667], [1.6997976E12, 2.45], [1.69979826E12, 12.366666666666667], [1.69979838E12, 11.25], [1.69979772E12, 40.25], [1.69979832E12, 15.033333333333333], [1.69979802E12, 16.216666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6997985E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6997976E12, "maxY": 39.31666666666667, "series": [{"data": [[1.69979844E12, 12.383333333333333], [1.69979814E12, 15.683333333333334], [1.69979808E12, 16.05], [1.69979778E12, 28.2], [1.6997982E12, 13.433333333333334], [1.6997979E12, 21.566666666666666], [1.6997985E12, 10.683333333333334], [1.69979784E12, 23.65], [1.69979796E12, 19.133333333333333], [1.69979766E12, 33.28333333333333], [1.6997976E12, 2.3833333333333333], [1.69979826E12, 13.983333333333333], [1.69979838E12, 12.9], [1.69979772E12, 39.31666666666667], [1.69979832E12, 13.366666666666667], [1.69979802E12, 17.75]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.69979844E12, 0.1], [1.69979814E12, 0.05], [1.69979808E12, 0.03333333333333333], [1.69979826E12, 0.05], [1.69979838E12, 0.016666666666666666], [1.6997982E12, 0.016666666666666666], [1.6997985E12, 0.1], [1.69979802E12, 0.13333333333333333]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6997985E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6997976E12, "maxY": 39.31666666666667, "series": [{"data": [[1.69979844E12, 12.383333333333333], [1.69979814E12, 15.683333333333334], [1.69979808E12, 16.05], [1.69979778E12, 28.2], [1.6997982E12, 13.433333333333334], [1.6997979E12, 21.566666666666666], [1.6997985E12, 10.683333333333334], [1.69979784E12, 23.65], [1.69979796E12, 19.133333333333333], [1.69979766E12, 33.28333333333333], [1.6997976E12, 2.3833333333333333], [1.69979826E12, 13.983333333333333], [1.69979838E12, 12.9], [1.69979772E12, 39.31666666666667], [1.69979832E12, 13.366666666666667], [1.69979802E12, 17.75]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.69979844E12, 0.1], [1.69979814E12, 0.05], [1.69979808E12, 0.03333333333333333], [1.69979826E12, 0.05], [1.69979838E12, 0.016666666666666666], [1.6997982E12, 0.016666666666666666], [1.6997985E12, 0.1], [1.69979802E12, 0.13333333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6997985E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6997976E12, "maxY": 39.31666666666667, "series": [{"data": [[1.69979844E12, 12.383333333333333], [1.69979814E12, 15.683333333333334], [1.69979808E12, 16.05], [1.69979778E12, 28.2], [1.6997982E12, 13.433333333333334], [1.6997979E12, 21.566666666666666], [1.6997985E12, 10.683333333333334], [1.69979784E12, 23.65], [1.69979796E12, 19.133333333333333], [1.69979766E12, 33.28333333333333], [1.6997976E12, 2.3833333333333333], [1.69979826E12, 13.983333333333333], [1.69979838E12, 12.9], [1.69979772E12, 39.31666666666667], [1.69979832E12, 13.366666666666667], [1.69979802E12, 17.75]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69979844E12, 0.1], [1.69979814E12, 0.05], [1.69979808E12, 0.03333333333333333], [1.69979826E12, 0.05], [1.69979838E12, 0.016666666666666666], [1.6997982E12, 0.016666666666666666], [1.6997985E12, 0.1], [1.69979802E12, 0.13333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6997985E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

