/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "maxY": 27834.0, "series": [{"data": [[0.0, 5.0], [0.1, 7.0], [0.2, 7.0], [0.3, 8.0], [0.4, 8.0], [0.5, 9.0], [0.6, 9.0], [0.7, 9.0], [0.8, 10.0], [0.9, 10.0], [1.0, 10.0], [1.1, 11.0], [1.2, 11.0], [1.3, 11.0], [1.4, 12.0], [1.5, 12.0], [1.6, 12.0], [1.7, 13.0], [1.8, 13.0], [1.9, 13.0], [2.0, 14.0], [2.1, 14.0], [2.2, 14.0], [2.3, 15.0], [2.4, 15.0], [2.5, 15.0], [2.6, 16.0], [2.7, 16.0], [2.8, 16.0], [2.9, 17.0], [3.0, 17.0], [3.1, 18.0], [3.2, 18.0], [3.3, 18.0], [3.4, 19.0], [3.5, 19.0], [3.6, 19.0], [3.7, 20.0], [3.8, 20.0], [3.9, 21.0], [4.0, 21.0], [4.1, 21.0], [4.2, 22.0], [4.3, 22.0], [4.4, 23.0], [4.5, 23.0], [4.6, 23.0], [4.7, 24.0], [4.8, 24.0], [4.9, 25.0], [5.0, 25.0], [5.1, 26.0], [5.2, 26.0], [5.3, 26.0], [5.4, 27.0], [5.5, 27.0], [5.6, 28.0], [5.7, 28.0], [5.8, 28.0], [5.9, 29.0], [6.0, 30.0], [6.1, 30.0], [6.2, 31.0], [6.3, 31.0], [6.4, 32.0], [6.5, 32.0], [6.6, 33.0], [6.7, 33.0], [6.8, 34.0], [6.9, 35.0], [7.0, 35.0], [7.1, 36.0], [7.2, 37.0], [7.3, 37.0], [7.4, 38.0], [7.5, 38.0], [7.6, 39.0], [7.7, 39.0], [7.8, 40.0], [7.9, 41.0], [8.0, 41.0], [8.1, 42.0], [8.2, 43.0], [8.3, 44.0], [8.4, 45.0], [8.5, 45.0], [8.6, 46.0], [8.7, 47.0], [8.8, 48.0], [8.9, 49.0], [9.0, 50.0], [9.1, 51.0], [9.2, 51.0], [9.3, 52.0], [9.4, 53.0], [9.5, 54.0], [9.6, 55.0], [9.7, 56.0], [9.8, 57.0], [9.9, 57.0], [10.0, 58.0], [10.1, 59.0], [10.2, 60.0], [10.3, 61.0], [10.4, 62.0], [10.5, 63.0], [10.6, 64.0], [10.7, 66.0], [10.8, 66.0], [10.9, 68.0], [11.0, 69.0], [11.1, 69.0], [11.2, 71.0], [11.3, 72.0], [11.4, 73.0], [11.5, 74.0], [11.6, 75.0], [11.7, 76.0], [11.8, 77.0], [11.9, 78.0], [12.0, 79.0], [12.1, 82.0], [12.2, 83.0], [12.3, 85.0], [12.4, 86.0], [12.5, 88.0], [12.6, 91.0], [12.7, 93.0], [12.8, 96.0], [12.9, 100.0], [13.0, 105.0], [13.1, 109.0], [13.2, 117.0], [13.3, 124.0], [13.4, 135.0], [13.5, 150.0], [13.6, 161.0], [13.7, 174.0], [13.8, 187.0], [13.9, 201.0], [14.0, 214.0], [14.1, 230.0], [14.2, 242.0], [14.3, 253.0], [14.4, 261.0], [14.5, 270.0], [14.6, 283.0], [14.7, 291.0], [14.8, 301.0], [14.9, 308.0], [15.0, 317.0], [15.1, 324.0], [15.2, 333.0], [15.3, 344.0], [15.4, 356.0], [15.5, 367.0], [15.6, 379.0], [15.7, 391.0], [15.8, 408.0], [15.9, 420.0], [16.0, 435.0], [16.1, 453.0], [16.2, 466.0], [16.3, 481.0], [16.4, 495.0], [16.5, 510.0], [16.6, 532.0], [16.7, 566.0], [16.8, 595.0], [16.9, 635.0], [17.0, 668.0], [17.1, 697.0], [17.2, 733.0], [17.3, 773.0], [17.4, 818.0], [17.5, 861.0], [17.6, 909.0], [17.7, 977.0], [17.8, 1029.0], [17.9, 1092.0], [18.0, 1123.0], [18.1, 1144.0], [18.2, 1162.0], [18.3, 1184.0], [18.4, 1196.0], [18.5, 1206.0], [18.6, 1219.0], [18.7, 1230.0], [18.8, 1242.0], [18.9, 1259.0], [19.0, 1273.0], [19.1, 1282.0], [19.2, 1292.0], [19.3, 1303.0], [19.4, 1312.0], [19.5, 1319.0], [19.6, 1326.0], [19.7, 1332.0], [19.8, 1339.0], [19.9, 1345.0], [20.0, 1350.0], [20.1, 1355.0], [20.2, 1361.0], [20.3, 1367.0], [20.4, 1376.0], [20.5, 1384.0], [20.6, 1393.0], [20.7, 1399.0], [20.8, 1410.0], [20.9, 1417.0], [21.0, 1429.0], [21.1, 1437.0], [21.2, 1449.0], [21.3, 1465.0], [21.4, 1478.0], [21.5, 1488.0], [21.6, 1496.0], [21.7, 1504.0], [21.8, 1511.0], [21.9, 1519.0], [22.0, 1529.0], [22.1, 1535.0], [22.2, 1545.0], [22.3, 1558.0], [22.4, 1572.0], [22.5, 1584.0], [22.6, 1602.0], [22.7, 1615.0], [22.8, 1627.0], [22.9, 1639.0], [23.0, 1652.0], [23.1, 1663.0], [23.2, 1675.0], [23.3, 1686.0], [23.4, 1706.0], [23.5, 1722.0], [23.6, 1734.0], [23.7, 1747.0], [23.8, 1761.0], [23.9, 1774.0], [24.0, 1783.0], [24.1, 1793.0], [24.2, 1801.0], [24.3, 1810.0], [24.4, 1820.0], [24.5, 1834.0], [24.6, 1848.0], [24.7, 1868.0], [24.8, 1880.0], [24.9, 1889.0], [25.0, 1904.0], [25.1, 1922.0], [25.2, 1942.0], [25.3, 1957.0], [25.4, 1977.0], [25.5, 1991.0], [25.6, 2006.0], [25.7, 2017.0], [25.8, 2030.0], [25.9, 2042.0], [26.0, 2055.0], [26.1, 2072.0], [26.2, 2091.0], [26.3, 2109.0], [26.4, 2122.0], [26.5, 2134.0], [26.6, 2145.0], [26.7, 2157.0], [26.8, 2168.0], [26.9, 2178.0], [27.0, 2189.0], [27.1, 2204.0], [27.2, 2218.0], [27.3, 2233.0], [27.4, 2246.0], [27.5, 2260.0], [27.6, 2277.0], [27.7, 2291.0], [27.8, 2304.0], [27.9, 2327.0], [28.0, 2345.0], [28.1, 2360.0], [28.2, 2374.0], [28.3, 2386.0], [28.4, 2399.0], [28.5, 2410.0], [28.6, 2424.0], [28.7, 2434.0], [28.8, 2452.0], [28.9, 2460.0], [29.0, 2480.0], [29.1, 2492.0], [29.2, 2507.0], [29.3, 2519.0], [29.4, 2535.0], [29.5, 2548.0], [29.6, 2558.0], [29.7, 2568.0], [29.8, 2582.0], [29.9, 2601.0], [30.0, 2616.0], [30.1, 2638.0], [30.2, 2658.0], [30.3, 2680.0], [30.4, 2697.0], [30.5, 2708.0], [30.6, 2723.0], [30.7, 2734.0], [30.8, 2747.0], [30.9, 2767.0], [31.0, 2783.0], [31.1, 2802.0], [31.2, 2816.0], [31.3, 2837.0], [31.4, 2857.0], [31.5, 2870.0], [31.6, 2886.0], [31.7, 2901.0], [31.8, 2915.0], [31.9, 2926.0], [32.0, 2944.0], [32.1, 2964.0], [32.2, 2992.0], [32.3, 3012.0], [32.4, 3032.0], [32.5, 3051.0], [32.6, 3064.0], [32.7, 3081.0], [32.8, 3099.0], [32.9, 3121.0], [33.0, 3138.0], [33.1, 3156.0], [33.2, 3179.0], [33.3, 3199.0], [33.4, 3216.0], [33.5, 3234.0], [33.6, 3257.0], [33.7, 3276.0], [33.8, 3287.0], [33.9, 3300.0], [34.0, 3316.0], [34.1, 3327.0], [34.2, 3346.0], [34.3, 3357.0], [34.4, 3370.0], [34.5, 3387.0], [34.6, 3408.0], [34.7, 3432.0], [34.8, 3460.0], [34.9, 3490.0], [35.0, 3511.0], [35.1, 3532.0], [35.2, 3557.0], [35.3, 3583.0], [35.4, 3608.0], [35.5, 3646.0], [35.6, 3664.0], [35.7, 3683.0], [35.8, 3707.0], [35.9, 3724.0], [36.0, 3741.0], [36.1, 3756.0], [36.2, 3769.0], [36.3, 3791.0], [36.4, 3818.0], [36.5, 3845.0], [36.6, 3860.0], [36.7, 3870.0], [36.8, 3880.0], [36.9, 3899.0], [37.0, 3917.0], [37.1, 3931.0], [37.2, 3952.0], [37.3, 3971.0], [37.4, 4001.0], [37.5, 4023.0], [37.6, 4045.0], [37.7, 4065.0], [37.8, 4097.0], [37.9, 4127.0], [38.0, 4156.0], [38.1, 4193.0], [38.2, 4225.0], [38.3, 4245.0], [38.4, 4268.0], [38.5, 4289.0], [38.6, 4308.0], [38.7, 4330.0], [38.8, 4355.0], [38.9, 4381.0], [39.0, 4404.0], [39.1, 4426.0], [39.2, 4459.0], [39.3, 4490.0], [39.4, 4511.0], [39.5, 4527.0], [39.6, 4544.0], [39.7, 4561.0], [39.8, 4572.0], [39.9, 4588.0], [40.0, 4606.0], [40.1, 4624.0], [40.2, 4648.0], [40.3, 4678.0], [40.4, 4700.0], [40.5, 4733.0], [40.6, 4752.0], [40.7, 4769.0], [40.8, 4786.0], [40.9, 4800.0], [41.0, 4819.0], [41.1, 4836.0], [41.2, 4851.0], [41.3, 4874.0], [41.4, 4898.0], [41.5, 4923.0], [41.6, 4948.0], [41.7, 4972.0], [41.8, 4994.0], [41.9, 5013.0], [42.0, 5038.0], [42.1, 5062.0], [42.2, 5084.0], [42.3, 5108.0], [42.4, 5127.0], [42.5, 5145.0], [42.6, 5168.0], [42.7, 5193.0], [42.8, 5223.0], [42.9, 5248.0], [43.0, 5268.0], [43.1, 5286.0], [43.2, 5301.0], [43.3, 5312.0], [43.4, 5324.0], [43.5, 5340.0], [43.6, 5357.0], [43.7, 5369.0], [43.8, 5394.0], [43.9, 5434.0], [44.0, 5457.0], [44.1, 5506.0], [44.2, 5525.0], [44.3, 5557.0], [44.4, 5576.0], [44.5, 5593.0], [44.6, 5614.0], [44.7, 5639.0], [44.8, 5669.0], [44.9, 5701.0], [45.0, 5725.0], [45.1, 5753.0], [45.2, 5776.0], [45.3, 5790.0], [45.4, 5807.0], [45.5, 5822.0], [45.6, 5836.0], [45.7, 5853.0], [45.8, 5875.0], [45.9, 5906.0], [46.0, 5946.0], [46.1, 5985.0], [46.2, 6025.0], [46.3, 6073.0], [46.4, 6133.0], [46.5, 6181.0], [46.6, 6289.0], [46.7, 6364.0], [46.8, 6443.0], [46.9, 6493.0], [47.0, 6552.0], [47.1, 6611.0], [47.2, 6632.0], [47.3, 6679.0], [47.4, 6734.0], [47.5, 6784.0], [47.6, 6813.0], [47.7, 6831.0], [47.8, 6845.0], [47.9, 6863.0], [48.0, 6874.0], [48.1, 6887.0], [48.2, 6898.0], [48.3, 6911.0], [48.4, 6919.0], [48.5, 6932.0], [48.6, 6945.0], [48.7, 6953.0], [48.8, 6966.0], [48.9, 6975.0], [49.0, 6982.0], [49.1, 6990.0], [49.2, 6998.0], [49.3, 7004.0], [49.4, 7011.0], [49.5, 7017.0], [49.6, 7025.0], [49.7, 7031.0], [49.8, 7036.0], [49.9, 7043.0], [50.0, 7047.0], [50.1, 7052.0], [50.2, 7058.0], [50.3, 7063.0], [50.4, 7065.0], [50.5, 7068.0], [50.6, 7073.0], [50.7, 7077.0], [50.8, 7080.0], [50.9, 7086.0], [51.0, 7090.0], [51.1, 7094.0], [51.2, 7098.0], [51.3, 7101.0], [51.4, 7105.0], [51.5, 7109.0], [51.6, 7114.0], [51.7, 7118.0], [51.8, 7122.0], [51.9, 7127.0], [52.0, 7132.0], [52.1, 7135.0], [52.2, 7138.0], [52.3, 7141.0], [52.4, 7145.0], [52.5, 7150.0], [52.6, 7154.0], [52.7, 7158.0], [52.8, 7161.0], [52.9, 7165.0], [53.0, 7168.0], [53.1, 7171.0], [53.2, 7174.0], [53.3, 7178.0], [53.4, 7181.0], [53.5, 7185.0], [53.6, 7190.0], [53.7, 7194.0], [53.8, 7197.0], [53.9, 7202.0], [54.0, 7205.0], [54.1, 7209.0], [54.2, 7211.0], [54.3, 7214.0], [54.4, 7216.0], [54.5, 7220.0], [54.6, 7223.0], [54.7, 7226.0], [54.8, 7229.0], [54.9, 7232.0], [55.0, 7236.0], [55.1, 7239.0], [55.2, 7244.0], [55.3, 7246.0], [55.4, 7249.0], [55.5, 7252.0], [55.6, 7255.0], [55.7, 7257.0], [55.8, 7260.0], [55.9, 7263.0], [56.0, 7266.0], [56.1, 7271.0], [56.2, 7274.0], [56.3, 7277.0], [56.4, 7280.0], [56.5, 7283.0], [56.6, 7287.0], [56.7, 7291.0], [56.8, 7295.0], [56.9, 7298.0], [57.0, 7303.0], [57.1, 7307.0], [57.2, 7311.0], [57.3, 7315.0], [57.4, 7319.0], [57.5, 7323.0], [57.6, 7326.0], [57.7, 7329.0], [57.8, 7332.0], [57.9, 7336.0], [58.0, 7340.0], [58.1, 7344.0], [58.2, 7347.0], [58.3, 7351.0], [58.4, 7355.0], [58.5, 7358.0], [58.6, 7361.0], [58.7, 7365.0], [58.8, 7368.0], [58.9, 7372.0], [59.0, 7376.0], [59.1, 7379.0], [59.2, 7384.0], [59.3, 7387.0], [59.4, 7390.0], [59.5, 7395.0], [59.6, 7398.0], [59.7, 7401.0], [59.8, 7405.0], [59.9, 7409.0], [60.0, 7414.0], [60.1, 7419.0], [60.2, 7423.0], [60.3, 7426.0], [60.4, 7430.0], [60.5, 7434.0], [60.6, 7439.0], [60.7, 7443.0], [60.8, 7448.0], [60.9, 7452.0], [61.0, 7456.0], [61.1, 7460.0], [61.2, 7464.0], [61.3, 7469.0], [61.4, 7473.0], [61.5, 7478.0], [61.6, 7483.0], [61.7, 7488.0], [61.8, 7491.0], [61.9, 7496.0], [62.0, 7501.0], [62.1, 7507.0], [62.2, 7512.0], [62.3, 7517.0], [62.4, 7522.0], [62.5, 7530.0], [62.6, 7536.0], [62.7, 7541.0], [62.8, 7547.0], [62.9, 7554.0], [63.0, 7560.0], [63.1, 7566.0], [63.2, 7572.0], [63.3, 7577.0], [63.4, 7584.0], [63.5, 7590.0], [63.6, 7596.0], [63.7, 7601.0], [63.8, 7606.0], [63.9, 7610.0], [64.0, 7615.0], [64.1, 7621.0], [64.2, 7626.0], [64.3, 7631.0], [64.4, 7636.0], [64.5, 7642.0], [64.6, 7649.0], [64.7, 7655.0], [64.8, 7660.0], [64.9, 7664.0], [65.0, 7670.0], [65.1, 7675.0], [65.2, 7681.0], [65.3, 7687.0], [65.4, 7692.0], [65.5, 7696.0], [65.6, 7699.0], [65.7, 7705.0], [65.8, 7710.0], [65.9, 7716.0], [66.0, 7722.0], [66.1, 7726.0], [66.2, 7730.0], [66.3, 7735.0], [66.4, 7743.0], [66.5, 7748.0], [66.6, 7752.0], [66.7, 7760.0], [66.8, 7765.0], [66.9, 7771.0], [67.0, 7778.0], [67.1, 7784.0], [67.2, 7791.0], [67.3, 7797.0], [67.4, 7801.0], [67.5, 7809.0], [67.6, 7816.0], [67.7, 7821.0], [67.8, 7827.0], [67.9, 7833.0], [68.0, 7841.0], [68.1, 7848.0], [68.2, 7858.0], [68.3, 7866.0], [68.4, 7877.0], [68.5, 7883.0], [68.6, 7891.0], [68.7, 7901.0], [68.8, 7909.0], [68.9, 7916.0], [69.0, 7925.0], [69.1, 7935.0], [69.2, 7942.0], [69.3, 7949.0], [69.4, 7955.0], [69.5, 7965.0], [69.6, 7972.0], [69.7, 7984.0], [69.8, 7992.0], [69.9, 8003.0], [70.0, 8014.0], [70.1, 8025.0], [70.2, 8037.0], [70.3, 8047.0], [70.4, 8060.0], [70.5, 8070.0], [70.6, 8086.0], [70.7, 8094.0], [70.8, 8110.0], [70.9, 8122.0], [71.0, 8137.0], [71.1, 8151.0], [71.2, 8167.0], [71.3, 8185.0], [71.4, 8209.0], [71.5, 8240.0], [71.6, 8298.0], [71.7, 8418.0], [71.8, 8478.0], [71.9, 8551.0], [72.0, 8614.0], [72.1, 8667.0], [72.2, 8711.0], [72.3, 8754.0], [72.4, 8797.0], [72.5, 8821.0], [72.6, 8845.0], [72.7, 8867.0], [72.8, 8893.0], [72.9, 8937.0], [73.0, 8988.0], [73.1, 9010.0], [73.2, 9030.0], [73.3, 9050.0], [73.4, 9070.0], [73.5, 9082.0], [73.6, 9099.0], [73.7, 9115.0], [73.8, 9136.0], [73.9, 9161.0], [74.0, 9181.0], [74.1, 9205.0], [74.2, 9220.0], [74.3, 9233.0], [74.4, 9242.0], [74.5, 9256.0], [74.6, 9265.0], [74.7, 9274.0], [74.8, 9283.0], [74.9, 9292.0], [75.0, 9303.0], [75.1, 9312.0], [75.2, 9319.0], [75.3, 9331.0], [75.4, 9340.0], [75.5, 9349.0], [75.6, 9361.0], [75.7, 9370.0], [75.8, 9386.0], [75.9, 9397.0], [76.0, 9410.0], [76.1, 9423.0], [76.2, 9432.0], [76.3, 9438.0], [76.4, 9445.0], [76.5, 9457.0], [76.6, 9463.0], [76.7, 9472.0], [76.8, 9480.0], [76.9, 9488.0], [77.0, 9497.0], [77.1, 9506.0], [77.2, 9514.0], [77.3, 9522.0], [77.4, 9533.0], [77.5, 9539.0], [77.6, 9545.0], [77.7, 9554.0], [77.8, 9565.0], [77.9, 9578.0], [78.0, 9591.0], [78.1, 9597.0], [78.2, 9606.0], [78.3, 9616.0], [78.4, 9632.0], [78.5, 9643.0], [78.6, 9652.0], [78.7, 9664.0], [78.8, 9677.0], [78.9, 9684.0], [79.0, 9693.0], [79.1, 9704.0], [79.2, 9711.0], [79.3, 9720.0], [79.4, 9730.0], [79.5, 9738.0], [79.6, 9744.0], [79.7, 9750.0], [79.8, 9755.0], [79.9, 9765.0], [80.0, 9773.0], [80.1, 9784.0], [80.2, 9792.0], [80.3, 9801.0], [80.4, 9816.0], [80.5, 9829.0], [80.6, 9844.0], [80.7, 9851.0], [80.8, 9864.0], [80.9, 9873.0], [81.0, 9888.0], [81.1, 9902.0], [81.2, 9916.0], [81.3, 9930.0], [81.4, 9942.0], [81.5, 9956.0], [81.6, 9967.0], [81.7, 9978.0], [81.8, 9985.0], [81.9, 9992.0], [82.0, 10001.0], [82.1, 10012.0], [82.2, 10019.0], [82.3, 10025.0], [82.4, 10035.0], [82.5, 10043.0], [82.6, 10052.0], [82.7, 10064.0], [82.8, 10071.0], [82.9, 10083.0], [83.0, 10095.0], [83.1, 10104.0], [83.2, 10117.0], [83.3, 10129.0], [83.4, 10138.0], [83.5, 10151.0], [83.6, 10163.0], [83.7, 10174.0], [83.8, 10187.0], [83.9, 10194.0], [84.0, 10207.0], [84.1, 10217.0], [84.2, 10232.0], [84.3, 10240.0], [84.4, 10250.0], [84.5, 10261.0], [84.6, 10272.0], [84.7, 10282.0], [84.8, 10294.0], [84.9, 10305.0], [85.0, 10315.0], [85.1, 10329.0], [85.2, 10343.0], [85.3, 10362.0], [85.4, 10379.0], [85.5, 10403.0], [85.6, 10431.0], [85.7, 10450.0], [85.8, 10492.0], [85.9, 10523.0], [86.0, 10551.0], [86.1, 10589.0], [86.2, 10624.0], [86.3, 10648.0], [86.4, 10682.0], [86.5, 10699.0], [86.6, 10718.0], [86.7, 10731.0], [86.8, 10745.0], [86.9, 10758.0], [87.0, 10770.0], [87.1, 10788.0], [87.2, 10807.0], [87.3, 10817.0], [87.4, 10832.0], [87.5, 10846.0], [87.6, 10859.0], [87.7, 10877.0], [87.8, 10891.0], [87.9, 10903.0], [88.0, 10919.0], [88.1, 10934.0], [88.2, 10945.0], [88.3, 10956.0], [88.4, 10969.0], [88.5, 10985.0], [88.6, 11002.0], [88.7, 11017.0], [88.8, 11030.0], [88.9, 11048.0], [89.0, 11070.0], [89.1, 11085.0], [89.2, 11100.0], [89.3, 11127.0], [89.4, 11154.0], [89.5, 11181.0], [89.6, 11214.0], [89.7, 11244.0], [89.8, 11285.0], [89.9, 11324.0], [90.0, 11345.0], [90.1, 11373.0], [90.2, 11405.0], [90.3, 11432.0], [90.4, 11455.0], [90.5, 11468.0], [90.6, 11494.0], [90.7, 11514.0], [90.8, 11540.0], [90.9, 11562.0], [91.0, 11588.0], [91.1, 11604.0], [91.2, 11622.0], [91.3, 11635.0], [91.4, 11651.0], [91.5, 11662.0], [91.6, 11672.0], [91.7, 11684.0], [91.8, 11695.0], [91.9, 11703.0], [92.0, 11713.0], [92.1, 11725.0], [92.2, 11739.0], [92.3, 11749.0], [92.4, 11758.0], [92.5, 11774.0], [92.6, 11788.0], [92.7, 11798.0], [92.8, 11812.0], [92.9, 11823.0], [93.0, 11831.0], [93.1, 11841.0], [93.2, 11853.0], [93.3, 11866.0], [93.4, 11875.0], [93.5, 11888.0], [93.6, 11904.0], [93.7, 11916.0], [93.8, 11925.0], [93.9, 11933.0], [94.0, 11946.0], [94.1, 11958.0], [94.2, 11966.0], [94.3, 11973.0], [94.4, 11979.0], [94.5, 11991.0], [94.6, 12001.0], [94.7, 12006.0], [94.8, 12013.0], [94.9, 12026.0], [95.0, 12033.0], [95.1, 12040.0], [95.2, 12051.0], [95.3, 12063.0], [95.4, 12073.0], [95.5, 12081.0], [95.6, 12093.0], [95.7, 12104.0], [95.8, 12113.0], [95.9, 12129.0], [96.0, 12141.0], [96.1, 12151.0], [96.2, 12167.0], [96.3, 12178.0], [96.4, 12190.0], [96.5, 12204.0], [96.6, 12218.0], [96.7, 12235.0], [96.8, 12251.0], [96.9, 12267.0], [97.0, 12285.0], [97.1, 12304.0], [97.2, 12318.0], [97.3, 12335.0], [97.4, 12351.0], [97.5, 12365.0], [97.6, 12386.0], [97.7, 12398.0], [97.8, 12424.0], [97.9, 12445.0], [98.0, 12465.0], [98.1, 12484.0], [98.2, 12504.0], [98.3, 12532.0], [98.4, 12558.0], [98.5, 12595.0], [98.6, 12631.0], [98.7, 12691.0], [98.8, 12788.0], [98.9, 12932.0], [99.0, 13128.0], [99.1, 13893.0], [99.2, 14078.0], [99.3, 14554.0], [99.4, 15078.0], [99.5, 15477.0], [99.6, 17676.0], [99.7, 18673.0], [99.8, 19777.0], [99.9, 22840.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3230.0, "series": [{"data": [[0.0, 3230.0], [100.0, 253.0], [200.0, 227.0], [300.0, 239.0], [400.0, 175.0], [500.0, 97.0], [600.0, 72.0], [700.0, 63.0], [800.0, 56.0], [900.0, 41.0], [1000.0, 46.0], [1100.0, 126.0], [1200.0, 208.0], [1300.0, 367.0], [1400.0, 233.0], [1500.0, 235.0], [1600.0, 196.0], [1700.0, 203.0], [1800.0, 199.0], [1900.0, 149.0], [2000.0, 170.0], [2100.0, 209.0], [2200.0, 179.0], [2300.0, 157.0], [2400.0, 182.0], [2500.0, 188.0], [2600.0, 136.0], [2700.0, 167.0], [2800.0, 147.0], [2900.0, 143.0], [3000.0, 140.0], [3100.0, 126.0], [3200.0, 148.0], [3300.0, 171.0], [3400.0, 92.0], [3500.0, 105.0], [3600.0, 103.0], [3700.0, 143.0], [3800.0, 142.0], [3900.0, 123.0], [4000.0, 103.0], [4200.0, 107.0], [4100.0, 79.0], [4300.0, 109.0], [4400.0, 91.0], [4500.0, 151.0], [4600.0, 113.0], [4800.0, 130.0], [4700.0, 124.0], [4900.0, 103.0], [5000.0, 107.0], [5100.0, 122.0], [5300.0, 161.0], [5200.0, 111.0], [5600.0, 88.0], [5400.0, 67.0], [5500.0, 115.0], [5700.0, 117.0], [5800.0, 133.0], [6000.0, 49.0], [5900.0, 59.0], [6100.0, 55.0], [6200.0, 19.0], [6300.0, 32.0], [6400.0, 42.0], [6500.0, 44.0], [6600.0, 63.0], [6700.0, 51.0], [6800.0, 170.0], [6900.0, 251.0], [7000.0, 509.0], [7100.0, 651.0], [7200.0, 777.0], [7400.0, 589.0], [7300.0, 675.0], [7500.0, 426.0], [7600.0, 485.0], [7900.0, 294.0], [7700.0, 438.0], [7800.0, 336.0], [8100.0, 154.0], [8000.0, 224.0], [8200.0, 60.0], [8300.0, 21.0], [8400.0, 36.0], [8600.0, 50.0], [8700.0, 56.0], [8500.0, 38.0], [8800.0, 105.0], [8900.0, 56.0], [9100.0, 117.0], [9200.0, 223.0], [9000.0, 141.0], [9400.0, 279.0], [9300.0, 241.0], [9500.0, 276.0], [9700.0, 301.0], [9600.0, 233.0], [10000.0, 265.0], [10100.0, 227.0], [10200.0, 226.0], [9800.0, 204.0], [9900.0, 228.0], [10400.0, 85.0], [10300.0, 161.0], [10500.0, 77.0], [10600.0, 95.0], [10700.0, 167.0], [10800.0, 173.0], [11000.0, 151.0], [11100.0, 92.0], [10900.0, 183.0], [11200.0, 70.0], [11500.0, 112.0], [11700.0, 215.0], [11300.0, 86.0], [11400.0, 112.0], [11600.0, 196.0], [12000.0, 271.0], [12200.0, 152.0], [12100.0, 201.0], [11800.0, 217.0], [11900.0, 252.0], [12400.0, 118.0], [12500.0, 87.0], [12700.0, 23.0], [12300.0, 160.0], [12600.0, 48.0], [12900.0, 10.0], [13000.0, 15.0], [12800.0, 21.0], [13100.0, 6.0], [13200.0, 3.0], [13300.0, 2.0], [13800.0, 8.0], [13400.0, 2.0], [13500.0, 2.0], [13600.0, 5.0], [13700.0, 3.0], [13900.0, 12.0], [14000.0, 11.0], [14200.0, 6.0], [14300.0, 4.0], [14100.0, 6.0], [14800.0, 5.0], [14400.0, 8.0], [14500.0, 2.0], [14600.0, 4.0], [14700.0, 4.0], [15000.0, 5.0], [15200.0, 9.0], [15300.0, 5.0], [14900.0, 7.0], [15100.0, 5.0], [15600.0, 4.0], [15400.0, 6.0], [15500.0, 2.0], [15700.0, 2.0], [15800.0, 1.0], [15900.0, 2.0], [16000.0, 1.0], [16200.0, 3.0], [16600.0, 1.0], [17400.0, 2.0], [17600.0, 5.0], [18200.0, 2.0], [17800.0, 1.0], [18000.0, 3.0], [18400.0, 3.0], [18600.0, 6.0], [18800.0, 6.0], [19200.0, 2.0], [19400.0, 1.0], [19800.0, 2.0], [19600.0, 1.0], [20800.0, 1.0], [21000.0, 2.0], [21200.0, 2.0], [21400.0, 1.0], [23200.0, 3.0], [22800.0, 3.0], [23000.0, 2.0], [23400.0, 3.0], [23600.0, 1.0], [24200.0, 3.0], [27800.0, 1.0], [16700.0, 1.0], [18300.0, 2.0], [17500.0, 1.0], [17700.0, 2.0], [17900.0, 2.0], [18100.0, 2.0], [18500.0, 2.0], [18900.0, 1.0], [19300.0, 2.0], [19500.0, 5.0], [19700.0, 6.0], [19900.0, 2.0], [20300.0, 1.0], [20700.0, 2.0], [21100.0, 2.0], [21300.0, 2.0], [20900.0, 1.0], [21900.0, 3.0], [22900.0, 3.0], [23300.0, 4.0], [23100.0, 2.0], [22700.0, 2.0], [24300.0, 1.0], [24500.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 27800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1309.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 19662.0, "series": [{"data": [[0.0, 4126.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1309.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 19662.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 3.953488372093024, "minX": 1.69975872E12, "maxY": 200.0, "series": [{"data": [[1.69975872E12, 3.953488372093024], [1.69975968E12, 27.05660377358491], [1.69975938E12, 200.0], [1.69975908E12, 200.0], [1.69975878E12, 31.453661697990903], [1.69975944E12, 200.0], [1.69975914E12, 200.0], [1.69975884E12, 66.7402114889967], [1.6997595E12, 200.0], [1.6997592E12, 200.0], [1.6997589E12, 105.26621282694376], [1.69975956E12, 200.0], [1.69975926E12, 200.0], [1.69975896E12, 145.6063781321185], [1.69975962E12, 189.10862944162434], [1.69975932E12, 200.0], [1.69975902E12, 185.0812236286926]], "isOverall": false, "label": "bzm - Concurrency Thread Group (scenario 1 - load)-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69975968E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 18.69230769230769, "minX": 1.0, "maxY": 9044.468605619899, "series": [{"data": [[2.0, 3208.75], [3.0, 1603.5], [4.0, 1591.5], [5.0, 1102.6666666666667], [6.0, 1314.4], [7.0, 954.4285714285713], [8.0, 1336.1], [9.0, 741.0000000000001], [10.0, 940.7142857142858], [11.0, 552.2083333333334], [12.0, 18.69230769230769], [13.0, 927.7857142857142], [14.0, 774.0], [15.0, 427.3125], [16.0, 798.7647058823529], [17.0, 471.8275862068965], [18.0, 703.4736842105262], [19.0, 333.5609756097561], [20.0, 674.7368421052631], [21.0, 382.0857142857143], [22.0, 573.0416666666666], [23.0, 291.47916666666663], [24.0, 1087.0], [25.0, 516.9795918367347], [26.0, 541.1538461538462], [27.0, 270.94117647058823], [28.0, 991.28], [29.0, 454.14285714285717], [30.0, 490.3214285714286], [31.0, 262.51851851851853], [32.0, 363.53846153846155], [33.0, 251.3859649122807], [34.0, 373.1621621621622], [35.0, 212.3714285714286], [36.0, 398.16666666666663], [37.0, 208.06849315068493], [38.0, 361.48717948717945], [39.0, 199.6125], [40.0, 360.8974358974359], [41.0, 182.91666666666666], [42.0, 329.86046511627904], [43.0, 30.363636363636367], [44.0, 594.0], [45.0, 173.8387096774194], [46.0, 301.8125], [47.0, 171.62105263157898], [48.0, 309.9166666666667], [49.0, 166.38235294117646], [50.0, 46.000000000000014], [51.0, 287.5943396226415], [52.0, 297.33333333333337], [53.0, 159.94495412844037], [54.0, 267.375], [55.0, 160.13636363636365], [56.0, 285.8363636363636], [57.0, 159.23076923076925], [58.0, 274.4827586206897], [59.0, 161.78151260504202], [60.0, 249.4923076923077], [61.0, 162.81196581196582], [62.0, 266.3492063492064], [63.0, 163.416], [64.0, 252.97183098591552], [65.0, 164.50387596899225], [66.0, 275.9848484848485], [67.0, 301.31496062992125], [68.0, 445.21428571428584], [69.0, 458.0387596899225], [70.0, 641.5937499999999], [71.0, 634.3440000000004], [72.0, 1168.5538461538463], [73.0, 1089.3650793650795], [74.0, 1438.7457627118645], [75.0, 1342.6393442622948], [76.0, 1470.3898305084742], [77.0, 1373.2601626016258], [78.0, 1445.8135593220343], [79.0, 1404.5573770491803], [80.0, 1538.6909090909091], [81.0, 1478.9059829059831], [82.0, 1715.017857142857], [83.0, 1542.6315789473683], [84.0, 1589.9666666666667], [85.0, 1526.637931034483], [86.0, 1851.8571428571436], [87.0, 1646.8214285714291], [88.0, 1875.0357142857142], [89.0, 1737.542857142857], [90.0, 1904.0181818181818], [91.0, 1868.0188679245282], [92.0, 1898.5098039215688], [93.0, 1856.8878504672894], [94.0, 1995.2244897959183], [95.0, 1961.9326923076926], [96.0, 2127.5400000000004], [97.0, 1943.8282828282836], [98.0, 2406.3749999999995], [99.0, 2117.030303030303], [100.0, 2291.36], [101.0, 2149.432989690722], [102.0, 2449.0625], [103.0, 2112.1734693877556], [104.0, 2428.704545454545], [105.0, 2343.947916666666], [106.0, 2514.5], [107.0, 2476.8809523809527], [108.0, 2698.8936170212764], [109.0, 2478.236559139784], [110.0, 2569.666666666667], [111.0, 2506.1444444444433], [112.0, 2734.866666666667], [113.0, 2608.5555555555543], [114.0, 2753.568181818182], [115.0, 2651.0804597701153], [116.0, 2918.466666666667], [117.0, 2750.1839080459777], [118.0, 2946.431818181819], [119.0, 2941.690476190476], [120.0, 3107.7441860465115], [121.0, 2858.724137931034], [122.0, 3168.5], [123.0, 3017.5058823529416], [124.0, 3142.487804878049], [125.0, 3157.2261904761913], [126.0, 3221.0714285714284], [127.0, 3287.1282051282055], [128.0, 3295.1860465116283], [129.0, 3168.4500000000003], [130.0, 3418.5135135135138], [131.0, 3549.829268292683], [132.0, 3629.7804878048787], [133.0, 3172.113924050633], [134.0, 3492.475], [135.0, 3573.9750000000004], [136.0, 3510.0769230769233], [137.0, 3566.0], [138.0, 3812.9999999999995], [139.0, 3767.4864864864867], [140.0, 3909.9999999999995], [141.0, 3899.8630136986303], [142.0, 3979.666666666667], [143.0, 4033.8815789473683], [144.0, 3874.459459459459], [145.0, 3950.746666666667], [146.0, 4279.268292682927], [147.0, 3824.416666666667], [148.0, 4013.5897435897436], [149.0, 4161.371428571429], [150.0, 4703.4444444444425], [151.0, 4085.506666666668], [152.0, 4311.722222222223], [153.0, 4538.826666666669], [154.0, 4347.606060606062], [155.0, 4490.757142857142], [156.0, 4589.4285714285725], [157.0, 4618.458333333332], [158.0, 4773.971428571429], [159.0, 4561.169014084506], [160.0, 4967.805555555555], [161.0, 4753.940298507463], [162.0, 4897.444444444444], [163.0, 4795.705882352941], [164.0, 5096.472222222223], [165.0, 4786.958333333333], [166.0, 4796.588235294117], [167.0, 4745.907692307694], [168.0, 4739.833333333333], [169.0, 5035.084507042253], [170.0, 5423.25], [171.0, 5354.446153846153], [172.0, 4939.142857142857], [173.0, 5367.582089552239], [174.0, 5289.939393939395], [175.0, 5221.636363636365], [176.0, 5589.9444444444425], [177.0, 5496.115942028988], [178.0, 5565.235294117647], [179.0, 5427.20895522388], [180.0, 5182.742857142856], [181.0, 5381.046874999999], [182.0, 4866.028571428573], [183.0, 5580.746031746033], [184.0, 6054.514285714286], [185.0, 5979.370967741935], [186.0, 5738.114285714284], [187.0, 5818.09090909091], [188.0, 5711.000000000001], [189.0, 5749.16923076923], [190.0, 5770.828571428571], [191.0, 5853.484848484847], [192.0, 6541.212121212121], [193.0, 6086.276923076923], [194.0, 6152.129032258064], [195.0, 6037.774193548388], [196.0, 6261.062499999999], [197.0, 6125.859649122805], [198.0, 6447.53125], [199.0, 6791.491803278689], [200.0, 9044.468605619899], [1.0, 1864.857142857143]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[153.50814838426848, 5884.96995656849]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 311.31666666666666, "minX": 1.69975872E12, "maxY": 49133.916666666664, "series": [{"data": [[1.69975872E12, 603.8166666666667], [1.69975968E12, 744.3333333333334], [1.69975938E12, 17131.583333333332], [1.69975908E12, 22804.866666666665], [1.69975878E12, 21667.866666666665], [1.69975944E12, 16135.2], [1.69975914E12, 23141.866666666665], [1.69975884E12, 49133.916666666664], [1.6997595E12, 15025.083333333334], [1.6997592E12, 22524.483333333334], [1.6997589E12, 39192.26666666667], [1.69975956E12, 14126.566666666668], [1.69975926E12, 20908.716666666667], [1.69975896E12, 30823.283333333333], [1.69975962E12, 13832.066666666668], [1.69975932E12, 18002.466666666667], [1.69975902E12, 26624.45]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69975872E12, 311.31666666666666], [1.69975968E12, 383.81666666666666], [1.69975938E12, 8833.716666666667], [1.69975908E12, 11759.0], [1.69975878E12, 11172.733333333334], [1.69975944E12, 8319.75], [1.69975914E12, 11932.616666666667], [1.69975884E12, 25335.033333333333], [1.6997595E12, 7747.4], [1.6997592E12, 11614.366666666667], [1.6997589E12, 20208.833333333332], [1.69975956E12, 7284.25], [1.69975926E12, 10781.266666666666], [1.69975896E12, 15893.433333333332], [1.69975962E12, 7132.183333333333], [1.69975932E12, 9282.65], [1.69975902E12, 13728.516666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69975968E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 20.97674418604651, "minX": 1.69975872E12, "maxY": 13814.94339622642, "series": [{"data": [[1.69975872E12, 20.97674418604651], [1.69975968E12, 13814.94339622642], [1.69975938E12, 9816.984426229514], [1.69975908E12, 7407.256157635469], [1.69975878E12, 26.447828904731036], [1.69975944E12, 10371.36901653609], [1.69975914E12, 7294.12985436893], [1.69975884E12, 560.0394398399546], [1.6997595E12, 11076.130841121507], [1.6997592E12, 7444.22194513716], [1.6997589E12, 2234.8409172339666], [1.69975956E12, 11942.016898608359], [1.69975926E12, 7979.746138347877], [1.69975896E12, 3890.7375854214115], [1.69975962E12, 12051.896446700515], [1.69975932E12, 9295.979719188788], [1.69975902E12, 5677.425632911396]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69975968E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 20.62790697674419, "minX": 1.69975872E12, "maxY": 13812.73584905661, "series": [{"data": [[1.69975872E12, 20.62790697674419], [1.69975968E12, 13812.73584905661], [1.69975938E12, 9815.331147540968], [1.69975908E12, 7405.675492610835], [1.69975878E12, 26.29228775113411], [1.69975944E12, 10369.293298520455], [1.69975914E12, 7292.5885922330035], [1.69975884E12, 559.4681337525006], [1.6997595E12, 11074.034579439258], [1.6997592E12, 7442.789900249377], [1.6997589E12, 2233.8731637405917], [1.69975956E12, 11940.088469184893], [1.69975926E12, 7978.300873069179], [1.69975896E12, 3889.538496583142], [1.69975962E12, 12050.120812182744], [1.69975932E12, 9294.296411856469], [1.69975902E12, 5676.26529535865]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69975968E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.5094339622641508, "minX": 1.69975872E12, "maxY": 1.162790697674419, "series": [{"data": [[1.69975872E12, 1.162790697674419], [1.69975968E12, 0.5094339622641508], [1.69975938E12, 0.6827868852459016], [1.69975908E12, 0.6440886699507391], [1.69975878E12, 0.8794556059624117], [1.69975944E12, 0.6814621409921674], [1.69975914E12, 0.7499999999999998], [1.69975884E12, 0.7319234066876247], [1.6997595E12, 0.665420560747664], [1.6997592E12, 0.771820448877804], [1.6997589E12, 1.0390541024722328], [1.69975956E12, 0.6640159045725655], [1.69975926E12, 0.7528542646071191], [1.69975896E12, 1.0382687927107088], [1.69975962E12, 0.6467005076142125], [1.69975932E12, 0.7340093603744146], [1.69975902E12, 0.6529535864978899]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69975968E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.69975872E12, "maxY": 27834.0, "series": [{"data": [[1.69975872E12, 201.0], [1.69975968E12, 24529.0], [1.69975938E12, 27834.0], [1.69975908E12, 15688.0], [1.69975878E12, 104.0], [1.69975944E12, 21169.0], [1.69975914E12, 15078.0], [1.69975884E12, 4047.0], [1.6997595E12, 23352.0], [1.6997592E12, 20887.0], [1.6997589E12, 7937.0], [1.69975956E12, 23632.0], [1.69975926E12, 16624.0], [1.69975896E12, 11775.0], [1.69975962E12, 24398.0], [1.69975932E12, 18673.0], [1.69975902E12, 13854.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69975872E12, 29.200000000000003], [1.69975968E12, 13341.0], [1.69975938E12, 10230.400000000001], [1.69975908E12, 8183.0], [1.69975878E12, 45.0], [1.69975944E12, 11218.0], [1.69975914E12, 7640.1], [1.69975884E12, 1417.0], [1.6997595E12, 11809.6], [1.6997592E12, 7749.0], [1.6997589E12, 2917.0], [1.69975956E12, 12464.0], [1.69975926E12, 8469.0], [1.69975896E12, 4719.4], [1.69975962E12, 12484.4], [1.69975932E12, 9609.7], [1.69975902E12, 6866.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69975872E12, 201.0], [1.69975968E12, 24529.0], [1.69975938E12, 18831.8], [1.69975908E12, 14430.5], [1.69975878E12, 73.0], [1.69975944E12, 19658.0], [1.69975914E12, 14243.759999999998], [1.69975884E12, 2362.0], [1.6997595E12, 21232.76], [1.6997592E12, 14214.550000000005], [1.6997589E12, 4556.359999999999], [1.69975956E12, 12854.339999999993], [1.69975926E12, 15478.499999999998], [1.69975896E12, 8133.719999999997], [1.69975962E12, 22979.02], [1.69975932E12, 18166.270000000004], [1.69975902E12, 11325.409999999996]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69975872E12, 38.99999999999997], [1.69975968E12, 24273.8], [1.69975938E12, 10348.85], [1.69975908E12, 8749.5], [1.69975878E12, 56.0], [1.69975944E12, 11406.5], [1.69975914E12, 7733.0], [1.69975884E12, 1508.0], [1.6997595E12, 12314.9], [1.6997592E12, 7806.5], [1.6997589E12, 3048.4], [1.69975956E12, 12560.55], [1.69975926E12, 8817.0], [1.69975896E12, 4848.4], [1.69975962E12, 12634.8], [1.69975932E12, 9685.7], [1.69975902E12, 7136.599999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69975872E12, 9.0], [1.69975968E12, 12556.0], [1.69975938E12, 295.0], [1.69975908E12, 164.0], [1.69975878E12, 5.0], [1.69975944E12, 326.0], [1.69975914E12, 214.0], [1.69975884E12, 11.0], [1.6997595E12, 349.0], [1.6997592E12, 227.0], [1.6997589E12, 69.0], [1.69975956E12, 294.0], [1.69975926E12, 231.0], [1.69975896E12, 118.0], [1.69975962E12, 446.0], [1.69975932E12, 267.0], [1.69975902E12, 145.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69975872E12, 13.0], [1.69975968E12, 13005.0], [1.69975938E12, 9774.0], [1.69975908E12, 7254.0], [1.69975878E12, 25.0], [1.69975944E12, 10223.0], [1.69975914E12, 7297.0], [1.69975884E12, 153.0], [1.6997595E12, 10939.0], [1.6997592E12, 7450.5], [1.6997589E12, 2220.0], [1.69975956E12, 11983.0], [1.69975926E12, 7930.0], [1.69975896E12, 3874.0], [1.69975962E12, 12010.0], [1.69975932E12, 9314.5], [1.69975902E12, 5584.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69975968E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 11.0, "minX": 3.0, "maxY": 11973.0, "series": [{"data": [[3.0, 26.0], [4.0, 11.0], [5.0, 17.0], [6.0, 18.0], [7.0, 14.5], [8.0, 20.5], [9.0, 14.0], [11.0, 15.0], [12.0, 6114.0], [13.0, 11762.0], [14.0, 11024.5], [15.0, 11973.0], [16.0, 11951.5], [17.0, 11718.5], [18.0, 11070.0], [19.0, 10209.0], [20.0, 9930.5], [21.0, 9582.5], [22.0, 9550.0], [23.0, 8998.0], [24.0, 7859.0], [25.0, 7607.0], [26.0, 7475.0], [27.0, 7394.0], [28.0, 7266.5], [29.0, 7162.0], [30.0, 7095.5], [31.0, 5922.0], [33.0, 5098.0], [32.0, 5598.5], [34.0, 4819.0], [35.0, 4539.0], [37.0, 3935.0], [36.0, 4093.5], [38.0, 3606.0], [39.0, 3149.0], [41.0, 2781.5], [40.0, 3090.5], [43.0, 2712.0], [42.0, 2691.0], [45.0, 104.0], [44.0, 2506.5], [46.0, 2008.0], [47.0, 2103.0], [48.0, 2026.5], [49.0, 52.0], [51.0, 1775.0], [50.0, 210.0], [53.0, 1541.0], [52.0, 57.5], [55.0, 58.0], [54.0, 1616.5], [57.0, 1281.0], [56.0, 144.5], [58.0, 702.5], [59.0, 1140.0], [61.0, 159.0], [60.0, 1352.5], [62.0, 407.5], [63.0, 107.5], [65.0, 178.0], [66.0, 212.5], [64.0, 867.5], [68.0, 178.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 68.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 11.0, "minX": 3.0, "maxY": 11972.5, "series": [{"data": [[3.0, 25.0], [4.0, 11.0], [5.0, 17.0], [6.0, 17.5], [7.0, 14.5], [8.0, 20.0], [9.0, 14.0], [11.0, 15.0], [12.0, 6113.5], [13.0, 11761.0], [14.0, 11020.0], [15.0, 11972.5], [16.0, 11949.5], [17.0, 11716.5], [18.0, 11068.5], [19.0, 10208.0], [20.0, 9929.5], [21.0, 9578.5], [22.0, 9550.0], [23.0, 8998.0], [24.0, 7859.0], [25.0, 7601.0], [26.0, 7474.0], [27.0, 7393.0], [28.0, 7263.5], [29.0, 7161.0], [30.0, 7095.0], [31.0, 5922.0], [33.0, 5096.0], [32.0, 5596.0], [34.0, 4816.5], [35.0, 4539.0], [37.0, 3934.0], [36.0, 4091.5], [38.0, 3605.0], [39.0, 3149.0], [41.0, 2781.5], [40.0, 3090.5], [43.0, 2711.0], [42.0, 2691.0], [45.0, 104.0], [44.0, 2506.0], [46.0, 2008.0], [47.0, 2102.0], [48.0, 2026.5], [49.0, 52.0], [51.0, 1773.0], [50.0, 209.5], [53.0, 1540.0], [52.0, 56.5], [55.0, 58.0], [54.0, 1614.0], [57.0, 1279.0], [56.0, 144.0], [58.0, 702.0], [59.0, 1140.0], [61.0, 158.0], [60.0, 1352.5], [62.0, 403.5], [63.0, 106.5], [65.0, 178.0], [66.0, 212.5], [64.0, 867.5], [68.0, 177.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 68.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.7166666666666667, "minX": 1.69975872E12, "maxY": 59.666666666666664, "series": [{"data": [[1.69975872E12, 0.7166666666666667], [1.69975938E12, 20.333333333333332], [1.69975908E12, 27.066666666666666], [1.69975878E12, 25.75], [1.69975944E12, 19.15], [1.69975914E12, 27.466666666666665], [1.69975884E12, 59.666666666666664], [1.6997595E12, 17.833333333333332], [1.6997592E12, 26.733333333333334], [1.6997589E12, 47.233333333333334], [1.69975956E12, 16.766666666666666], [1.69975926E12, 24.816666666666666], [1.69975896E12, 37.25], [1.69975962E12, 13.966666666666667], [1.69975932E12, 21.366666666666667], [1.69975902E12, 32.166666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69975962E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.7166666666666667, "minX": 1.69975872E12, "maxY": 58.31666666666667, "series": [{"data": [[1.69975872E12, 0.7166666666666667], [1.69975968E12, 0.8833333333333333], [1.69975938E12, 20.333333333333332], [1.69975908E12, 27.066666666666666], [1.69975878E12, 25.716666666666665], [1.69975944E12, 19.15], [1.69975914E12, 27.466666666666665], [1.69975884E12, 58.31666666666667], [1.6997595E12, 17.833333333333332], [1.6997592E12, 26.733333333333334], [1.6997589E12, 46.516666666666666], [1.69975956E12, 16.766666666666666], [1.69975926E12, 24.816666666666666], [1.69975896E12, 36.583333333333336], [1.69975962E12, 16.416666666666668], [1.69975932E12, 21.366666666666667], [1.69975902E12, 31.6]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69975968E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.7166666666666667, "minX": 1.69975872E12, "maxY": 58.31666666666667, "series": [{"data": [[1.69975872E12, 0.7166666666666667], [1.69975968E12, 0.8833333333333333], [1.69975938E12, 20.333333333333332], [1.69975908E12, 27.066666666666666], [1.69975878E12, 25.716666666666665], [1.69975944E12, 19.15], [1.69975914E12, 27.466666666666665], [1.69975884E12, 58.31666666666667], [1.6997595E12, 17.833333333333332], [1.6997592E12, 26.733333333333334], [1.6997589E12, 46.516666666666666], [1.69975956E12, 16.766666666666666], [1.69975926E12, 24.816666666666666], [1.69975896E12, 36.583333333333336], [1.69975962E12, 16.416666666666668], [1.69975932E12, 21.366666666666667], [1.69975902E12, 31.6]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69975968E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.7166666666666667, "minX": 1.69975872E12, "maxY": 58.31666666666667, "series": [{"data": [[1.69975872E12, 0.7166666666666667], [1.69975968E12, 0.8833333333333333], [1.69975938E12, 20.333333333333332], [1.69975908E12, 27.066666666666666], [1.69975878E12, 25.716666666666665], [1.69975944E12, 19.15], [1.69975914E12, 27.466666666666665], [1.69975884E12, 58.31666666666667], [1.6997595E12, 17.833333333333332], [1.6997592E12, 26.733333333333334], [1.6997589E12, 46.516666666666666], [1.69975956E12, 16.766666666666666], [1.69975926E12, 24.816666666666666], [1.69975896E12, 36.583333333333336], [1.69975962E12, 16.416666666666668], [1.69975932E12, 21.366666666666667], [1.69975902E12, 31.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69975968E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

