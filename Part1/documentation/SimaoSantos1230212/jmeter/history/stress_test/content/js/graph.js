/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "maxY": 41012.0, "series": [{"data": [[0.0, 5.0], [0.1, 6.0], [0.2, 7.0], [0.3, 8.0], [0.4, 8.0], [0.5, 8.0], [0.6, 9.0], [0.7, 9.0], [0.8, 9.0], [0.9, 9.0], [1.0, 10.0], [1.1, 10.0], [1.2, 10.0], [1.3, 10.0], [1.4, 11.0], [1.5, 11.0], [1.6, 11.0], [1.7, 12.0], [1.8, 12.0], [1.9, 12.0], [2.0, 13.0], [2.1, 13.0], [2.2, 13.0], [2.3, 14.0], [2.4, 14.0], [2.5, 14.0], [2.6, 15.0], [2.7, 15.0], [2.8, 16.0], [2.9, 16.0], [3.0, 16.0], [3.1, 17.0], [3.2, 17.0], [3.3, 18.0], [3.4, 18.0], [3.5, 19.0], [3.6, 20.0], [3.7, 20.0], [3.8, 21.0], [3.9, 21.0], [4.0, 22.0], [4.1, 22.0], [4.2, 23.0], [4.3, 24.0], [4.4, 25.0], [4.5, 25.0], [4.6, 26.0], [4.7, 26.0], [4.8, 27.0], [4.9, 27.0], [5.0, 28.0], [5.1, 29.0], [5.2, 30.0], [5.3, 30.0], [5.4, 31.0], [5.5, 32.0], [5.6, 33.0], [5.7, 34.0], [5.8, 35.0], [5.9, 35.0], [6.0, 37.0], [6.1, 38.0], [6.2, 39.0], [6.3, 40.0], [6.4, 41.0], [6.5, 42.0], [6.6, 42.0], [6.7, 43.0], [6.8, 45.0], [6.9, 45.0], [7.0, 46.0], [7.1, 47.0], [7.2, 49.0], [7.3, 50.0], [7.4, 51.0], [7.5, 52.0], [7.6, 53.0], [7.7, 54.0], [7.8, 55.0], [7.9, 56.0], [8.0, 58.0], [8.1, 59.0], [8.2, 61.0], [8.3, 63.0], [8.4, 65.0], [8.5, 67.0], [8.6, 68.0], [8.7, 70.0], [8.8, 72.0], [8.9, 75.0], [9.0, 78.0], [9.1, 80.0], [9.2, 85.0], [9.3, 91.0], [9.4, 96.0], [9.5, 100.0], [9.6, 106.0], [9.7, 117.0], [9.8, 127.0], [9.9, 139.0], [10.0, 163.0], [10.1, 186.0], [10.2, 202.0], [10.3, 218.0], [10.4, 232.0], [10.5, 248.0], [10.6, 256.0], [10.7, 271.0], [10.8, 280.0], [10.9, 294.0], [11.0, 311.0], [11.1, 323.0], [11.2, 335.0], [11.3, 353.0], [11.4, 370.0], [11.5, 387.0], [11.6, 409.0], [11.7, 428.0], [11.8, 453.0], [11.9, 476.0], [12.0, 516.0], [12.1, 543.0], [12.2, 576.0], [12.3, 604.0], [12.4, 650.0], [12.5, 684.0], [12.6, 734.0], [12.7, 798.0], [12.8, 838.0], [12.9, 892.0], [13.0, 975.0], [13.1, 1036.0], [13.2, 1081.0], [13.3, 1146.0], [13.4, 1214.0], [13.5, 1263.0], [13.6, 1343.0], [13.7, 1393.0], [13.8, 1425.0], [13.9, 1454.0], [14.0, 1476.0], [14.1, 1492.0], [14.2, 1503.0], [14.3, 1517.0], [14.4, 1528.0], [14.5, 1544.0], [14.6, 1558.0], [14.7, 1579.0], [14.8, 1596.0], [14.9, 1613.0], [15.0, 1626.0], [15.1, 1634.0], [15.2, 1646.0], [15.3, 1662.0], [15.4, 1679.0], [15.5, 1693.0], [15.6, 1718.0], [15.7, 1738.0], [15.8, 1754.0], [15.9, 1771.0], [16.0, 1782.0], [16.1, 1804.0], [16.2, 1820.0], [16.3, 1839.0], [16.4, 1858.0], [16.5, 1872.0], [16.6, 1887.0], [16.7, 1898.0], [16.8, 1914.0], [16.9, 1930.0], [17.0, 1949.0], [17.1, 1967.0], [17.2, 1994.0], [17.3, 2016.0], [17.4, 2035.0], [17.5, 2053.0], [17.6, 2070.0], [17.7, 2087.0], [17.8, 2103.0], [17.9, 2120.0], [18.0, 2137.0], [18.1, 2155.0], [18.2, 2183.0], [18.3, 2196.0], [18.4, 2212.0], [18.5, 2227.0], [18.6, 2247.0], [18.7, 2265.0], [18.8, 2294.0], [18.9, 2318.0], [19.0, 2340.0], [19.1, 2371.0], [19.2, 2406.0], [19.3, 2449.0], [19.4, 2480.0], [19.5, 2529.0], [19.6, 2557.0], [19.7, 2585.0], [19.8, 2602.0], [19.9, 2629.0], [20.0, 2654.0], [20.1, 2683.0], [20.2, 2702.0], [20.3, 2719.0], [20.4, 2735.0], [20.5, 2752.0], [20.6, 2772.0], [20.7, 2784.0], [20.8, 2805.0], [20.9, 2825.0], [21.0, 2837.0], [21.1, 2851.0], [21.2, 2870.0], [21.3, 2885.0], [21.4, 2902.0], [21.5, 2913.0], [21.6, 2923.0], [21.7, 2942.0], [21.8, 2954.0], [21.9, 2967.0], [22.0, 2981.0], [22.1, 3002.0], [22.2, 3022.0], [22.3, 3040.0], [22.4, 3055.0], [22.5, 3084.0], [22.6, 3113.0], [22.7, 3137.0], [22.8, 3161.0], [22.9, 3188.0], [23.0, 3201.0], [23.1, 3217.0], [23.2, 3232.0], [23.3, 3247.0], [23.4, 3261.0], [23.5, 3281.0], [23.6, 3299.0], [23.7, 3321.0], [23.8, 3340.0], [23.9, 3355.0], [24.0, 3370.0], [24.1, 3383.0], [24.2, 3397.0], [24.3, 3412.0], [24.4, 3432.0], [24.5, 3444.0], [24.6, 3472.0], [24.7, 3514.0], [24.8, 3548.0], [24.9, 3598.0], [25.0, 3643.0], [25.1, 3683.0], [25.2, 3725.0], [25.3, 3753.0], [25.4, 3808.0], [25.5, 3843.0], [25.6, 3867.0], [25.7, 3912.0], [25.8, 3948.0], [25.9, 3972.0], [26.0, 3997.0], [26.1, 4026.0], [26.2, 4047.0], [26.3, 4063.0], [26.4, 4093.0], [26.5, 4116.0], [26.6, 4141.0], [26.7, 4162.0], [26.8, 4174.0], [26.9, 4196.0], [27.0, 4219.0], [27.1, 4241.0], [27.2, 4259.0], [27.3, 4303.0], [27.4, 4352.0], [27.5, 4379.0], [27.6, 4404.0], [27.7, 4430.0], [27.8, 4461.0], [27.9, 4494.0], [28.0, 4526.0], [28.1, 4556.0], [28.2, 4576.0], [28.3, 4596.0], [28.4, 4610.0], [28.5, 4633.0], [28.6, 4662.0], [28.7, 4714.0], [28.8, 4764.0], [28.9, 4846.0], [29.0, 4905.0], [29.1, 4959.0], [29.2, 5000.0], [29.3, 5035.0], [29.4, 5076.0], [29.5, 5097.0], [29.6, 5131.0], [29.7, 5164.0], [29.8, 5196.0], [29.9, 5213.0], [30.0, 5238.0], [30.1, 5264.0], [30.2, 5283.0], [30.3, 5305.0], [30.4, 5337.0], [30.5, 5362.0], [30.6, 5393.0], [30.7, 5433.0], [30.8, 5489.0], [30.9, 5531.0], [31.0, 5578.0], [31.1, 5618.0], [31.2, 5662.0], [31.3, 5711.0], [31.4, 5775.0], [31.5, 5818.0], [31.6, 5875.0], [31.7, 5925.0], [31.8, 5967.0], [31.9, 6052.0], [32.0, 6133.0], [32.1, 6208.0], [32.2, 6258.0], [32.3, 6304.0], [32.4, 6344.0], [32.5, 6383.0], [32.6, 6425.0], [32.7, 6454.0], [32.8, 6483.0], [32.9, 6523.0], [33.0, 6556.0], [33.1, 6599.0], [33.2, 6650.0], [33.3, 6726.0], [33.4, 6826.0], [33.5, 6926.0], [33.6, 7011.0], [33.7, 7074.0], [33.8, 7114.0], [33.9, 7152.0], [34.0, 7183.0], [34.1, 7218.0], [34.2, 7235.0], [34.3, 7250.0], [34.4, 7281.0], [34.5, 7306.0], [34.6, 7341.0], [34.7, 7357.0], [34.8, 7381.0], [34.9, 7397.0], [35.0, 7420.0], [35.1, 7443.0], [35.2, 7468.0], [35.3, 7498.0], [35.4, 7526.0], [35.5, 7567.0], [35.6, 7597.0], [35.7, 7627.0], [35.8, 7651.0], [35.9, 7685.0], [36.0, 7720.0], [36.1, 7761.0], [36.2, 7814.0], [36.3, 7861.0], [36.4, 7912.0], [36.5, 7942.0], [36.6, 7968.0], [36.7, 7999.0], [36.8, 8041.0], [36.9, 8074.0], [37.0, 8106.0], [37.1, 8141.0], [37.2, 8174.0], [37.3, 8196.0], [37.4, 8228.0], [37.5, 8264.0], [37.6, 8289.0], [37.7, 8310.0], [37.8, 8338.0], [37.9, 8378.0], [38.0, 8420.0], [38.1, 8456.0], [38.2, 8514.0], [38.3, 8570.0], [38.4, 8632.0], [38.5, 8706.0], [38.6, 8761.0], [38.7, 8811.0], [38.8, 8848.0], [38.9, 8892.0], [39.0, 8926.0], [39.1, 8955.0], [39.2, 8989.0], [39.3, 9017.0], [39.4, 9059.0], [39.5, 9088.0], [39.6, 9112.0], [39.7, 9147.0], [39.8, 9174.0], [39.9, 9210.0], [40.0, 9241.0], [40.1, 9272.0], [40.2, 9301.0], [40.3, 9330.0], [40.4, 9359.0], [40.5, 9387.0], [40.6, 9415.0], [40.7, 9437.0], [40.8, 9472.0], [40.9, 9523.0], [41.0, 9562.0], [41.1, 9593.0], [41.2, 9633.0], [41.3, 9661.0], [41.4, 9689.0], [41.5, 9733.0], [41.6, 9773.0], [41.7, 9820.0], [41.8, 9863.0], [41.9, 9906.0], [42.0, 9945.0], [42.1, 9993.0], [42.2, 10051.0], [42.3, 10088.0], [42.4, 10140.0], [42.5, 10179.0], [42.6, 10231.0], [42.7, 10288.0], [42.8, 10341.0], [42.9, 10369.0], [43.0, 10394.0], [43.1, 10420.0], [43.2, 10440.0], [43.3, 10460.0], [43.4, 10489.0], [43.5, 10522.0], [43.6, 10547.0], [43.7, 10562.0], [43.8, 10587.0], [43.9, 10599.0], [44.0, 10625.0], [44.1, 10641.0], [44.2, 10658.0], [44.3, 10682.0], [44.4, 10712.0], [44.5, 10737.0], [44.6, 10781.0], [44.7, 10845.0], [44.8, 10889.0], [44.9, 10958.0], [45.0, 11022.0], [45.1, 11080.0], [45.2, 11180.0], [45.3, 11236.0], [45.4, 11326.0], [45.5, 11390.0], [45.6, 11483.0], [45.7, 11542.0], [45.8, 11624.0], [45.9, 11716.0], [46.0, 11788.0], [46.1, 11871.0], [46.2, 11965.0], [46.3, 12019.0], [46.4, 12099.0], [46.5, 12190.0], [46.6, 12247.0], [46.7, 12336.0], [46.8, 12366.0], [46.9, 12418.0], [47.0, 12463.0], [47.1, 12498.0], [47.2, 12526.0], [47.3, 12549.0], [47.4, 12588.0], [47.5, 12638.0], [47.6, 12669.0], [47.7, 12724.0], [47.8, 12754.0], [47.9, 12825.0], [48.0, 12900.0], [48.1, 12986.0], [48.2, 13040.0], [48.3, 13113.0], [48.4, 13207.0], [48.5, 13302.0], [48.6, 13456.0], [48.7, 13532.0], [48.8, 13670.0], [48.9, 13753.0], [49.0, 13859.0], [49.1, 13923.0], [49.2, 13966.0], [49.3, 14012.0], [49.4, 14051.0], [49.5, 14088.0], [49.6, 14106.0], [49.7, 14138.0], [49.8, 14165.0], [49.9, 14193.0], [50.0, 14220.0], [50.1, 14245.0], [50.2, 14264.0], [50.3, 14284.0], [50.4, 14305.0], [50.5, 14327.0], [50.6, 14373.0], [50.7, 14396.0], [50.8, 14416.0], [50.9, 14437.0], [51.0, 14457.0], [51.1, 14487.0], [51.2, 14522.0], [51.3, 14563.0], [51.4, 14599.0], [51.5, 14638.0], [51.6, 14668.0], [51.7, 14729.0], [51.8, 14792.0], [51.9, 14819.0], [52.0, 14843.0], [52.1, 14875.0], [52.2, 14918.0], [52.3, 14957.0], [52.4, 15002.0], [52.5, 15027.0], [52.6, 15049.0], [52.7, 15080.0], [52.8, 15126.0], [52.9, 15154.0], [53.0, 15192.0], [53.1, 15227.0], [53.2, 15285.0], [53.3, 15390.0], [53.4, 15662.0], [53.5, 16089.0], [53.6, 16410.0], [53.7, 16552.0], [53.8, 16663.0], [53.9, 16709.0], [54.0, 16736.0], [54.1, 16769.0], [54.2, 16807.0], [54.3, 16834.0], [54.4, 16860.0], [54.5, 16879.0], [54.6, 16899.0], [54.7, 16923.0], [54.8, 16936.0], [54.9, 16959.0], [55.0, 16974.0], [55.1, 16988.0], [55.2, 17004.0], [55.3, 17015.0], [55.4, 17030.0], [55.5, 17041.0], [55.6, 17053.0], [55.7, 17063.0], [55.8, 17074.0], [55.9, 17082.0], [56.0, 17089.0], [56.1, 17097.0], [56.2, 17103.0], [56.3, 17117.0], [56.4, 17125.0], [56.5, 17132.0], [56.6, 17140.0], [56.7, 17147.0], [56.8, 17156.0], [56.9, 17165.0], [57.0, 17170.0], [57.1, 17176.0], [57.2, 17182.0], [57.3, 17190.0], [57.4, 17197.0], [57.5, 17201.0], [57.6, 17210.0], [57.7, 17218.0], [57.8, 17224.0], [57.9, 17231.0], [58.0, 17237.0], [58.1, 17245.0], [58.2, 17251.0], [58.3, 17257.0], [58.4, 17265.0], [58.5, 17273.0], [58.6, 17280.0], [58.7, 17286.0], [58.8, 17294.0], [58.9, 17299.0], [59.0, 17305.0], [59.1, 17312.0], [59.2, 17320.0], [59.3, 17326.0], [59.4, 17336.0], [59.5, 17346.0], [59.6, 17353.0], [59.7, 17361.0], [59.8, 17368.0], [59.9, 17376.0], [60.0, 17385.0], [60.1, 17392.0], [60.2, 17399.0], [60.3, 17405.0], [60.4, 17410.0], [60.5, 17418.0], [60.6, 17423.0], [60.7, 17429.0], [60.8, 17434.0], [60.9, 17442.0], [61.0, 17450.0], [61.1, 17457.0], [61.2, 17464.0], [61.3, 17469.0], [61.4, 17476.0], [61.5, 17482.0], [61.6, 17489.0], [61.7, 17495.0], [61.8, 17502.0], [61.9, 17508.0], [62.0, 17514.0], [62.1, 17520.0], [62.2, 17529.0], [62.3, 17536.0], [62.4, 17546.0], [62.5, 17552.0], [62.6, 17559.0], [62.7, 17566.0], [62.8, 17574.0], [62.9, 17581.0], [63.0, 17590.0], [63.1, 17599.0], [63.2, 17612.0], [63.3, 17624.0], [63.4, 17637.0], [63.5, 17650.0], [63.6, 17670.0], [63.7, 17688.0], [63.8, 17705.0], [63.9, 17719.0], [64.0, 17737.0], [64.1, 17750.0], [64.2, 17761.0], [64.3, 17776.0], [64.4, 17801.0], [64.5, 17815.0], [64.6, 17826.0], [64.7, 17841.0], [64.8, 17854.0], [64.9, 17864.0], [65.0, 17875.0], [65.1, 17888.0], [65.2, 17897.0], [65.3, 17908.0], [65.4, 17918.0], [65.5, 17929.0], [65.6, 17936.0], [65.7, 17944.0], [65.8, 17954.0], [65.9, 17962.0], [66.0, 17973.0], [66.1, 17980.0], [66.2, 17989.0], [66.3, 17998.0], [66.4, 18006.0], [66.5, 18016.0], [66.6, 18023.0], [66.7, 18029.0], [66.8, 18036.0], [66.9, 18044.0], [67.0, 18052.0], [67.1, 18059.0], [67.2, 18065.0], [67.3, 18072.0], [67.4, 18078.0], [67.5, 18085.0], [67.6, 18091.0], [67.7, 18097.0], [67.8, 18103.0], [67.9, 18110.0], [68.0, 18114.0], [68.1, 18120.0], [68.2, 18128.0], [68.3, 18132.0], [68.4, 18137.0], [68.5, 18145.0], [68.6, 18151.0], [68.7, 18157.0], [68.8, 18164.0], [68.9, 18169.0], [69.0, 18174.0], [69.1, 18179.0], [69.2, 18189.0], [69.3, 18193.0], [69.4, 18199.0], [69.5, 18207.0], [69.6, 18212.0], [69.7, 18218.0], [69.8, 18225.0], [69.9, 18231.0], [70.0, 18237.0], [70.1, 18241.0], [70.2, 18249.0], [70.3, 18257.0], [70.4, 18262.0], [70.5, 18268.0], [70.6, 18274.0], [70.7, 18279.0], [70.8, 18287.0], [70.9, 18293.0], [71.0, 18299.0], [71.1, 18307.0], [71.2, 18312.0], [71.3, 18318.0], [71.4, 18324.0], [71.5, 18327.0], [71.6, 18330.0], [71.7, 18335.0], [71.8, 18340.0], [71.9, 18346.0], [72.0, 18353.0], [72.1, 18361.0], [72.2, 18365.0], [72.3, 18372.0], [72.4, 18380.0], [72.5, 18385.0], [72.6, 18392.0], [72.7, 18397.0], [72.8, 18402.0], [72.9, 18408.0], [73.0, 18413.0], [73.1, 18418.0], [73.2, 18423.0], [73.3, 18428.0], [73.4, 18433.0], [73.5, 18440.0], [73.6, 18447.0], [73.7, 18452.0], [73.8, 18457.0], [73.9, 18463.0], [74.0, 18471.0], [74.1, 18477.0], [74.2, 18481.0], [74.3, 18489.0], [74.4, 18497.0], [74.5, 18506.0], [74.6, 18514.0], [74.7, 18520.0], [74.8, 18529.0], [74.9, 18538.0], [75.0, 18545.0], [75.1, 18553.0], [75.2, 18561.0], [75.3, 18571.0], [75.4, 18578.0], [75.5, 18586.0], [75.6, 18596.0], [75.7, 18603.0], [75.8, 18612.0], [75.9, 18621.0], [76.0, 18627.0], [76.1, 18633.0], [76.2, 18643.0], [76.3, 18651.0], [76.4, 18658.0], [76.5, 18667.0], [76.6, 18676.0], [76.7, 18683.0], [76.8, 18692.0], [76.9, 18701.0], [77.0, 18709.0], [77.1, 18714.0], [77.2, 18721.0], [77.3, 18731.0], [77.4, 18739.0], [77.5, 18747.0], [77.6, 18756.0], [77.7, 18765.0], [77.8, 18774.0], [77.9, 18784.0], [78.0, 18790.0], [78.1, 18797.0], [78.2, 18809.0], [78.3, 18822.0], [78.4, 18834.0], [78.5, 18841.0], [78.6, 18849.0], [78.7, 18861.0], [78.8, 18873.0], [78.9, 18883.0], [79.0, 18893.0], [79.1, 18908.0], [79.2, 18919.0], [79.3, 18927.0], [79.4, 18938.0], [79.5, 18951.0], [79.6, 18965.0], [79.7, 18979.0], [79.8, 18991.0], [79.9, 19004.0], [80.0, 19019.0], [80.1, 19033.0], [80.2, 19045.0], [80.3, 19065.0], [80.4, 19078.0], [80.5, 19096.0], [80.6, 19113.0], [80.7, 19137.0], [80.8, 19152.0], [80.9, 19173.0], [81.0, 19192.0], [81.1, 19208.0], [81.2, 19222.0], [81.3, 19242.0], [81.4, 19259.0], [81.5, 19274.0], [81.6, 19290.0], [81.7, 19314.0], [81.8, 19332.0], [81.9, 19345.0], [82.0, 19366.0], [82.1, 19387.0], [82.2, 19399.0], [82.3, 19416.0], [82.4, 19438.0], [82.5, 19457.0], [82.6, 19471.0], [82.7, 19482.0], [82.8, 19501.0], [82.9, 19512.0], [83.0, 19531.0], [83.1, 19546.0], [83.2, 19562.0], [83.3, 19573.0], [83.4, 19590.0], [83.5, 19604.0], [83.6, 19621.0], [83.7, 19636.0], [83.8, 19655.0], [83.9, 19665.0], [84.0, 19685.0], [84.1, 19701.0], [84.2, 19721.0], [84.3, 19737.0], [84.4, 19759.0], [84.5, 19778.0], [84.6, 19803.0], [84.7, 19822.0], [84.8, 19843.0], [84.9, 19866.0], [85.0, 19901.0], [85.1, 19941.0], [85.2, 19975.0], [85.3, 19997.0], [85.4, 20027.0], [85.5, 20046.0], [85.6, 20088.0], [85.7, 20125.0], [85.8, 20150.0], [85.9, 20182.0], [86.0, 20202.0], [86.1, 20228.0], [86.2, 20250.0], [86.3, 20269.0], [86.4, 20296.0], [86.5, 20323.0], [86.6, 20351.0], [86.7, 20384.0], [86.8, 20417.0], [86.9, 20444.0], [87.0, 20459.0], [87.1, 20473.0], [87.2, 20498.0], [87.3, 20527.0], [87.4, 20549.0], [87.5, 20579.0], [87.6, 20614.0], [87.7, 20639.0], [87.8, 20672.0], [87.9, 20696.0], [88.0, 20720.0], [88.1, 20738.0], [88.2, 20755.0], [88.3, 20773.0], [88.4, 20796.0], [88.5, 20811.0], [88.6, 20827.0], [88.7, 20839.0], [88.8, 20853.0], [88.9, 20869.0], [89.0, 20885.0], [89.1, 20897.0], [89.2, 20913.0], [89.3, 20931.0], [89.4, 20947.0], [89.5, 20959.0], [89.6, 20978.0], [89.7, 20990.0], [89.8, 21003.0], [89.9, 21015.0], [90.0, 21028.0], [90.1, 21040.0], [90.2, 21058.0], [90.3, 21075.0], [90.4, 21096.0], [90.5, 21110.0], [90.6, 21131.0], [90.7, 21142.0], [90.8, 21153.0], [90.9, 21171.0], [91.0, 21187.0], [91.1, 21214.0], [91.2, 21242.0], [91.3, 21268.0], [91.4, 21293.0], [91.5, 21315.0], [91.6, 21339.0], [91.7, 21360.0], [91.8, 21376.0], [91.9, 21400.0], [92.0, 21413.0], [92.1, 21434.0], [92.2, 21449.0], [92.3, 21463.0], [92.4, 21478.0], [92.5, 21489.0], [92.6, 21505.0], [92.7, 21522.0], [92.8, 21542.0], [92.9, 21555.0], [93.0, 21566.0], [93.1, 21583.0], [93.2, 21596.0], [93.3, 21615.0], [93.4, 21634.0], [93.5, 21648.0], [93.6, 21663.0], [93.7, 21677.0], [93.8, 21693.0], [93.9, 21707.0], [94.0, 21725.0], [94.1, 21739.0], [94.2, 21755.0], [94.3, 21766.0], [94.4, 21779.0], [94.5, 21794.0], [94.6, 21806.0], [94.7, 21818.0], [94.8, 21832.0], [94.9, 21855.0], [95.0, 21873.0], [95.1, 21894.0], [95.2, 21923.0], [95.3, 21961.0], [95.4, 22006.0], [95.5, 22089.0], [95.6, 22206.0], [95.7, 22300.0], [95.8, 22401.0], [95.9, 22532.0], [96.0, 22650.0], [96.1, 22786.0], [96.2, 22930.0], [96.3, 23059.0], [96.4, 23148.0], [96.5, 23219.0], [96.6, 23287.0], [96.7, 23354.0], [96.8, 23462.0], [96.9, 23567.0], [97.0, 23778.0], [97.1, 24375.0], [97.2, 24961.0], [97.3, 25183.0], [97.4, 25299.0], [97.5, 25434.0], [97.6, 25526.0], [97.7, 25681.0], [97.8, 25819.0], [97.9, 26002.0], [98.0, 26227.0], [98.1, 26426.0], [98.2, 26690.0], [98.3, 26888.0], [98.4, 27008.0], [98.5, 27142.0], [98.6, 27220.0], [98.7, 27320.0], [98.8, 27514.0], [98.9, 27777.0], [99.0, 28326.0], [99.1, 28636.0], [99.2, 29138.0], [99.3, 29860.0], [99.4, 30695.0], [99.5, 31064.0], [99.6, 31748.0], [99.7, 32028.0], [99.8, 33087.0], [99.9, 35116.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2381.0, "series": [{"data": [[0.0, 2381.0], [100.0, 174.0], [32900.0, 1.0], [35300.0, 1.0], [35700.0, 1.0], [36100.0, 1.0], [34900.0, 1.0], [38900.0, 1.0], [37700.0, 1.0], [39300.0, 1.0], [40900.0, 1.0], [200.0, 186.0], [300.0, 158.0], [400.0, 102.0], [500.0, 80.0], [600.0, 64.0], [700.0, 42.0], [800.0, 49.0], [900.0, 35.0], [1000.0, 52.0], [1100.0, 30.0], [1200.0, 44.0], [1300.0, 45.0], [1400.0, 110.0], [1500.0, 166.0], [1600.0, 176.0], [1700.0, 137.0], [1800.0, 161.0], [1900.0, 130.0], [2000.0, 134.0], [2100.0, 141.0], [2300.0, 94.0], [2200.0, 123.0], [2400.0, 58.0], [2500.0, 86.0], [2600.0, 104.0], [2800.0, 159.0], [2700.0, 144.0], [2900.0, 174.0], [3000.0, 115.0], [3100.0, 114.0], [3200.0, 152.0], [3300.0, 154.0], [3400.0, 115.0], [3500.0, 57.0], [3600.0, 58.0], [3700.0, 65.0], [3800.0, 69.0], [3900.0, 86.0], [4000.0, 107.0], [4100.0, 116.0], [4200.0, 100.0], [4300.0, 72.0], [4600.0, 84.0], [4500.0, 104.0], [4400.0, 83.0], [4800.0, 33.0], [4700.0, 49.0], [5000.0, 77.0], [4900.0, 51.0], [5100.0, 80.0], [5200.0, 115.0], [5300.0, 82.0], [5400.0, 53.0], [5500.0, 59.0], [5600.0, 58.0], [5800.0, 51.0], [5700.0, 40.0], [5900.0, 49.0], [6000.0, 29.0], [6100.0, 31.0], [6300.0, 62.0], [6200.0, 53.0], [6500.0, 64.0], [6400.0, 76.0], [6600.0, 38.0], [6700.0, 29.0], [6900.0, 27.0], [6800.0, 27.0], [7000.0, 46.0], [7100.0, 71.0], [7300.0, 113.0], [7400.0, 96.0], [7200.0, 105.0], [7500.0, 75.0], [7600.0, 87.0], [7900.0, 80.0], [7700.0, 59.0], [7800.0, 50.0], [8100.0, 88.0], [8000.0, 65.0], [8200.0, 89.0], [8400.0, 58.0], [8500.0, 48.0], [8600.0, 28.0], [8300.0, 69.0], [8700.0, 48.0], [8800.0, 64.0], [9000.0, 79.0], [9100.0, 78.0], [9200.0, 83.0], [8900.0, 79.0], [9300.0, 85.0], [9600.0, 75.0], [9500.0, 58.0], [9700.0, 65.0], [9400.0, 89.0], [9900.0, 59.0], [10000.0, 50.0], [10100.0, 55.0], [10200.0, 43.0], [9800.0, 54.0], [10300.0, 76.0], [10400.0, 101.0], [10500.0, 120.0], [10600.0, 116.0], [10700.0, 68.0], [10800.0, 47.0], [10900.0, 35.0], [11000.0, 41.0], [11100.0, 27.0], [11200.0, 31.0], [11300.0, 37.0], [11400.0, 31.0], [11600.0, 28.0], [11700.0, 32.0], [11500.0, 37.0], [11900.0, 35.0], [11800.0, 25.0], [12000.0, 37.0], [12200.0, 36.0], [12100.0, 28.0], [12400.0, 65.0], [12300.0, 47.0], [12500.0, 82.0], [12600.0, 56.0], [12700.0, 53.0], [13300.0, 21.0], [12800.0, 33.0], [13000.0, 42.0], [12900.0, 31.0], [13100.0, 25.0], [13200.0, 27.0], [13400.0, 16.0], [13500.0, 32.0], [13700.0, 28.0], [13600.0, 18.0], [13800.0, 22.0], [13900.0, 58.0], [14000.0, 72.0], [14100.0, 90.0], [14200.0, 114.0], [14300.0, 85.0], [14400.0, 107.0], [14500.0, 66.0], [14600.0, 66.0], [14800.0, 84.0], [14700.0, 39.0], [14900.0, 60.0], [15300.0, 25.0], [15000.0, 84.0], [15100.0, 73.0], [15200.0, 47.0], [15400.0, 12.0], [15600.0, 7.0], [15500.0, 7.0], [15700.0, 5.0], [15800.0, 6.0], [15900.0, 6.0], [16000.0, 7.0], [16200.0, 6.0], [16300.0, 11.0], [16100.0, 6.0], [16400.0, 18.0], [16800.0, 106.0], [16600.0, 36.0], [17200.0, 365.0], [17000.0, 245.0], [17400.0, 394.0], [17600.0, 166.0], [17800.0, 209.0], [18000.0, 359.0], [18200.0, 403.0], [18400.0, 420.0], [18600.0, 314.0], [18800.0, 232.0], [19000.0, 160.0], [19200.0, 151.0], [19400.0, 146.0], [20400.0, 118.0], [19600.0, 157.0], [20200.0, 112.0], [20000.0, 85.0], [19800.0, 100.0], [20800.0, 175.0], [21000.0, 166.0], [21200.0, 99.0], [21400.0, 164.0], [20600.0, 89.0], [21800.0, 145.0], [22000.0, 29.0], [22200.0, 29.0], [21600.0, 160.0], [22400.0, 22.0], [22800.0, 17.0], [23000.0, 22.0], [23200.0, 36.0], [23400.0, 22.0], [22600.0, 15.0], [23600.0, 11.0], [23800.0, 3.0], [24000.0, 2.0], [24400.0, 4.0], [24200.0, 1.0], [24600.0, 4.0], [25000.0, 8.0], [24800.0, 8.0], [25200.0, 22.0], [25400.0, 24.0], [26200.0, 17.0], [25800.0, 12.0], [26000.0, 13.0], [25600.0, 15.0], [26400.0, 9.0], [26600.0, 9.0], [27000.0, 20.0], [26800.0, 18.0], [27200.0, 24.0], [27600.0, 12.0], [27400.0, 9.0], [28200.0, 8.0], [28600.0, 11.0], [27800.0, 3.0], [28000.0, 2.0], [28400.0, 3.0], [29000.0, 4.0], [28800.0, 4.0], [29200.0, 2.0], [29400.0, 2.0], [29600.0, 4.0], [30200.0, 5.0], [30400.0, 2.0], [29800.0, 2.0], [30000.0, 1.0], [30600.0, 3.0], [31600.0, 8.0], [30800.0, 7.0], [31000.0, 7.0], [31200.0, 1.0], [31400.0, 1.0], [31800.0, 8.0], [32000.0, 10.0], [32200.0, 1.0], [32400.0, 1.0], [33200.0, 3.0], [33600.0, 4.0], [34000.0, 2.0], [32800.0, 3.0], [35600.0, 2.0], [36000.0, 2.0], [37200.0, 1.0], [38800.0, 1.0], [33900.0, 1.0], [33100.0, 4.0], [34700.0, 1.0], [33500.0, 1.0], [35100.0, 1.0], [35500.0, 1.0], [35900.0, 1.0], [38300.0, 1.0], [40700.0, 1.0], [16500.0, 15.0], [16700.0, 77.0], [16900.0, 141.0], [17100.0, 329.0], [17300.0, 325.0], [18100.0, 414.0], [17700.0, 158.0], [17500.0, 333.0], [17900.0, 274.0], [18300.0, 436.0], [18500.0, 304.0], [18700.0, 309.0], [19300.0, 139.0], [18900.0, 207.0], [19100.0, 135.0], [19500.0, 172.0], [19700.0, 124.0], [20300.0, 79.0], [19900.0, 81.0], [20100.0, 83.0], [20500.0, 87.0], [20700.0, 125.0], [20900.0, 165.0], [21300.0, 115.0], [21500.0, 166.0], [21100.0, 154.0], [21700.0, 173.0], [22300.0, 25.0], [22500.0, 18.0], [21900.0, 69.0], [22100.0, 18.0], [22900.0, 20.0], [23300.0, 31.0], [22700.0, 22.0], [23500.0, 25.0], [23100.0, 34.0], [24300.0, 6.0], [23900.0, 6.0], [24100.0, 5.0], [23700.0, 10.0], [24500.0, 3.0], [24700.0, 1.0], [24900.0, 6.0], [25100.0, 18.0], [25300.0, 15.0], [25500.0, 26.0], [26500.0, 11.0], [25900.0, 15.0], [26100.0, 7.0], [25700.0, 18.0], [26300.0, 10.0], [26700.0, 11.0], [26900.0, 15.0], [27100.0, 29.0], [27300.0, 22.0], [27500.0, 7.0], [28500.0, 12.0], [27900.0, 2.0], [28300.0, 8.0], [28100.0, 7.0], [27700.0, 9.0], [28900.0, 6.0], [29100.0, 6.0], [28700.0, 2.0], [29300.0, 5.0], [29500.0, 3.0], [30100.0, 1.0], [29700.0, 4.0], [29900.0, 4.0], [30300.0, 2.0], [30700.0, 5.0], [30500.0, 7.0], [30900.0, 8.0], [31100.0, 4.0], [31500.0, 2.0], [31300.0, 1.0], [31700.0, 10.0], [32300.0, 5.0], [31900.0, 9.0], [32100.0, 4.0], [32700.0, 1.0], [32500.0, 1.0], [33800.0, 3.0], [33400.0, 3.0], [34600.0, 1.0], [33000.0, 2.0], [35800.0, 2.0], [37800.0, 1.0], [38600.0, 2.0], [37000.0, 1.0], [38200.0, 1.0], [41000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 41000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 21520.0, "series": [{"data": [[0.0, 3002.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 550.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 21520.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 9.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.9, "minX": 1.69976184E12, "maxY": 400.0, "series": [{"data": [[1.69976226E12, 400.0], [1.69976256E12, 400.0], [1.69976262E12, 400.0], [1.69976196E12, 122.15341614906839], [1.69976268E12, 400.0], [1.69976202E12, 203.04400871459703], [1.69976232E12, 400.0], [1.69976238E12, 400.0], [1.69976208E12, 283.89724961079384], [1.69976214E12, 363.7386495925496], [1.69976274E12, 397.8001824817515], [1.69976244E12, 400.0], [1.6997625E12, 400.0], [1.69976184E12, 2.9], [1.6997628E12, 165.5272727272727], [1.6997619E12, 56.88649262202034], [1.6997622E12, 400.0]], "isOverall": false, "label": "bzm - Concurrency Thread Group (scenario 2 - stress)-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6997628E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 13.78125, "minX": 1.0, "maxY": 33856.0, "series": [{"data": [[2.0, 5903.25], [3.0, 4724.2], [4.0, 23306.0], [5.0, 3928.166666666667], [6.0, 3926.4999999999995], [7.0, 2957.0], [8.0, 23774.0], [9.0, 2652.6666666666665], [10.0, 2160.6363636363635], [11.0, 1705.1428571428573], [12.0, 23354.0], [13.0, 2339.2999999999997], [14.0, 1669.642857142857], [15.0, 1489.5625], [17.0, 2145.7727272727275], [18.0, 1380.1764705882354], [19.0, 1241.2105263157896], [20.0, 23518.0], [21.0, 1101.8181818181818], [22.0, 1148.904761904762], [23.0, 1071.7272727272727], [24.0, 23353.0], [25.0, 1052.217391304348], [26.0, 1023.8260869565219], [27.0, 913.6538461538462], [28.0, 33856.0], [29.0, 853.3571428571429], [30.0, 13.78125], [31.0, 1643.2413793103449], [33.0, 16.916666666666668], [32.0, 23533.0], [34.0, 1294.7837837837837], [35.0, 727.060606060606], [37.0, 646.081081081081], [36.0, 23273.0], [38.0, 641.1538461538462], [39.0, 666.1081081081081], [41.0, 658.2162162162163], [40.0, 23561.0], [42.0, 591.6585365853659], [43.0, 592.1219512195122], [45.0, 518.8333333333334], [44.0, 23427.0], [46.0, 487.66], [47.0, 528.1702127659574], [48.0, 7862.0], [49.0, 502.0204081632653], [50.0, 489.47058823529414], [51.0, 479.9807692307692], [53.0, 449.375], [52.0, 23691.0], [54.0, 477.6730769230769], [55.0, 444.9642857142857], [57.0, 424.2413793103448], [56.0, 23567.0], [58.0, 446.1379310344828], [59.0, 408.4193548387097], [61.0, 406.4603174603174], [60.0, 23496.0], [62.0, 402.85714285714283], [63.0, 402.28125], [65.0, 389.9545454545455], [66.0, 391.43939393939394], [67.0, 389.2647058823529], [64.0, 23553.0], [69.0, 368.4225352112676], [70.0, 377.74285714285713], [71.0, 378.7857142857143], [68.0, 23308.0], [73.0, 355.8933333333333], [74.0, 369.6216216216216], [75.0, 367.12820512820514], [72.0, 23367.0], [77.0, 373.5769230769231], [78.0, 355.84615384615387], [79.0, 353.8354430379747], [76.0, 23619.0], [81.0, 433.11250000000007], [82.0, 633.8333333333334], [83.0, 642.2823529411764], [80.0, 23148.0], [85.0, 620.7682926829269], [86.0, 800.1666666666667], [87.0, 885.3291139240506], [84.0, 23265.0], [89.0, 1146.0757575757575], [90.0, 1301.6438356164383], [91.0, 1602.409836065574], [88.0, 23308.0], [92.0, 8827.666666666668], [93.0, 1812.3508771929821], [94.0, 1735.4714285714285], [95.0, 1949.2000000000003], [97.0, 2065.3593750000005], [98.0, 1751.969230769231], [99.0, 1942.8153846153846], [96.0, 23496.0], [101.0, 1938.2153846153847], [102.0, 2053.04], [103.0, 2051.8], [100.0, 23239.0], [104.0, 7030.75], [105.0, 2009.4600000000003], [106.0, 2298.941176470588], [107.0, 23566.0], [108.0, 2422.280701754386], [109.0, 2452.2040816326526], [110.0, 2524.8666666666672], [111.0, 23013.0], [112.0, 2301.490909090909], [113.0, 2138.8507462686566], [114.0, 2250.434782608695], [115.0, 13488.0], [116.0, 2090.6363636363635], [117.0, 2201.322033898305], [118.0, 2279.7692307692305], [119.0, 23029.0], [120.0, 2715.2452830188686], [121.0, 2767.6981132075466], [122.0, 3023.547619047619], [123.0, 12846.5], [124.0, 3046.8703703703695], [125.0, 2770.1355932203387], [126.0, 2441.9642857142867], [127.0, 22971.0], [128.0, 2430.1562499999995], [129.0, 2852.6545454545453], [130.0, 2895.866666666666], [132.0, 2778.7000000000003], [133.0, 3163.1020408163263], [134.0, 3245.941176470588], [135.0, 13097.5], [131.0, 23419.0], [136.0, 3120.9285714285716], [137.0, 3152.269230769231], [138.0, 3285.891304347826], [139.0, 9703.333333333332], [140.0, 3269.6078431372557], [141.0, 3401.1836734693875], [142.0, 2985.326923076923], [143.0, 22967.0], [144.0, 3569.04081632653], [145.0, 3346.2452830188677], [147.0, 3738.019607843138], [148.0, 3320.8723404255315], [149.0, 3198.7599999999993], [151.0, 3551.290909090909], [150.0, 23105.0], [146.0, 23305.0], [152.0, 3486.585365853658], [153.0, 3732.458333333335], [154.0, 9931.666666666668], [155.0, 3706.133333333334], [156.0, 4019.9583333333335], [157.0, 3611.0], [158.0, 6622.166666666667], [159.0, 3791.6666666666674], [160.0, 3413.0816326530608], [161.0, 3783.4509803921574], [163.0, 3688.979166666666], [164.0, 3969.3529411764703], [166.0, 4163.522727272728], [167.0, 3949.954545454545], [162.0, 23263.0], [168.0, 3931.5652173913045], [170.0, 4259.465116279071], [171.0, 4157.521739130434], [172.0, 4428.0952380952385], [174.0, 4625.523809523809], [175.0, 4348.276595744681], [173.0, 23288.0], [169.0, 22924.0], [176.0, 4787.666666666666], [178.0, 4197.68888888889], [179.0, 4724.658536585365], [180.0, 4482.613636363636], [182.0, 5078.891304347826], [183.0, 4896.577777777776], [181.0, 33662.0], [177.0, 33087.0], [184.0, 4594.51282051282], [186.0, 4263.829268292682], [187.0, 5179.463414634145], [188.0, 4814.931818181819], [190.0, 4938.377777777777], [191.0, 4994.624999999998], [189.0, 22924.0], [185.0, 22897.0], [192.0, 5093.456521739132], [194.0, 4938.394736842106], [195.0, 5094.926829268292], [196.0, 5012.358974358975], [198.0, 5255.162162162161], [199.0, 5633.292682926829], [197.0, 23148.0], [193.0, 22772.0], [200.0, 5388.184210526317], [201.0, 11014.0], [202.0, 5301.216216216217], [203.0, 5624.824999999999], [205.0, 5396.166666666665], [206.0, 5588.906976744185], [207.0, 5310.789473684211], [204.0, 22951.0], [209.0, 4677.846153846152], [210.0, 5807.475], [211.0, 5019.923076923075], [213.0, 5371.205128205129], [214.0, 5544.131578947368], [215.0, 5963.621621621621], [212.0, 22976.0], [208.0, 23100.0], [217.0, 6210.243243243243], [218.0, 6221.15], [219.0, 6063.157894736842], [221.0, 6370.1621621621625], [222.0, 6417.675675675674], [223.0, 6823.911764705882], [220.0, 22812.0], [216.0, 22599.0], [225.0, 6168.179487179487], [226.0, 6557.828571428571], [227.0, 6303.457142857143], [229.0, 7597.51515151515], [230.0, 6464.142857142858], [231.0, 23009.0], [228.0, 22760.0], [224.0, 22725.0], [232.0, 7730.789473684211], [233.0, 6570.8], [234.0, 6984.763157894737], [236.0, 5991.299999999999], [237.0, 7380.424242424243], [238.0, 6626.0], [239.0, 22797.0], [235.0, 22956.0], [240.0, 7959.903225806452], [241.0, 7946.078947368422], [242.0, 7414.088235294118], [244.0, 7717.249999999999], [245.0, 7041.235294117647], [246.0, 7386.277777777777], [247.0, 22752.0], [243.0, 22852.0], [248.0, 7835.750000000001], [249.0, 7298.05882352941], [250.0, 7467.916666666667], [252.0, 8674.411764705881], [253.0, 8379.088235294117], [254.0, 7746.742857142855], [255.0, 32826.0], [251.0, 22384.0], [257.0, 7471.054054054056], [256.0, 7930.749999999999], [258.0, 7010.8125], [259.0, 7119.0], [260.0, 7492.882352941177], [261.0, 7539.000000000001], [262.0, 7783.8], [263.0, 22613.0], [264.0, 8314.757575757572], [270.0, 8014.484848484849], [271.0, 22680.5], [268.0, 8349.878787878788], [269.0, 7358.147058823529], [265.0, 8484.20588235294], [266.0, 7929.742857142858], [267.0, 12629.0], [273.0, 8859.969696969696], [272.0, 8305.472222222223], [275.0, 9327.65625], [274.0, 22786.0], [284.0, 7661.333333333334], [285.0, 8358.057142857144], [287.0, 8662.900000000001], [286.0, 22343.0], [276.0, 7199.529411764705], [277.0, 9112.57142857143], [279.0, 7796.454545454545], [278.0, 22596.0], [280.0, 9388.823529411766], [281.0, 9293.942857142858], [283.0, 9088.0], [282.0, 22641.0], [289.0, 9054.187499999998], [288.0, 8664.972972972972], [291.0, 10051.594594594593], [290.0, 22607.0], [300.0, 8931.062499999998], [301.0, 8676.124999999998], [302.0, 15267.75], [303.0, 9821.774193548392], [292.0, 10633.3], [293.0, 9280.875], [295.0, 8719.545454545454], [294.0, 22278.0], [296.0, 8548.5], [297.0, 8610.257142857143], [299.0, 9154.096774193547], [298.0, 22598.0], [305.0, 9274.441176470587], [304.0, 10643.441176470587], [307.0, 9297.51724137931], [306.0, 22648.0], [316.0, 9809.757575757574], [318.0, 10235.875], [317.0, 22399.0], [319.0, 9967.060606060608], [308.0, 10637.600000000002], [309.0, 11529.225806451612], [311.0, 10259.72727272727], [310.0, 22222.0], [312.0, 8528.633333333333], [314.0, 10309.37931034483], [313.0, 22506.0], [315.0, 10261.48275862069], [322.0, 10281.599999999997], [320.0, 10051.9], [321.0, 22418.0], [323.0, 12057.032258064519], [332.0, 10601.206896551723], [334.0, 10798.970588235296], [333.0, 21966.0], [335.0, 10542.064516129034], [324.0, 9901.281250000002], [325.0, 22141.0], [326.0, 10291.689655172413], [327.0, 11022.199999999999], [328.0, 12088.866666666665], [330.0, 11599.787878787878], [331.0, 11087.999999999996], [338.0, 10564.0], [336.0, 11237.542857142858], [337.0, 12101.0], [339.0, 11023.771428571428], [348.0, 32743.0], [349.0, 11383.612903225805], [350.0, 10936.821428571433], [351.0, 11056.69696969697], [344.0, 21913.0], [341.0, 11742.774193548388], [340.0, 22264.0], [342.0, 11429.966666666669], [343.0, 11302.766666666666], [345.0, 10231.1875], [346.0, 10326.718750000002], [347.0, 11577.777777777777], [354.0, 11176.857142857145], [353.0, 11303.387096774197], [355.0, 11532.666666666664], [364.0, 11768.0], [365.0, 13778.444444444445], [366.0, 13536.096774193547], [367.0, 12751.310344827585], [360.0, 21933.0], [357.0, 11982.17647058824], [356.0, 22373.0], [358.0, 12579.566666666668], [359.0, 12202.599999999999], [352.0, 22024.0], [361.0, 12764.678571428574], [362.0, 12145.83870967742], [363.0, 13988.857142857141], [371.0, 13463.76666666667], [369.0, 12738.241379310348], [368.0, 14449.25], [375.0, 11863.0], [370.0, 12825.827586206893], [373.0, 13360.34375], [372.0, 22324.0], [374.0, 12766.064516129036], [376.0, 12449.741935483871], [382.0, 13102.480000000003], [383.0, 22336.0], [380.0, 12541.964285714284], [381.0, 12390.40625], [377.0, 13193.629629629631], [378.0, 12326.645161290327], [379.0, 22093.0], [385.0, 13066.714285714286], [384.0, 13982.862068965518], [386.0, 12494.933333333332], [387.0, 17625.5], [388.0, 13835.758620689658], [389.0, 13696.17857142857], [390.0, 13152.899999999998], [391.0, 11508.0], [392.0, 13254.769230769232], [398.0, 13953.655172413793], [399.0, 17865.5], [396.0, 14292.30769230769], [397.0, 13895.22222222222], [393.0, 13122.071428571431], [394.0, 14477.806451612902], [395.0, 22223.0], [400.0, 18373.694701170738], [1.0, 11872.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[295.3949603285346, 12035.139946573092]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 400.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 72.46666666666667, "minX": 1.69976184E12, "maxY": 45216.566666666666, "series": [{"data": [[1.69976226E12, 19467.6], [1.69976256E12, 17595.133333333335], [1.69976262E12, 16821.966666666667], [1.69976196E12, 45216.566666666666], [1.69976268E12, 15981.016666666666], [1.69976202E12, 32227.55], [1.69976232E12, 18250.833333333332], [1.69976238E12, 18269.233333333334], [1.69976208E12, 27059.716666666667], [1.69976214E12, 24120.1], [1.69976274E12, 15385.833333333334], [1.69976244E12, 19524.016666666666], [1.6997625E12, 18592.416666666668], [1.69976184E12, 140.56666666666666], [1.6997628E12, 4629.516666666666], [1.6997619E12, 37113.8], [1.6997622E12, 21761.65]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69976226E12, 10042.7], [1.69976256E12, 9072.616666666667], [1.69976262E12, 8674.133333333333], [1.69976196E12, 23315.133333333335], [1.69976268E12, 8240.25], [1.69976202E12, 16617.616666666665], [1.69976232E12, 9413.3], [1.69976238E12, 9420.033333333333], [1.69976208E12, 13952.783333333333], [1.69976214E12, 12439.583333333334], [1.69976274E12, 7935.883333333333], [1.69976244E12, 10071.9], [1.6997625E12, 9586.85], [1.69976184E12, 72.46666666666667], [1.6997628E12, 2389.45], [1.6997619E12, 19137.066666666666], [1.6997622E12, 11223.283333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6997628E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 32.199999999999996, "minX": 1.69976184E12, "maxY": 23455.53636363636, "series": [{"data": [[1.69976226E12, 17441.680605623627], [1.69976256E12, 19007.58898643256], [1.69976262E12, 19903.989148580982], [1.69976196E12, 2200.22919254658], [1.69976268E12, 20932.52987697713], [1.69976202E12, 5039.712854030487], [1.69976232E12, 18243.699999999986], [1.69976238E12, 18447.12836279784], [1.69976208E12, 8420.516865594198], [1.69976214E12, 12023.957508731059], [1.69976274E12, 21566.22171532847], [1.69976244E12, 17467.669302659986], [1.6997625E12, 17998.09743202419], [1.69976184E12, 32.199999999999996], [1.6997628E12, 23455.53636363636], [1.6997619E12, 60.36965569428675], [1.6997622E12, 15009.24838709679]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6997628E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 31.40000000000001, "minX": 1.69976184E12, "maxY": 23453.406060606056, "series": [{"data": [[1.69976226E12, 17439.65969718819], [1.69976256E12, 19006.002394253796], [1.69976262E12, 19902.215358931568], [1.69976196E12, 2198.9459627329206], [1.69976268E12, 20930.556239015867], [1.69976202E12, 5038.1917211328955], [1.69976232E12, 18241.4976923077], [1.69976238E12, 18445.08839354339], [1.69976208E12, 8419.025428126619], [1.69976214E12, 12022.424912689183], [1.69976274E12, 21564.45255474454], [1.69976244E12, 17465.954708842557], [1.6997625E12, 17996.489425981836], [1.69976184E12, 31.40000000000001], [1.6997628E12, 23453.406060606056], [1.6997619E12, 60.01021566401815], [1.6997622E12, 15007.932903225812]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6997628E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.69976184E12, "maxY": 1.259470679813179, "series": [{"data": [[1.69976226E12, 0.9473684210526319], [1.69976256E12, 0.7270550678371903], [1.69976262E12, 0.72787979966611], [1.69976196E12, 0.843788819875777], [1.69976268E12, 0.7029876977152882], [1.69976202E12, 1.239215686274509], [1.69976232E12, 0.9607692307692312], [1.69976238E12, 0.8639508070714836], [1.69976208E12, 1.259470679813179], [1.69976214E12, 1.1775320139697292], [1.69976274E12, 0.7162408759124084], [1.69976244E12, 0.6146657081236514], [1.6997625E12, 0.5989425981873123], [1.69976184E12, 0.3], [1.6997628E12, 0.6878787878787884], [1.6997619E12, 0.7207718501702596], [1.6997622E12, 0.997419354838712]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6997628E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.69976184E12, "maxY": 40720.0, "series": [{"data": [[1.69976226E12, 34701.0], [1.69976256E12, 37032.0], [1.69976262E12, 38677.0], [1.69976196E12, 8198.0], [1.69976268E12, 40720.0], [1.69976202E12, 21735.0], [1.69976232E12, 35851.0], [1.69976238E12, 36043.0], [1.69976208E12, 26508.0], [1.69976214E12, 30151.0], [1.69976274E12, 32743.0], [1.69976244E12, 36132.0], [1.6997625E12, 34991.0], [1.69976184E12, 216.0], [1.6997628E12, 33856.0], [1.6997619E12, 658.0], [1.6997622E12, 35397.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69976226E12, 18126.0], [1.69976256E12, 19532.6], [1.69976262E12, 20475.1], [1.69976196E12, 3337.0], [1.69976268E12, 21276.2], [1.69976202E12, 6783.4], [1.69976232E12, 18877.0], [1.69976238E12, 18929.2], [1.69976208E12, 12651.400000000001], [1.69976214E12, 16830.800000000003], [1.69976274E12, 22065.4], [1.69976244E12, 18797.0], [1.6997625E12, 18473.0], [1.69976184E12, 195.90000000000006], [1.6997628E12, 23631.0], [1.6997619E12, 123.59999999999991], [1.6997622E12, 21463.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69976226E12, 27133.260000000606], [1.69976256E12, 28525.72], [1.69976262E12, 29706.63], [1.69976196E12, 5550.58], [1.69976268E12, 30997.22], [1.69976202E12, 12066.48], [1.69976232E12, 27243.0], [1.69976238E12, 27424.98], [1.69976208E12, 18862.360000000004], [1.69976214E12, 21999.359999999917], [1.69976274E12, 32097.4], [1.69976244E12, 27292.399999999998], [1.6997625E12, 27017.25], [1.69976184E12, 216.0], [1.6997628E12, 33525.299999999996], [1.6997619E12, 451.0], [1.6997622E12, 28341.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69976226E12, 25510.8], [1.69976256E12, 19734.2], [1.69976262E12, 20678.35], [1.69976196E12, 3453.0], [1.69976268E12, 21441.3], [1.69976202E12, 10262.799999999997], [1.69976232E12, 26213.0], [1.69976238E12, 27003.7], [1.69976208E12, 14092.0], [1.69976214E12, 18926.0], [1.69976274E12, 31567.4], [1.69976244E12, 25215.0], [1.6997625E12, 25455.5], [1.69976184E12, 216.0], [1.6997628E12, 23950.5], [1.6997619E12, 295.3999999999992], [1.6997622E12, 22309.5]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69976226E12, 8711.0], [1.69976256E12, 9556.0], [1.69976262E12, 10043.0], [1.69976196E12, 55.0], [1.69976268E12, 10638.0], [1.69976202E12, 102.0], [1.69976232E12, 9078.0], [1.69976238E12, 9122.0], [1.69976208E12, 1393.0], [1.69976214E12, 4250.0], [1.69976274E12, 11022.0], [1.69976244E12, 8574.0], [1.6997625E12, 8979.0], [1.69976184E12, 9.0], [1.6997628E12, 11838.0], [1.6997619E12, 5.0], [1.6997622E12, 7164.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69976226E12, 17369.0], [1.69976256E12, 19029.0], [1.69976262E12, 19847.5], [1.69976196E12, 2176.5], [1.69976268E12, 20926.0], [1.69976202E12, 4866.0], [1.69976232E12, 18225.0], [1.69976238E12, 18421.0], [1.69976208E12, 8271.0], [1.69976214E12, 12166.0], [1.69976274E12, 21647.0], [1.69976244E12, 17239.0], [1.6997625E12, 18030.5], [1.69976184E12, 12.0], [1.6997628E12, 23135.0], [1.6997619E12, 30.0], [1.6997622E12, 14743.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6997628E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 9.0, "minX": 1.0, "maxY": 41012.0, "series": [{"data": [[2.0, 13.5], [3.0, 12.0], [4.0, 11.0], [6.0, 11.0], [7.0, 13.0], [8.0, 9.5], [12.0, 9.0], [14.0, 21133.0], [15.0, 22103.5], [16.0, 21554.5], [17.0, 21291.0], [18.0, 21029.0], [19.0, 19883.0], [20.0, 19353.5], [21.0, 18423.0], [22.0, 18190.0], [23.0, 18057.5], [24.0, 17878.5], [25.0, 17316.0], [26.0, 14388.0], [27.0, 14142.5], [28.0, 14068.0], [29.0, 11794.0], [30.0, 11352.0], [31.0, 9111.0], [32.0, 8700.0], [33.0, 9230.0], [34.0, 7126.5], [35.0, 6431.0], [37.0, 5557.0], [36.0, 6332.5], [38.0, 5136.5], [39.0, 4742.0], [40.0, 3956.5], [41.0, 108.0], [43.0, 3754.0], [42.0, 4217.5], [44.0, 3974.0], [45.0, 3300.0], [47.0, 3313.5], [46.0, 2943.5], [48.0, 3198.5], [49.0, 2315.0], [50.0, 2260.0], [51.0, 33.0], [52.0, 145.0], [53.0, 2678.5], [54.0, 2002.5], [56.0, 2141.0], [58.0, 43.5], [59.0, 2200.0], [61.0, 81.0], [60.0, 1598.5], [62.0, 44.5], [63.0, 1604.0], [65.0, 1706.0], [66.0, 45.0], [67.0, 1152.0], [68.0, 50.0], [70.0, 53.0], [69.0, 52.0], [71.0, 275.0], [74.0, 147.5], [72.0, 691.5], [77.0, 72.0], [81.0, 64.0], [89.0, 363.0], [1.0, 216.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[18.0, 40922.0], [19.0, 41012.0], [22.0, 39394.0], [23.0, 38686.0], [24.0, 38395.5], [27.0, 37291.0], [28.0, 38881.0], [29.0, 33951.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 89.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 9.0, "minX": 1.0, "maxY": 41012.0, "series": [{"data": [[2.0, 13.0], [3.0, 9.0], [4.0, 11.0], [6.0, 10.0], [7.0, 11.0], [8.0, 9.0], [12.0, 9.0], [14.0, 21130.0], [15.0, 22102.5], [16.0, 21554.0], [17.0, 21291.0], [18.0, 21029.0], [19.0, 19882.0], [20.0, 19353.0], [21.0, 18422.0], [22.0, 18185.0], [23.0, 18054.0], [24.0, 17878.0], [25.0, 17315.0], [26.0, 14387.5], [27.0, 14142.0], [28.0, 14068.0], [29.0, 11793.5], [30.0, 11349.5], [31.0, 9111.0], [32.0, 8700.0], [33.0, 9229.0], [34.0, 7126.5], [35.0, 6430.0], [37.0, 5548.0], [36.0, 6326.5], [38.0, 5136.0], [39.0, 4742.0], [40.0, 3953.5], [41.0, 107.0], [43.0, 3746.0], [42.0, 4214.0], [44.0, 3974.0], [45.0, 3300.0], [47.0, 3313.5], [46.0, 2942.0], [48.0, 3198.0], [49.0, 2314.5], [50.0, 2259.5], [51.0, 33.0], [52.0, 133.0], [53.0, 2678.5], [54.0, 1999.0], [56.0, 2140.0], [58.0, 43.5], [59.0, 2200.0], [61.0, 81.0], [60.0, 1598.0], [62.0, 44.0], [63.0, 1603.0], [65.0, 1704.0], [66.0, 45.0], [67.0, 1151.0], [68.0, 49.5], [70.0, 52.5], [69.0, 52.0], [71.0, 274.5], [74.0, 147.5], [72.0, 691.5], [77.0, 72.0], [81.0, 64.0], [89.0, 360.0], [1.0, 215.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[18.0, 40922.0], [19.0, 41012.0], [22.0, 39394.0], [23.0, 38686.0], [24.0, 38395.5], [27.0, 37291.0], [28.0, 38881.0], [29.0, 33951.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 89.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.69976184E12, "maxY": 55.95, "series": [{"data": [[1.69976226E12, 23.116666666666667], [1.69976256E12, 20.883333333333333], [1.69976262E12, 19.966666666666665], [1.69976196E12, 55.95], [1.69976268E12, 18.966666666666665], [1.69976202E12, 39.56666666666667], [1.69976232E12, 21.666666666666668], [1.69976238E12, 21.683333333333334], [1.69976208E12, 33.4], [1.69976214E12, 29.933333333333334], [1.69976274E12, 17.1], [1.69976244E12, 23.183333333333334], [1.6997625E12, 22.066666666666666], [1.69976184E12, 0.2], [1.6997619E12, 44.5], [1.6997622E12, 25.833333333333332]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69976274E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.69976184E12, "maxY": 53.666666666666664, "series": [{"data": [[1.69976226E12, 23.083333333333332], [1.69976256E12, 20.883333333333333], [1.69976262E12, 19.966666666666665], [1.69976196E12, 53.666666666666664], [1.69976268E12, 18.966666666666665], [1.69976202E12, 38.25], [1.69976232E12, 21.65], [1.69976238E12, 21.683333333333334], [1.69976208E12, 32.11666666666667], [1.69976214E12, 28.616666666666667], [1.69976274E12, 18.25], [1.69976244E12, 23.15], [1.6997625E12, 22.066666666666666], [1.69976184E12, 0.16666666666666666], [1.6997628E12, 5.483333333333333], [1.6997619E12, 44.05], [1.6997622E12, 25.816666666666666]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.69976226E12, 0.03333333333333333], [1.69976214E12, 0.016666666666666666], [1.69976274E12, 0.016666666666666666], [1.69976244E12, 0.03333333333333333], [1.69976232E12, 0.016666666666666666], [1.6997628E12, 0.016666666666666666], [1.6997622E12, 0.016666666666666666]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6997628E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.69976184E12, "maxY": 53.666666666666664, "series": [{"data": [[1.69976226E12, 23.083333333333332], [1.69976256E12, 20.883333333333333], [1.69976262E12, 19.966666666666665], [1.69976196E12, 53.666666666666664], [1.69976268E12, 18.966666666666665], [1.69976202E12, 38.25], [1.69976232E12, 21.65], [1.69976238E12, 21.683333333333334], [1.69976208E12, 32.11666666666667], [1.69976214E12, 28.616666666666667], [1.69976274E12, 18.25], [1.69976244E12, 23.15], [1.6997625E12, 22.066666666666666], [1.69976184E12, 0.16666666666666666], [1.6997628E12, 5.483333333333333], [1.6997619E12, 44.05], [1.6997622E12, 25.816666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.69976226E12, 0.03333333333333333], [1.69976214E12, 0.016666666666666666], [1.69976274E12, 0.016666666666666666], [1.69976244E12, 0.03333333333333333], [1.69976232E12, 0.016666666666666666], [1.6997628E12, 0.016666666666666666], [1.6997622E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6997628E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.69976184E12, "maxY": 53.666666666666664, "series": [{"data": [[1.69976226E12, 23.083333333333332], [1.69976256E12, 20.883333333333333], [1.69976262E12, 19.966666666666665], [1.69976196E12, 53.666666666666664], [1.69976268E12, 18.966666666666665], [1.69976202E12, 38.25], [1.69976232E12, 21.65], [1.69976238E12, 21.683333333333334], [1.69976208E12, 32.11666666666667], [1.69976214E12, 28.616666666666667], [1.69976274E12, 18.25], [1.69976244E12, 23.15], [1.6997625E12, 22.066666666666666], [1.69976184E12, 0.16666666666666666], [1.6997628E12, 5.483333333333333], [1.6997619E12, 44.05], [1.6997622E12, 25.816666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69976226E12, 0.03333333333333333], [1.69976214E12, 0.016666666666666666], [1.69976274E12, 0.016666666666666666], [1.69976244E12, 0.03333333333333333], [1.69976232E12, 0.016666666666666666], [1.6997628E12, 0.016666666666666666], [1.6997622E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6997628E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

