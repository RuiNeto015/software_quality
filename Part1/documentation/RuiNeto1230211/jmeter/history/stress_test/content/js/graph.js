/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "maxY": 101643.0, "series": [{"data": [[0.0, 9.0], [0.1, 15.0], [0.2, 15.0], [0.3, 16.0], [0.4, 16.0], [0.5, 17.0], [0.6, 17.0], [0.7, 17.0], [0.8, 18.0], [0.9, 18.0], [1.0, 18.0], [1.1, 19.0], [1.2, 19.0], [1.3, 19.0], [1.4, 20.0], [1.5, 21.0], [1.6, 21.0], [1.7, 22.0], [1.8, 22.0], [1.9, 23.0], [2.0, 23.0], [2.1, 24.0], [2.2, 25.0], [2.3, 25.0], [2.4, 25.0], [2.5, 25.0], [2.6, 26.0], [2.7, 26.0], [2.8, 27.0], [2.9, 27.0], [3.0, 28.0], [3.1, 28.0], [3.2, 29.0], [3.3, 30.0], [3.4, 31.0], [3.5, 32.0], [3.6, 33.0], [3.7, 34.0], [3.8, 37.0], [3.9, 37.0], [4.0, 39.0], [4.1, 41.0], [4.2, 41.0], [4.3, 44.0], [4.4, 45.0], [4.5, 46.0], [4.6, 48.0], [4.7, 50.0], [4.8, 52.0], [4.9, 55.0], [5.0, 56.0], [5.1, 59.0], [5.2, 60.0], [5.3, 62.0], [5.4, 63.0], [5.5, 64.0], [5.6, 65.0], [5.7, 69.0], [5.8, 70.0], [5.9, 73.0], [6.0, 73.0], [6.1, 77.0], [6.2, 81.0], [6.3, 82.0], [6.4, 84.0], [6.5, 87.0], [6.6, 88.0], [6.7, 91.0], [6.8, 95.0], [6.9, 97.0], [7.0, 99.0], [7.1, 102.0], [7.2, 108.0], [7.3, 116.0], [7.4, 120.0], [7.5, 127.0], [7.6, 139.0], [7.7, 161.0], [7.8, 186.0], [7.9, 195.0], [8.0, 210.0], [8.1, 229.0], [8.2, 243.0], [8.3, 266.0], [8.4, 276.0], [8.5, 283.0], [8.6, 297.0], [8.7, 309.0], [8.8, 339.0], [8.9, 354.0], [9.0, 397.0], [9.1, 419.0], [9.2, 457.0], [9.3, 499.0], [9.4, 537.0], [9.5, 600.0], [9.6, 652.0], [9.7, 795.0], [9.8, 857.0], [9.9, 931.0], [10.0, 1000.0], [10.1, 1113.0], [10.2, 1257.0], [10.3, 1409.0], [10.4, 1518.0], [10.5, 1543.0], [10.6, 1609.0], [10.7, 1637.0], [10.8, 1733.0], [10.9, 1892.0], [11.0, 2014.0], [11.1, 2083.0], [11.2, 2221.0], [11.3, 2269.0], [11.4, 2380.0], [11.5, 2475.0], [11.6, 2537.0], [11.7, 2603.0], [11.8, 2689.0], [11.9, 2724.0], [12.0, 2788.0], [12.1, 2850.0], [12.2, 2933.0], [12.3, 2973.0], [12.4, 3059.0], [12.5, 3157.0], [12.6, 3256.0], [12.7, 3321.0], [12.8, 3369.0], [12.9, 3410.0], [13.0, 3509.0], [13.1, 3571.0], [13.2, 3667.0], [13.3, 3727.0], [13.4, 3835.0], [13.5, 3868.0], [13.6, 3893.0], [13.7, 4023.0], [13.8, 4112.0], [13.9, 4216.0], [14.0, 4347.0], [14.1, 4438.0], [14.2, 4509.0], [14.3, 4614.0], [14.4, 4714.0], [14.5, 4803.0], [14.6, 4905.0], [14.7, 5043.0], [14.8, 5116.0], [14.9, 5215.0], [15.0, 5353.0], [15.1, 5480.0], [15.2, 5580.0], [15.3, 5705.0], [15.4, 5867.0], [15.5, 5920.0], [15.6, 6064.0], [15.7, 6169.0], [15.8, 6339.0], [15.9, 6430.0], [16.0, 6619.0], [16.1, 6698.0], [16.2, 6844.0], [16.3, 6946.0], [16.4, 7165.0], [16.5, 7337.0], [16.6, 7432.0], [16.7, 7604.0], [16.8, 7812.0], [16.9, 7950.0], [17.0, 8134.0], [17.1, 8309.0], [17.2, 8448.0], [17.3, 8640.0], [17.4, 8785.0], [17.5, 8902.0], [17.6, 9142.0], [17.7, 9328.0], [17.8, 9594.0], [17.9, 9698.0], [18.0, 9988.0], [18.1, 10103.0], [18.2, 10318.0], [18.3, 10493.0], [18.4, 10783.0], [18.5, 10941.0], [18.6, 11104.0], [18.7, 11309.0], [18.8, 11634.0], [18.9, 11730.0], [19.0, 11963.0], [19.1, 12081.0], [19.2, 12415.0], [19.3, 12512.0], [19.4, 12852.0], [19.5, 13015.0], [19.6, 13302.0], [19.7, 13545.0], [19.8, 13745.0], [19.9, 14072.0], [20.0, 14410.0], [20.1, 14616.0], [20.2, 14850.0], [20.3, 14933.0], [20.4, 15325.0], [20.5, 15648.0], [20.6, 15909.0], [20.7, 16100.0], [20.8, 16453.0], [20.9, 16598.0], [21.0, 17039.0], [21.1, 17129.0], [21.2, 17602.0], [21.3, 17780.0], [21.4, 18096.0], [21.5, 18447.0], [21.6, 18612.0], [21.7, 18966.0], [21.8, 19335.0], [21.9, 19606.0], [22.0, 19835.0], [22.1, 20347.0], [22.2, 20681.0], [22.3, 20847.0], [22.4, 21244.0], [22.5, 21711.0], [22.6, 21900.0], [22.7, 22359.0], [22.8, 22556.0], [22.9, 23234.0], [23.0, 23621.0], [23.1, 23860.0], [23.2, 24137.0], [23.3, 24571.0], [23.4, 24916.0], [23.5, 25462.0], [23.6, 25831.0], [23.7, 26034.0], [23.8, 26703.0], [23.9, 26918.0], [24.0, 27294.0], [24.1, 27597.0], [24.2, 28284.0], [24.3, 28471.0], [24.4, 28970.0], [24.5, 29425.0], [24.6, 29799.0], [24.7, 30155.0], [24.8, 30669.0], [24.9, 31061.0], [25.0, 31200.0], [25.1, 31794.0], [25.2, 32349.0], [25.3, 32884.0], [25.4, 33295.0], [25.5, 33794.0], [25.6, 34040.0], [25.7, 34570.0], [25.8, 35002.0], [25.9, 35404.0], [26.0, 35863.0], [26.1, 36214.0], [26.2, 36760.0], [26.3, 37038.0], [26.4, 37455.0], [26.5, 38190.0], [26.6, 38524.0], [26.7, 39293.0], [26.8, 39470.0], [26.9, 39634.0], [27.0, 40200.0], [27.1, 40581.0], [27.2, 40862.0], [27.3, 41184.0], [27.4, 41480.0], [27.5, 41725.0], [27.6, 41874.0], [27.7, 42225.0], [27.8, 42576.0], [27.9, 42883.0], [28.0, 43194.0], [28.1, 43647.0], [28.2, 43971.0], [28.3, 44269.0], [28.4, 44401.0], [28.5, 44955.0], [28.6, 45388.0], [28.7, 45898.0], [28.8, 46042.0], [28.9, 46579.0], [29.0, 46907.0], [29.1, 47357.0], [29.2, 47883.0], [29.3, 48107.0], [29.4, 48583.0], [29.5, 48976.0], [29.6, 49376.0], [29.7, 49979.0], [29.8, 50282.0], [29.9, 50560.0], [30.0, 50984.0], [30.1, 51270.0], [30.2, 51731.0], [30.3, 52315.0], [30.4, 53019.0], [30.5, 53258.0], [30.6, 53941.0], [30.7, 54057.0], [30.8, 54226.0], [30.9, 54676.0], [31.0, 54896.0], [31.1, 55480.0], [31.2, 55778.0], [31.3, 55919.0], [31.4, 56093.0], [31.5, 56437.0], [31.6, 56615.0], [31.7, 56992.0], [31.8, 57409.0], [31.9, 57577.0], [32.0, 57819.0], [32.1, 57966.0], [32.2, 58104.0], [32.3, 58584.0], [32.4, 59069.0], [32.5, 59278.0], [32.6, 59673.0], [32.7, 59909.0], [32.8, 60154.0], [32.9, 60526.0], [33.0, 60781.0], [33.1, 61399.0], [33.2, 62039.0], [33.3, 62269.0], [33.4, 62741.0], [33.5, 62839.0], [33.6, 63195.0], [33.7, 63758.0], [33.8, 64063.0], [33.9, 64437.0], [34.0, 64570.0], [34.1, 64893.0], [34.2, 65019.0], [34.3, 65399.0], [34.4, 65567.0], [34.5, 66004.0], [34.6, 66151.0], [34.7, 66374.0], [34.8, 66488.0], [34.9, 66560.0], [35.0, 66634.0], [35.1, 66719.0], [35.2, 66892.0], [35.3, 67028.0], [35.4, 67189.0], [35.5, 67422.0], [35.6, 67547.0], [35.7, 67706.0], [35.8, 67908.0], [35.9, 68011.0], [36.0, 68142.0], [36.1, 68477.0], [36.2, 68554.0], [36.3, 68709.0], [36.4, 68780.0], [36.5, 68939.0], [36.6, 69223.0], [36.7, 69587.0], [36.8, 69710.0], [36.9, 69814.0], [37.0, 69963.0], [37.1, 70377.0], [37.2, 70937.0], [37.3, 71011.0], [37.4, 71234.0], [37.5, 71490.0], [37.6, 71808.0], [37.7, 72173.0], [37.8, 72452.0], [37.9, 72654.0], [38.0, 73141.0], [38.1, 73473.0], [38.2, 74008.0], [38.3, 74676.0], [38.4, 74842.0], [38.5, 75401.0], [38.6, 75643.0], [38.7, 75845.0], [38.8, 76728.0], [38.9, 76898.0], [39.0, 77078.0], [39.1, 77964.0], [39.2, 78241.0], [39.3, 78427.0], [39.4, 79130.0], [39.5, 79476.0], [39.6, 79715.0], [39.7, 79781.0], [39.8, 80281.0], [39.9, 80641.0], [40.0, 80773.0], [40.1, 80934.0], [40.2, 81269.0], [40.3, 81414.0], [40.4, 81604.0], [40.5, 82003.0], [40.6, 82270.0], [40.7, 82469.0], [40.8, 82590.0], [40.9, 82709.0], [41.0, 82920.0], [41.1, 83327.0], [41.2, 83646.0], [41.3, 83872.0], [41.4, 84111.0], [41.5, 84400.0], [41.6, 84538.0], [41.7, 84648.0], [41.8, 84912.0], [41.9, 84969.0], [42.0, 85115.0], [42.1, 85362.0], [42.2, 85580.0], [42.3, 85732.0], [42.4, 86119.0], [42.5, 86365.0], [42.6, 86515.0], [42.7, 86756.0], [42.8, 87006.0], [42.9, 87342.0], [43.0, 87643.0], [43.1, 88000.0], [43.2, 88225.0], [43.3, 88262.0], [43.4, 88460.0], [43.5, 88644.0], [43.6, 88973.0], [43.7, 89113.0], [43.8, 89283.0], [43.9, 89529.0], [44.0, 89636.0], [44.1, 89788.0], [44.2, 89874.0], [44.3, 90019.0], [44.4, 90085.0], [44.5, 90329.0], [44.6, 90375.0], [44.7, 90442.0], [44.8, 90504.0], [44.9, 90522.0], [45.0, 90545.0], [45.1, 90604.0], [45.2, 90649.0], [45.3, 90677.0], [45.4, 90700.0], [45.5, 90720.0], [45.6, 90740.0], [45.7, 90753.0], [45.8, 90767.0], [45.9, 90784.0], [46.0, 90796.0], [46.1, 90810.0], [46.2, 90819.0], [46.3, 90839.0], [46.4, 90849.0], [46.5, 90860.0], [46.6, 90881.0], [46.7, 90896.0], [46.8, 90905.0], [46.9, 90927.0], [47.0, 90942.0], [47.1, 90956.0], [47.2, 90965.0], [47.3, 90977.0], [47.4, 90986.0], [47.5, 90990.0], [47.6, 90998.0], [47.7, 91009.0], [47.8, 91016.0], [47.9, 91020.0], [48.0, 91030.0], [48.1, 91035.0], [48.2, 91043.0], [48.3, 91046.0], [48.4, 91048.0], [48.5, 91052.0], [48.6, 91063.0], [48.7, 91080.0], [48.8, 91082.0], [48.9, 91090.0], [49.0, 91096.0], [49.1, 91103.0], [49.2, 91111.0], [49.3, 91116.0], [49.4, 91126.0], [49.5, 91135.0], [49.6, 91144.0], [49.7, 91152.0], [49.8, 91163.0], [49.9, 91167.0], [50.0, 91174.0], [50.1, 91182.0], [50.2, 91185.0], [50.3, 91188.0], [50.4, 91194.0], [50.5, 91196.0], [50.6, 91202.0], [50.7, 91208.0], [50.8, 91214.0], [50.9, 91219.0], [51.0, 91225.0], [51.1, 91232.0], [51.2, 91239.0], [51.3, 91245.0], [51.4, 91247.0], [51.5, 91249.0], [51.6, 91254.0], [51.7, 91259.0], [51.8, 91265.0], [51.9, 91272.0], [52.0, 91277.0], [52.1, 91279.0], [52.2, 91283.0], [52.3, 91288.0], [52.4, 91292.0], [52.5, 91305.0], [52.6, 91308.0], [52.7, 91310.0], [52.8, 91316.0], [52.9, 91318.0], [53.0, 91325.0], [53.1, 91330.0], [53.2, 91333.0], [53.3, 91339.0], [53.4, 91349.0], [53.5, 91358.0], [53.6, 91362.0], [53.7, 91367.0], [53.8, 91373.0], [53.9, 91377.0], [54.0, 91385.0], [54.1, 91394.0], [54.2, 91399.0], [54.3, 91402.0], [54.4, 91408.0], [54.5, 91412.0], [54.6, 91415.0], [54.7, 91419.0], [54.8, 91422.0], [54.9, 91433.0], [55.0, 91439.0], [55.1, 91442.0], [55.2, 91445.0], [55.3, 91459.0], [55.4, 91462.0], [55.5, 91471.0], [55.6, 91475.0], [55.7, 91482.0], [55.8, 91486.0], [55.9, 91490.0], [56.0, 91492.0], [56.1, 91496.0], [56.2, 91498.0], [56.3, 91504.0], [56.4, 91508.0], [56.5, 91512.0], [56.6, 91516.0], [56.7, 91520.0], [56.8, 91524.0], [56.9, 91526.0], [57.0, 91531.0], [57.1, 91536.0], [57.2, 91541.0], [57.3, 91544.0], [57.4, 91549.0], [57.5, 91555.0], [57.6, 91562.0], [57.7, 91566.0], [57.8, 91571.0], [57.9, 91575.0], [58.0, 91578.0], [58.1, 91580.0], [58.2, 91587.0], [58.3, 91591.0], [58.4, 91593.0], [58.5, 91595.0], [58.6, 91600.0], [58.7, 91603.0], [58.8, 91607.0], [58.9, 91611.0], [59.0, 91613.0], [59.1, 91619.0], [59.2, 91621.0], [59.3, 91623.0], [59.4, 91627.0], [59.5, 91630.0], [59.6, 91635.0], [59.7, 91639.0], [59.8, 91643.0], [59.9, 91648.0], [60.0, 91651.0], [60.1, 91653.0], [60.2, 91656.0], [60.3, 91660.0], [60.4, 91662.0], [60.5, 91669.0], [60.6, 91673.0], [60.7, 91676.0], [60.8, 91679.0], [60.9, 91684.0], [61.0, 91687.0], [61.1, 91692.0], [61.2, 91693.0], [61.3, 91695.0], [61.4, 91699.0], [61.5, 91702.0], [61.6, 91709.0], [61.7, 91713.0], [61.8, 91716.0], [61.9, 91718.0], [62.0, 91720.0], [62.1, 91723.0], [62.2, 91725.0], [62.3, 91730.0], [62.4, 91735.0], [62.5, 91737.0], [62.6, 91740.0], [62.7, 91743.0], [62.8, 91748.0], [62.9, 91751.0], [63.0, 91756.0], [63.1, 91763.0], [63.2, 91767.0], [63.3, 91769.0], [63.4, 91772.0], [63.5, 91778.0], [63.6, 91784.0], [63.7, 91787.0], [63.8, 91793.0], [63.9, 91795.0], [64.0, 91800.0], [64.1, 91808.0], [64.2, 91811.0], [64.3, 91815.0], [64.4, 91821.0], [64.5, 91824.0], [64.6, 91826.0], [64.7, 91828.0], [64.8, 91840.0], [64.9, 91843.0], [65.0, 91845.0], [65.1, 91849.0], [65.2, 91853.0], [65.3, 91855.0], [65.4, 91862.0], [65.5, 91865.0], [65.6, 91866.0], [65.7, 91868.0], [65.8, 91871.0], [65.9, 91876.0], [66.0, 91880.0], [66.1, 91892.0], [66.2, 91894.0], [66.3, 91897.0], [66.4, 91899.0], [66.5, 91901.0], [66.6, 91904.0], [66.7, 91906.0], [66.8, 91909.0], [66.9, 91912.0], [67.0, 91919.0], [67.1, 91925.0], [67.2, 91930.0], [67.3, 91935.0], [67.4, 91941.0], [67.5, 91947.0], [67.6, 91950.0], [67.7, 91954.0], [67.8, 91958.0], [67.9, 91963.0], [68.0, 91967.0], [68.1, 91972.0], [68.2, 91976.0], [68.3, 91981.0], [68.4, 91984.0], [68.5, 91990.0], [68.6, 91993.0], [68.7, 91995.0], [68.8, 92000.0], [68.9, 92005.0], [69.0, 92008.0], [69.1, 92011.0], [69.2, 92018.0], [69.3, 92022.0], [69.4, 92029.0], [69.5, 92033.0], [69.6, 92043.0], [69.7, 92046.0], [69.8, 92052.0], [69.9, 92058.0], [70.0, 92060.0], [70.1, 92067.0], [70.2, 92070.0], [70.3, 92073.0], [70.4, 92077.0], [70.5, 92079.0], [70.6, 92081.0], [70.7, 92086.0], [70.8, 92090.0], [70.9, 92095.0], [71.0, 92102.0], [71.1, 92105.0], [71.2, 92108.0], [71.3, 92113.0], [71.4, 92117.0], [71.5, 92124.0], [71.6, 92135.0], [71.7, 92139.0], [71.8, 92142.0], [71.9, 92148.0], [72.0, 92152.0], [72.1, 92155.0], [72.2, 92159.0], [72.3, 92170.0], [72.4, 92175.0], [72.5, 92177.0], [72.6, 92180.0], [72.7, 92181.0], [72.8, 92187.0], [72.9, 92192.0], [73.0, 92197.0], [73.1, 92200.0], [73.2, 92207.0], [73.3, 92216.0], [73.4, 92219.0], [73.5, 92227.0], [73.6, 92233.0], [73.7, 92238.0], [73.8, 92243.0], [73.9, 92247.0], [74.0, 92252.0], [74.1, 92257.0], [74.2, 92264.0], [74.3, 92267.0], [74.4, 92272.0], [74.5, 92277.0], [74.6, 92282.0], [74.7, 92290.0], [74.8, 92294.0], [74.9, 92298.0], [75.0, 92301.0], [75.1, 92303.0], [75.2, 92306.0], [75.3, 92308.0], [75.4, 92314.0], [75.5, 92319.0], [75.6, 92327.0], [75.7, 92330.0], [75.8, 92342.0], [75.9, 92347.0], [76.0, 92354.0], [76.1, 92360.0], [76.2, 92365.0], [76.3, 92374.0], [76.4, 92378.0], [76.5, 92389.0], [76.6, 92399.0], [76.7, 92403.0], [76.8, 92408.0], [76.9, 92413.0], [77.0, 92423.0], [77.1, 92431.0], [77.2, 92441.0], [77.3, 92446.0], [77.4, 92457.0], [77.5, 92467.0], [77.6, 92481.0], [77.7, 92486.0], [77.8, 92496.0], [77.9, 92508.0], [78.0, 92513.0], [78.1, 92517.0], [78.2, 92533.0], [78.3, 92543.0], [78.4, 92556.0], [78.5, 92564.0], [78.6, 92573.0], [78.7, 92585.0], [78.8, 92601.0], [78.9, 92614.0], [79.0, 92626.0], [79.1, 92633.0], [79.2, 92645.0], [79.3, 92657.0], [79.4, 92659.0], [79.5, 92665.0], [79.6, 92678.0], [79.7, 92688.0], [79.8, 92698.0], [79.9, 92704.0], [80.0, 92713.0], [80.1, 92724.0], [80.2, 92732.0], [80.3, 92745.0], [80.4, 92754.0], [80.5, 92763.0], [80.6, 92773.0], [80.7, 92782.0], [80.8, 92789.0], [80.9, 92798.0], [81.0, 92804.0], [81.1, 92813.0], [81.2, 92825.0], [81.3, 92829.0], [81.4, 92843.0], [81.5, 92848.0], [81.6, 92861.0], [81.7, 92873.0], [81.8, 92883.0], [81.9, 92896.0], [82.0, 92919.0], [82.1, 92933.0], [82.2, 92951.0], [82.3, 92965.0], [82.4, 92977.0], [82.5, 92996.0], [82.6, 93013.0], [82.7, 93054.0], [82.8, 93070.0], [82.9, 93092.0], [83.0, 93124.0], [83.1, 93152.0], [83.2, 93188.0], [83.3, 93238.0], [83.4, 93264.0], [83.5, 93329.0], [83.6, 93363.0], [83.7, 93396.0], [83.8, 93430.0], [83.9, 93546.0], [84.0, 93597.0], [84.1, 93629.0], [84.2, 93762.0], [84.3, 93854.0], [84.4, 94002.0], [84.5, 94085.0], [84.6, 94121.0], [84.7, 94358.0], [84.8, 94418.0], [84.9, 94451.0], [85.0, 94463.0], [85.1, 94570.0], [85.2, 94619.0], [85.3, 94654.0], [85.4, 94674.0], [85.5, 94732.0], [85.6, 94771.0], [85.7, 94818.0], [85.8, 94863.0], [85.9, 94889.0], [86.0, 94921.0], [86.1, 94962.0], [86.2, 95010.0], [86.3, 95045.0], [86.4, 95071.0], [86.5, 95109.0], [86.6, 95171.0], [86.7, 95220.0], [86.8, 95251.0], [86.9, 95270.0], [87.0, 95327.0], [87.1, 95346.0], [87.2, 95361.0], [87.3, 95432.0], [87.4, 95467.0], [87.5, 95505.0], [87.6, 95526.0], [87.7, 95568.0], [87.8, 95604.0], [87.9, 95645.0], [88.0, 95676.0], [88.1, 95709.0], [88.2, 95760.0], [88.3, 95780.0], [88.4, 95790.0], [88.5, 95812.0], [88.6, 95833.0], [88.7, 95874.0], [88.8, 95901.0], [88.9, 95947.0], [89.0, 95988.0], [89.1, 96002.0], [89.2, 96026.0], [89.3, 96053.0], [89.4, 96092.0], [89.5, 96105.0], [89.6, 96125.0], [89.7, 96143.0], [89.8, 96184.0], [89.9, 96202.0], [90.0, 96215.0], [90.1, 96234.0], [90.2, 96245.0], [90.3, 96287.0], [90.4, 96320.0], [90.5, 96344.0], [90.6, 96361.0], [90.7, 96383.0], [90.8, 96393.0], [90.9, 96406.0], [91.0, 96415.0], [91.1, 96442.0], [91.2, 96464.0], [91.3, 96478.0], [91.4, 96514.0], [91.5, 96534.0], [91.6, 96555.0], [91.7, 96569.0], [91.8, 96584.0], [91.9, 96596.0], [92.0, 96635.0], [92.1, 96657.0], [92.2, 96671.0], [92.3, 96723.0], [92.4, 96737.0], [92.5, 96765.0], [92.6, 96774.0], [92.7, 96808.0], [92.8, 96833.0], [92.9, 96848.0], [93.0, 96864.0], [93.1, 96878.0], [93.2, 96911.0], [93.3, 96938.0], [93.4, 96975.0], [93.5, 97012.0], [93.6, 97038.0], [93.7, 97070.0], [93.8, 97080.0], [93.9, 97103.0], [94.0, 97128.0], [94.1, 97159.0], [94.2, 97176.0], [94.3, 97180.0], [94.4, 97198.0], [94.5, 97216.0], [94.6, 97256.0], [94.7, 97330.0], [94.8, 97360.0], [94.9, 97378.0], [95.0, 97463.0], [95.1, 97528.0], [95.2, 97563.0], [95.3, 97610.0], [95.4, 97659.0], [95.5, 97682.0], [95.6, 97715.0], [95.7, 97755.0], [95.8, 97789.0], [95.9, 97847.0], [96.0, 97859.0], [96.1, 97903.0], [96.2, 97922.0], [96.3, 97985.0], [96.4, 98044.0], [96.5, 98099.0], [96.6, 98117.0], [96.7, 98149.0], [96.8, 98173.0], [96.9, 98201.0], [97.0, 98269.0], [97.1, 98312.0], [97.2, 98339.0], [97.3, 98390.0], [97.4, 98450.0], [97.5, 98467.0], [97.6, 98481.0], [97.7, 98534.0], [97.8, 98571.0], [97.9, 98603.0], [98.0, 98717.0], [98.1, 98748.0], [98.2, 98844.0], [98.3, 98928.0], [98.4, 99045.0], [98.5, 99094.0], [98.6, 99192.0], [98.7, 99252.0], [98.8, 99326.0], [98.9, 99375.0], [99.0, 99473.0], [99.1, 99540.0], [99.2, 99547.0], [99.3, 99681.0], [99.4, 99774.0], [99.5, 99908.0], [99.6, 100145.0], [99.7, 100292.0], [99.8, 100695.0], [99.9, 101024.0]], "isOverall": false, "label": "addPersonToGroup", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 354.0, "series": [{"data": [[0.0, 354.0], [66700.0, 5.0], [69900.0, 2.0], [73100.0, 2.0], [76300.0, 1.0], [79500.0, 1.0], [82700.0, 2.0], [89100.0, 3.0], [92300.0, 82.0], [95500.0, 14.0], [98700.0, 10.0], [100.0, 45.0], [34500.0, 1.0], [36100.0, 1.0], [37700.0, 1.0], [39300.0, 3.0], [40900.0, 2.0], [42500.0, 1.0], [44100.0, 1.0], [47300.0, 3.0], [48900.0, 3.0], [50500.0, 3.0], [200.0, 37.0], [56900.0, 2.0], [58500.0, 2.0], [60100.0, 1.0], [64900.0, 4.0], [65800.0, 2.0], [69000.0, 1.0], [72200.0, 3.0], [300.0, 20.0], [75400.0, 3.0], [85000.0, 2.0], [88200.0, 6.0], [91400.0, 102.0], [94600.0, 15.0], [97800.0, 15.0], [101000.0, 2.0], [400.0, 14.0], [500.0, 9.0], [600.0, 8.0], [700.0, 3.0], [800.0, 8.0], [900.0, 6.0], [1000.0, 4.0], [1100.0, 4.0], [1200.0, 7.0], [1300.0, 1.0], [1400.0, 4.0], [1500.0, 10.0], [1600.0, 11.0], [1700.0, 1.0], [1800.0, 6.0], [1900.0, 3.0], [2000.0, 6.0], [2100.0, 4.0], [2200.0, 8.0], [2300.0, 4.0], [2400.0, 6.0], [2500.0, 7.0], [2600.0, 9.0], [2700.0, 7.0], [2800.0, 6.0], [2900.0, 10.0], [3000.0, 6.0], [3100.0, 6.0], [3300.0, 12.0], [3200.0, 4.0], [3400.0, 5.0], [3500.0, 9.0], [3600.0, 5.0], [3700.0, 4.0], [3800.0, 14.0], [3900.0, 4.0], [4000.0, 5.0], [4200.0, 3.0], [68100.0, 4.0], [4400.0, 6.0], [4600.0, 4.0], [71300.0, 1.0], [4800.0, 5.0], [5000.0, 5.0], [80900.0, 2.0], [5200.0, 4.0], [84100.0, 2.0], [5600.0, 4.0], [5400.0, 3.0], [87300.0, 3.0], [5800.0, 5.0], [90500.0, 17.0], [93700.0, 5.0], [6000.0, 5.0], [96900.0, 14.0], [6200.0, 3.0], [100100.0, 4.0], [6400.0, 5.0], [6600.0, 7.0], [6800.0, 5.0], [7000.0, 3.0], [7200.0, 2.0], [7400.0, 5.0], [7600.0, 2.0], [7800.0, 5.0], [8000.0, 2.0], [8400.0, 2.0], [8800.0, 4.0], [9200.0, 3.0], [9600.0, 5.0], [10000.0, 3.0], [10400.0, 1.0], [10800.0, 2.0], [11200.0, 1.0], [11600.0, 3.0], [12000.0, 4.0], [12400.0, 5.0], [12800.0, 2.0], [13200.0, 3.0], [13600.0, 3.0], [14000.0, 3.0], [14800.0, 4.0], [14400.0, 4.0], [15200.0, 2.0], [15600.0, 5.0], [16000.0, 2.0], [17600.0, 4.0], [18400.0, 3.0], [19200.0, 1.0], [20800.0, 3.0], [22400.0, 1.0], [23200.0, 3.0], [24000.0, 3.0], [24800.0, 2.0], [25600.0, 2.0], [26400.0, 1.0], [27200.0, 2.0], [29600.0, 2.0], [31200.0, 1.0], [32000.0, 1.0], [33600.0, 2.0], [35200.0, 1.0], [36800.0, 1.0], [38400.0, 3.0], [41600.0, 1.0], [44800.0, 1.0], [48000.0, 3.0], [51200.0, 3.0], [56000.0, 3.0], [57600.0, 2.0], [59200.0, 3.0], [64000.0, 2.0], [67200.0, 2.0], [76800.0, 3.0], [86400.0, 2.0], [89600.0, 5.0], [92800.0, 49.0], [96000.0, 20.0], [99200.0, 8.0], [67100.0, 3.0], [70300.0, 2.0], [73500.0, 1.0], [76700.0, 4.0], [83100.0, 1.0], [86300.0, 3.0], [89500.0, 4.0], [92700.0, 57.0], [95900.0, 13.0], [99100.0, 5.0], [36300.0, 1.0], [39500.0, 3.0], [41100.0, 1.0], [42700.0, 4.0], [44300.0, 2.0], [45900.0, 4.0], [49100.0, 2.0], [50700.0, 2.0], [52300.0, 1.0], [53900.0, 4.0], [55500.0, 3.0], [57100.0, 2.0], [61900.0, 1.0], [65100.0, 1.0], [66200.0, 2.0], [69400.0, 1.0], [72600.0, 4.0], [75800.0, 1.0], [79000.0, 1.0], [82200.0, 3.0], [85400.0, 2.0], [88600.0, 3.0], [91800.0, 123.0], [95000.0, 15.0], [98200.0, 10.0], [68500.0, 6.0], [71700.0, 2.0], [78100.0, 1.0], [81300.0, 4.0], [84500.0, 4.0], [90900.0, 44.0], [94100.0, 6.0], [97300.0, 16.0], [100500.0, 2.0], [16900.0, 1.0], [17700.0, 3.0], [18500.0, 3.0], [19300.0, 1.0], [20100.0, 1.0], [20900.0, 1.0], [21700.0, 1.0], [22500.0, 4.0], [23300.0, 2.0], [24100.0, 1.0], [24900.0, 1.0], [25700.0, 1.0], [28100.0, 1.0], [28900.0, 1.0], [29700.0, 1.0], [32100.0, 1.0], [33800.0, 1.0], [35400.0, 1.0], [37000.0, 2.0], [40200.0, 2.0], [41800.0, 4.0], [43400.0, 1.0], [46600.0, 1.0], [48200.0, 1.0], [51400.0, 1.0], [53000.0, 3.0], [54600.0, 4.0], [56200.0, 2.0], [57800.0, 5.0], [59400.0, 1.0], [61000.0, 2.0], [62600.0, 2.0], [67600.0, 3.0], [70800.0, 3.0], [74000.0, 2.0], [77200.0, 1.0], [83600.0, 2.0], [90000.0, 7.0], [93200.0, 12.0], [96400.0, 25.0], [99600.0, 5.0], [67500.0, 5.0], [73900.0, 2.0], [77100.0, 1.0], [83500.0, 2.0], [86700.0, 4.0], [89900.0, 2.0], [93100.0, 13.0], [96300.0, 25.0], [99500.0, 7.0], [33300.0, 1.0], [36500.0, 1.0], [38100.0, 3.0], [39700.0, 1.0], [41300.0, 1.0], [42900.0, 2.0], [44500.0, 2.0], [46100.0, 2.0], [49300.0, 2.0], [50900.0, 1.0], [52500.0, 1.0], [54100.0, 3.0], [55700.0, 2.0], [60500.0, 5.0], [62100.0, 2.0], [63700.0, 3.0], [65300.0, 3.0], [66600.0, 5.0], [69800.0, 4.0], [73000.0, 2.0], [76200.0, 1.0], [79400.0, 1.0], [82600.0, 5.0], [85800.0, 3.0], [89000.0, 3.0], [92200.0, 97.0], [95400.0, 13.0], [98600.0, 4.0], [68900.0, 3.0], [65700.0, 1.0], [72100.0, 4.0], [78500.0, 1.0], [81700.0, 2.0], [84900.0, 7.0], [88100.0, 3.0], [91300.0, 87.0], [94500.0, 6.0], [97700.0, 12.0], [100900.0, 1.0], [8500.0, 2.0], [8900.0, 1.0], [9300.0, 1.0], [9700.0, 1.0], [10100.0, 4.0], [10500.0, 2.0], [10900.0, 3.0], [11300.0, 2.0], [11700.0, 3.0], [12100.0, 1.0], [12500.0, 3.0], [12900.0, 2.0], [13300.0, 3.0], [13700.0, 2.0], [14100.0, 3.0], [14500.0, 1.0], [14900.0, 4.0], [15300.0, 2.0], [16100.0, 3.0], [17000.0, 5.0], [17800.0, 1.0], [18600.0, 2.0], [19400.0, 2.0], [20200.0, 1.0], [21800.0, 4.0], [25800.0, 1.0], [26600.0, 1.0], [27400.0, 2.0], [28200.0, 3.0], [29000.0, 3.0], [29800.0, 1.0], [30600.0, 1.0], [31400.0, 3.0], [32200.0, 1.0], [34000.0, 2.0], [35600.0, 2.0], [37200.0, 1.0], [38800.0, 1.0], [40400.0, 2.0], [42000.0, 1.0], [43600.0, 4.0], [45200.0, 2.0], [46800.0, 2.0], [50000.0, 1.0], [51600.0, 3.0], [53200.0, 3.0], [54800.0, 3.0], [56400.0, 3.0], [58000.0, 3.0], [59600.0, 1.0], [62800.0, 4.0], [64400.0, 4.0], [68000.0, 2.0], [71200.0, 3.0], [74400.0, 1.0], [80800.0, 4.0], [84000.0, 1.0], [87200.0, 1.0], [90400.0, 8.0], [93600.0, 6.0], [96800.0, 23.0], [100000.0, 1.0], [67900.0, 5.0], [71100.0, 2.0], [74300.0, 2.0], [77500.0, 1.0], [80700.0, 4.0], [83900.0, 3.0], [87100.0, 1.0], [90300.0, 6.0], [93500.0, 9.0], [96700.0, 20.0], [99900.0, 2.0], [35100.0, 3.0], [36700.0, 3.0], [41500.0, 3.0], [43100.0, 2.0], [46300.0, 1.0], [51100.0, 1.0], [54300.0, 1.0], [55900.0, 3.0], [57500.0, 4.0], [59100.0, 3.0], [60700.0, 2.0], [63900.0, 2.0], [65500.0, 2.0], [67000.0, 5.0], [73400.0, 3.0], [76600.0, 2.0], [83000.0, 2.0], [86200.0, 1.0], [89400.0, 1.0], [92600.0, 52.0], [95800.0, 16.0], [99000.0, 9.0], [66100.0, 2.0], [69300.0, 2.0], [72500.0, 1.0], [75700.0, 4.0], [82100.0, 2.0], [85300.0, 2.0], [88500.0, 3.0], [91700.0, 129.0], [94900.0, 12.0], [98100.0, 19.0], [17100.0, 4.0], [17900.0, 1.0], [18700.0, 2.0], [19500.0, 2.0], [20300.0, 2.0], [21100.0, 3.0], [21900.0, 3.0], [24300.0, 1.0], [25100.0, 1.0], [25900.0, 3.0], [26700.0, 3.0], [27500.0, 3.0], [28300.0, 2.0], [29900.0, 2.0], [30700.0, 2.0], [32300.0, 2.0], [34200.0, 3.0], [35800.0, 1.0], [37400.0, 2.0], [40600.0, 1.0], [42200.0, 3.0], [43800.0, 1.0], [50200.0, 2.0], [56600.0, 3.0], [59800.0, 2.0], [61400.0, 1.0], [63000.0, 1.0], [64600.0, 1.0], [68400.0, 3.0], [71600.0, 2.0], [74800.0, 1.0], [81200.0, 2.0], [84400.0, 5.0], [87600.0, 4.0], [90800.0, 37.0], [94000.0, 8.0], [97200.0, 10.0], [68300.0, 2.0], [74700.0, 4.0], [77900.0, 2.0], [81100.0, 2.0], [84300.0, 3.0], [87500.0, 1.0], [90700.0, 31.0], [97100.0, 28.0], [100300.0, 2.0], [33700.0, 2.0], [36900.0, 1.0], [38500.0, 2.0], [40100.0, 1.0], [41700.0, 2.0], [43300.0, 1.0], [44900.0, 1.0], [46500.0, 1.0], [48100.0, 4.0], [49700.0, 1.0], [54500.0, 2.0], [56100.0, 1.0], [57700.0, 2.0], [59300.0, 1.0], [62500.0, 1.0], [64100.0, 2.0], [67400.0, 2.0], [70600.0, 1.0], [73800.0, 1.0], [77000.0, 3.0], [80200.0, 6.0], [83400.0, 1.0], [86600.0, 2.0], [89800.0, 7.0], [93000.0, 22.0], [96200.0, 22.0], [99400.0, 9.0], [4100.0, 5.0], [4300.0, 6.0], [66500.0, 8.0], [4500.0, 6.0], [69700.0, 5.0], [4700.0, 6.0], [4900.0, 5.0], [5100.0, 5.0], [79300.0, 1.0], [5300.0, 5.0], [82500.0, 5.0], [85700.0, 2.0], [5500.0, 4.0], [88900.0, 5.0], [5700.0, 3.0], [92100.0, 106.0], [5900.0, 5.0], [6100.0, 4.0], [95300.0, 14.0], [6300.0, 3.0], [98500.0, 13.0], [6500.0, 1.0], [6700.0, 3.0], [6900.0, 3.0], [7100.0, 2.0], [7300.0, 4.0], [7500.0, 3.0], [7700.0, 3.0], [7900.0, 2.0], [8100.0, 3.0], [8200.0, 3.0], [8600.0, 4.0], [9000.0, 2.0], [9400.0, 2.0], [9800.0, 2.0], [10200.0, 1.0], [10600.0, 1.0], [11000.0, 3.0], [11400.0, 2.0], [11800.0, 3.0], [12200.0, 1.0], [13000.0, 2.0], [13400.0, 1.0], [13800.0, 1.0], [14200.0, 1.0], [14600.0, 2.0], [15400.0, 2.0], [15800.0, 3.0], [16200.0, 1.0], [16400.0, 3.0], [18000.0, 2.0], [19600.0, 2.0], [20400.0, 1.0], [21200.0, 1.0], [22800.0, 2.0], [23600.0, 4.0], [24400.0, 1.0], [25200.0, 2.0], [26000.0, 3.0], [26800.0, 2.0], [27600.0, 1.0], [28400.0, 2.0], [29200.0, 1.0], [30000.0, 1.0], [32400.0, 2.0], [32800.0, 1.0], [36000.0, 1.0], [39200.0, 3.0], [40800.0, 3.0], [42400.0, 2.0], [47200.0, 2.0], [48800.0, 1.0], [50400.0, 1.0], [55200.0, 1.0], [56800.0, 1.0], [58400.0, 1.0], [60000.0, 4.0], [64800.0, 1.0], [65600.0, 1.0], [68800.0, 1.0], [75200.0, 1.0], [78400.0, 2.0], [81600.0, 1.0], [84800.0, 2.0], [88000.0, 2.0], [91200.0, 97.0], [94400.0, 13.0], [97600.0, 16.0], [100800.0, 2.0], [68700.0, 7.0], [71900.0, 1.0], [75100.0, 2.0], [78300.0, 4.0], [81500.0, 2.0], [84700.0, 1.0], [91100.0, 76.0], [94300.0, 5.0], [97500.0, 10.0], [100700.0, 1.0], [33900.0, 1.0], [35500.0, 1.0], [37100.0, 1.0], [40300.0, 1.0], [45100.0, 1.0], [46700.0, 1.0], [49900.0, 1.0], [56300.0, 1.0], [57900.0, 2.0], [59500.0, 1.0], [61100.0, 1.0], [62700.0, 3.0], [64300.0, 2.0], [67800.0, 3.0], [71000.0, 5.0], [80600.0, 2.0], [83800.0, 4.0], [87000.0, 2.0], [90200.0, 2.0], [93400.0, 4.0], [96600.0, 18.0], [99800.0, 4.0], [66900.0, 3.0], [70100.0, 2.0], [73300.0, 1.0], [79700.0, 6.0], [82900.0, 2.0], [86100.0, 2.0], [89300.0, 1.0], [92500.0, 48.0], [95700.0, 20.0], [98900.0, 3.0], [16500.0, 4.0], [18100.0, 2.0], [18900.0, 2.0], [19700.0, 1.0], [20500.0, 1.0], [21300.0, 3.0], [22100.0, 1.0], [22900.0, 1.0], [23700.0, 1.0], [24500.0, 5.0], [25300.0, 1.0], [26100.0, 1.0], [26900.0, 2.0], [27700.0, 1.0], [28500.0, 2.0], [30100.0, 3.0], [30900.0, 1.0], [31700.0, 2.0], [32500.0, 1.0], [33000.0, 1.0], [34600.0, 2.0], [36200.0, 1.0], [39400.0, 2.0], [41000.0, 2.0], [44200.0, 5.0], [45800.0, 3.0], [47400.0, 1.0], [49000.0, 1.0], [52200.0, 1.0], [55400.0, 4.0], [58600.0, 2.0], [60200.0, 2.0], [63400.0, 1.0], [65000.0, 1.0], [66000.0, 4.0], [69200.0, 2.0], [72400.0, 2.0], [75600.0, 1.0], [78800.0, 1.0], [82000.0, 2.0], [85200.0, 1.0], [88400.0, 3.0], [91600.0, 145.0], [94800.0, 16.0], [98000.0, 9.0], [69100.0, 3.0], [75500.0, 2.0], [81900.0, 2.0], [85100.0, 4.0], [88300.0, 2.0], [91500.0, 118.0], [94700.0, 9.0], [97900.0, 12.0], [101100.0, 2.0], [34100.0, 1.0], [35700.0, 1.0], [37300.0, 1.0], [40500.0, 1.0], [42100.0, 2.0], [43700.0, 2.0], [45300.0, 3.0], [46900.0, 2.0], [48500.0, 2.0], [50100.0, 2.0], [51700.0, 4.0], [53300.0, 2.0], [56500.0, 2.0], [58100.0, 3.0], [59700.0, 2.0], [61300.0, 2.0], [62900.0, 2.0], [64500.0, 3.0], [71400.0, 2.0], [74600.0, 1.0], [77800.0, 1.0], [87400.0, 1.0], [90600.0, 15.0], [93800.0, 8.0], [97000.0, 23.0], [100200.0, 4.0], [67300.0, 1.0], [76900.0, 2.0], [80100.0, 1.0], [83300.0, 2.0], [86500.0, 4.0], [89700.0, 2.0], [92900.0, 30.0], [96100.0, 23.0], [99300.0, 7.0], [8300.0, 5.0], [8700.0, 3.0], [9100.0, 4.0], [9500.0, 3.0], [9900.0, 3.0], [10300.0, 5.0], [10700.0, 4.0], [11100.0, 4.0], [11500.0, 1.0], [11900.0, 3.0], [12300.0, 2.0], [12700.0, 2.0], [13100.0, 1.0], [13500.0, 2.0], [13900.0, 1.0], [14700.0, 2.0], [15900.0, 3.0], [16600.0, 2.0], [19000.0, 2.0], [19800.0, 4.0], [20600.0, 3.0], [21400.0, 1.0], [22200.0, 1.0], [23800.0, 1.0], [25400.0, 1.0], [28600.0, 2.0], [29400.0, 3.0], [30200.0, 1.0], [31000.0, 4.0], [33200.0, 4.0], [34800.0, 2.0], [36400.0, 1.0], [38000.0, 1.0], [39600.0, 3.0], [41200.0, 3.0], [42800.0, 1.0], [44400.0, 1.0], [46000.0, 2.0], [47600.0, 2.0], [52400.0, 2.0], [54000.0, 5.0], [57200.0, 1.0], [58800.0, 1.0], [60400.0, 1.0], [62000.0, 3.0], [63600.0, 2.0], [65200.0, 1.0], [66400.0, 4.0], [69600.0, 4.0], [79200.0, 2.0], [82400.0, 2.0], [85600.0, 2.0], [92000.0, 111.0], [95200.0, 13.0], [98400.0, 16.0], [101600.0, 2.0], [66300.0, 5.0], [69500.0, 2.0], [72700.0, 1.0], [79100.0, 2.0], [82300.0, 2.0], [85500.0, 5.0], [91900.0, 118.0], [95100.0, 10.0], [98300.0, 11.0], [35900.0, 2.0], [37500.0, 1.0], [39100.0, 1.0], [40700.0, 1.0], [42300.0, 1.0], [43900.0, 2.0], [45500.0, 2.0], [48700.0, 1.0], [50300.0, 3.0], [53500.0, 1.0], [55100.0, 1.0], [56700.0, 1.0], [59900.0, 2.0], [61500.0, 2.0], [63100.0, 1.0], [64700.0, 2.0], [68600.0, 3.0], [71800.0, 2.0], [75000.0, 1.0], [78200.0, 3.0], [81400.0, 3.0], [84600.0, 3.0], [87800.0, 3.0], [91000.0, 73.0], [94200.0, 1.0], [97400.0, 6.0], [100600.0, 1.0], [67700.0, 2.0], [70900.0, 3.0], [80500.0, 2.0], [86900.0, 2.0], [90100.0, 1.0], [93300.0, 16.0], [96500.0, 30.0], [99700.0, 4.0], [17500.0, 2.0], [18300.0, 1.0], [19100.0, 1.0], [19900.0, 1.0], [20700.0, 1.0], [21500.0, 1.0], [22300.0, 2.0], [23900.0, 1.0], [25500.0, 1.0], [27100.0, 2.0], [29500.0, 1.0], [30300.0, 1.0], [31100.0, 2.0], [31900.0, 1.0], [33400.0, 1.0], [35000.0, 1.0], [39800.0, 1.0], [41400.0, 1.0], [43000.0, 1.0], [44600.0, 1.0], [47800.0, 1.0], [49400.0, 3.0], [51000.0, 1.0], [52600.0, 1.0], [54200.0, 1.0], [55800.0, 3.0], [57400.0, 2.0], [59000.0, 2.0], [62200.0, 2.0], [65400.0, 3.0], [66800.0, 2.0], [70000.0, 1.0], [79600.0, 3.0], [82800.0, 3.0], [89200.0, 5.0], [92400.0, 62.0], [95600.0, 16.0], [98800.0, 6.0]], "isOverall": false, "label": "addPersonToGroup", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 101600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 50.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2436.0, "series": [{"data": [[0.0, 438.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 50.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2125.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2436.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.69999326E12, "maxY": 600.0, "series": [{"data": [[1.69999392E12, 196.0134048257374], [1.69999362E12, 600.0], [1.69999398E12, 5.0], [1.69999368E12, 600.0], [1.69999338E12, 470.4670050761423], [1.69999332E12, 122.32791327913274], [1.69999374E12, 600.0], [1.69999344E12, 600.0], [1.69999326E12, 15.679245283018867], [1.6999938E12, 599.9869109947643], [1.6999935E12, 600.0], [1.69999386E12, 526.0925449871463], [1.69999356E12, 600.0]], "isOverall": false, "label": "jp@gc - Add Person To Group - Stress", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69999398E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17.5, "minX": 1.0, "maxY": 101643.0, "series": [{"data": [[2.0, 88978.0], [3.0, 89332.0], [4.0, 44696.0], [5.0, 22870.25], [6.0, 91374.0], [7.0, 29501.333333333332], [8.0, 46312.5], [9.0, 35693.5], [10.0, 30803.333333333332], [11.0, 23082.75], [12.0, 23842.666666666668], [13.0, 18627.25], [14.0, 36095.0], [15.0, 17.5], [16.0, 31352.6], [17.0, 19729.75], [18.0, 15609.666666666666], [19.0, 13216.5], [20.0, 39645.5], [21.0, 15854.0], [22.0, 15838.8], [23.0, 8927.222222222223], [24.0, 16298.0], [25.0, 27207.666666666668], [26.0, 11673.142857142857], [27.0, 8217.899999999998], [28.0, 20758.75], [29.0, 10373.0], [30.0, 27680.666666666668], [31.0, 11830.42857142857], [32.0, 10400.5], [33.0, 7543.181818181818], [34.0, 18897.4], [35.0, 10273.125], [36.0, 8286.199999999999], [37.0, 19218.4], [38.0, 7454.2307692307695], [39.0, 10776.222222222223], [40.0, 10750.444444444445], [41.0, 12015.625], [42.0, 8503.4], [43.0, 9397.666666666666], [44.0, 8521.499999999998], [45.0, 9542.0], [46.0, 8598.7], [47.0, 8575.499999999998], [48.0, 9603.4], [49.0, 8005.250000000001], [50.0, 10621.444444444445], [51.0, 6602.692307692308], [52.0, 7769.909090909091], [53.0, 7777.636363636364], [54.0, 8532.3], [55.0, 7092.666666666666], [56.0, 7094.750000000001], [57.0, 6572.692307692308], [58.0, 7757.636363636364], [59.0, 7139.916666666666], [60.0, 6189.928571428572], [61.0, 7247.583333333333], [62.0, 6760.384615384615], [63.0, 9703.222222222223], [64.0, 6386.357142857143], [65.0, 9869.7], [66.0, 8134.909090909091], [67.0, 8215.272727272726], [68.0, 8251.818181818182], [69.0, 10032.888888888889], [70.0, 11162.777777777777], [71.0, 636.875], [72.0, 19820.11111111111], [73.0, 15379.666666666668], [74.0, 11641.625], [75.0, 9649.900000000001], [76.0, 15601.999999999998], [77.0, 12014.75], [78.0, 13534.42857142857], [79.0, 12058.5], [80.0, 12481.625], [81.0, 14130.857142857141], [82.0, 12611.375], [83.0, 12766.25], [84.0, 21226.4], [85.0, 12718.777777777777], [86.0, 25968.75], [87.0, 11789.400000000001], [88.0, 21864.8], [89.0, 16561.428571428572], [90.0, 18111.833333333336], [91.0, 14239.125], [92.0, 17071.833333333332], [93.0, 24323.0], [94.0, 13542.375], [95.0, 20173.2], [96.0, 15322.714285714286], [97.0, 20401.2], [98.0, 15454.285714285716], [99.0, 20506.2], [100.0, 15654.285714285714], [101.0, 25145.5], [102.0, 17894.0], [103.0, 20927.8], [104.0, 17996.5], [105.0, 21005.8], [106.0, 16195.714285714286], [107.0, 46843.5], [108.0, 14752.625], [109.0, 32344.333333333332], [110.0, 16107.999999999998], [111.0, 22761.0], [112.0, 46813.5], [113.0, 12606.8], [115.0, 19825.666666666668], [114.0, 90086.0], [116.0, 18021.5], [117.0, 25749.0], [118.0, 18680.166666666664], [119.0, 33080.0], [120.0, 18724.5], [121.0, 26092.75], [122.0, 21681.8], [123.0, 26210.0], [124.0, 21965.6], [125.0, 22085.4], [126.0, 22069.6], [127.0, 33510.66666666667], [128.0, 26486.0], [129.0, 20748.666666666668], [130.0, 24263.4], [131.0, 36995.33333333333], [132.0, 29059.25], [133.0, 20924.333333333332], [134.0, 37049.66666666667], [135.0, 24597.2], [136.0, 26938.25], [137.0, 25621.75], [138.0, 34102.33333333333], [139.0, 27124.75], [140.0, 20328.333333333336], [141.0, 27266.75], [142.0, 34374.0], [143.0, 20577.5], [145.0, 20609.166666666664], [146.0, 31112.5], [147.0, 34959.0], [148.0, 20816.666666666668], [149.0, 34954.33333333333], [150.0, 27912.5], [151.0, 34972.0], [144.0, 91773.0], [152.0, 28008.75], [153.0, 23912.0], [154.0, 49661.5], [155.0, 28390.75], [156.0, 24383.8], [157.0, 28456.25], [158.0, 35629.66666666667], [159.0, 35652.33333333333], [160.0, 24538.0], [161.0, 35690.66666666667], [162.0, 26927.5], [163.0, 28764.5], [164.0, 35779.0], [165.0, 30521.5], [166.0, 28898.75], [167.0, 28976.75], [168.0, 49665.5], [169.0, 25061.0], [170.0, 36232.66666666667], [172.0, 22548.5], [173.0, 22592.166666666668], [175.0, 50386.5], [174.0, 91489.0], [171.0, 91538.0], [176.0, 27109.4], [177.0, 29930.25], [178.0, 36794.33333333333], [179.0, 54326.0], [180.0, 50892.0], [181.0, 23391.5], [182.0, 31679.5], [183.0, 37402.33333333333], [184.0, 39280.0], [185.0, 55801.5], [186.0, 27923.4], [187.0, 39480.0], [188.0, 39574.33333333333], [189.0, 51022.5], [190.0, 30725.0], [191.0, 26625.6], [192.0, 51248.5], [193.0, 51310.0], [194.0, 51339.0], [195.0, 17251.5], [196.0, 51392.5], [197.0, 51740.5], [198.0, 38159.66666666667], [199.0, 31376.25], [200.0, 38281.66666666667], [201.0, 38187.0], [202.0, 51529.5], [203.0, 31501.0], [204.0, 31624.25], [205.0, 40713.66666666667], [206.0, 38355.33333333333], [207.0, 38306.33333333333], [208.0, 27856.4], [209.0, 38330.0], [211.0, 38509.0], [212.0, 32037.75], [213.0, 51812.0], [214.0, 28406.6], [215.0, 52493.5], [210.0, 90911.0], [216.0, 55230.0], [217.0, 39509.0], [218.0, 34590.5], [219.0, 34595.5], [220.0, 53152.5], [221.0, 53270.5], [222.0, 26573.0], [223.0, 101643.0], [224.0, 33335.75], [225.0, 55884.5], [226.0, 52927.5], [227.0, 36530.5], [228.0, 29494.4], [230.0, 42770.33333333333], [231.0, 40222.0], [229.0, 92106.0], [232.0, 42542.66666666667], [233.0, 40306.0], [234.0, 53873.0], [235.0, 33993.75], [236.0, 53263.0], [237.0, 53407.5], [238.0, 40626.66666666667], [239.0, 31747.8], [240.0, 53773.5], [241.0, 41057.33333333333], [242.0, 40932.0], [243.0, 53610.0], [244.0, 53741.5], [245.0, 36232.25], [246.0, 33296.5], [247.0, 53774.0], [248.0, 41305.0], [249.0, 56988.5], [250.0, 53856.0], [251.0, 28671.833333333336], [253.0, 54179.0], [254.0, 35324.0], [255.0, 91919.0], [252.0, 91686.0], [257.0, 58394.5], [256.0, 29175.33333333333], [259.0, 54717.5], [258.0, 92807.0], [260.0, 42054.33333333333], [261.0, 42025.66666666667], [262.0, 17106.6], [263.0, 94715.0], [265.0, 42169.33333333333], [267.0, 29990.166666666664], [266.0, 90658.0], [268.0, 42222.66666666667], [269.0, 57864.0], [270.0, 54637.0], [271.0, 54731.0], [264.0, 91315.0], [273.0, 42755.33333333333], [272.0, 42854.0], [274.0, 42961.0], [275.0, 43161.66666666667], [276.0, 45254.33333333333], [277.0, 43291.0], [278.0, 58609.5], [279.0, 58569.5], [280.0, 39341.0], [287.0, 39398.0], [284.0, 46079.33333333333], [285.0, 96922.0], [286.0, 43586.66666666667], [281.0, 43537.66666666667], [282.0, 43567.0], [283.0, 55617.5], [290.0, 55606.0], [289.0, 39524.25], [288.0, 91243.0], [291.0, 55726.5], [300.0, 56560.0], [301.0, 38865.25], [302.0, 44830.33333333333], [303.0, 60300.5], [292.0, 55879.0], [293.0, 44160.66666666667], [294.0, 44353.33333333333], [295.0, 35339.25], [296.0, 56472.5], [298.0, 44659.33333333333], [297.0, 91720.0], [299.0, 44649.33333333333], [305.0, 56396.0], [304.0, 56328.0], [306.0, 44901.0], [317.0, 91268.5], [307.0, 91336.0], [318.0, 39985.75], [319.0, 57687.0], [308.0, 35771.8], [309.0, 45095.33333333333], [310.0, 56733.5], [311.0, 60219.0], [312.0, 59840.5], [314.0, 36230.8], [313.0, 91081.0], [315.0, 45476.66666666667], [321.0, 40368.5], [320.0, 64714.5], [322.0, 40462.75], [323.0, 99473.0], [332.0, 58208.75], [333.0, 58300.0], [334.0, 41516.0], [335.0, 92468.0], [324.0, 57509.5], [325.0, 46168.0], [326.0, 60944.5], [327.0, 61792.5], [328.0, 46252.33333333333], [329.0, 46322.0], [330.0, 57818.0], [331.0, 24481.0], [338.0, 58466.5], [336.0, 44746.75], [337.0, 98459.0], [339.0, 47334.66666666667], [348.0, 50047.0], [349.0, 59048.0], [351.0, 48379.33333333333], [350.0, 91906.0], [340.0, 47404.33333333333], [341.0, 43016.66666666667], [342.0, 58652.0], [343.0, 47872.0], [344.0, 60908.5], [345.0, 42575.75], [347.0, 48179.0], [346.0, 92491.0], [353.0, 43029.0], [352.0, 59131.0], [355.0, 43028.75], [354.0, 91496.0], [364.0, 91499.0], [365.0, 49354.33333333333], [367.0, 44366.0], [366.0, 91746.0], [357.0, 62523.5], [356.0, 91045.0], [358.0, 59069.0], [359.0, 48620.0], [360.0, 48777.33333333333], [361.0, 48821.33333333333], [362.0, 63763.0], [363.0, 64266.5], [369.0, 51824.0], [368.0, 60368.5], [370.0, 60292.0], [371.0, 53400.33333333333], [373.0, 50126.0], [372.0, 92419.0], [374.0, 52680.0], [375.0, 60969.5], [376.0, 64224.5], [383.0, 60702.5], [381.0, 52607.0], [380.0, 93188.0], [382.0, 52771.33333333333], [377.0, 60904.0], [378.0, 47033.75], [379.0, 92308.0], [396.0, 61683.0], [386.0, 46022.66666666667], [384.0, 45890.33333333333], [385.0, 91504.0], [391.0, 92330.0], [387.0, 61272.0], [388.0, 61210.0], [389.0, 92061.0], [390.0, 43164.2], [392.0, 51571.0], [393.0, 51464.66666666667], [394.0, 61514.0], [395.0, 91897.0], [397.0, 65035.0], [398.0, 61754.5], [399.0, 51862.66666666667], [403.0, 51996.66666666667], [401.0, 47312.75], [400.0, 61709.5], [407.0, 92359.0], [406.0, 92115.0], [402.0, 52374.0], [404.0, 61821.0], [405.0, 61937.0], [408.0, 48084.66666666667], [413.0, 65943.0], [412.0, 100695.0], [414.0, 99326.0], [415.0, 33808.5], [409.0, 53077.66666666667], [410.0, 62942.0], [411.0, 48176.0], [419.0, 66408.5], [417.0, 66420.5], [416.0, 73128.66666666667], [418.0, 50413.5], [420.0, 50306.75], [422.0, 92200.0], [421.0, 92472.0], [423.0, 53822.0], [424.0, 67295.0], [429.0, 49618.0], [428.0, 92134.0], [430.0, 92658.0], [431.0, 92536.0], [425.0, 63375.0], [426.0, 56974.66666666667], [427.0, 63533.0], [444.0, 57763.66666666667], [433.0, 35569.0], [432.0, 54506.0], [439.0, 92159.0], [434.0, 64046.5], [435.0, 92266.0], [436.0, 48613.2], [437.0, 91920.0], [438.0, 64349.0], [440.0, 54985.33333333333], [441.0, 36795.0], [442.0, 36709.0], [443.0, 91967.33333333333], [445.0, 37038.0], [446.0, 64639.0], [447.0, 64970.5], [449.0, 57871.33333333333], [448.0, 65116.0], [450.0, 64987.5], [460.0, 92270.0], [451.0, 92325.0], [462.0, 39182.0], [463.0, 66016.83333333333], [453.0, 68696.0], [452.0, 92117.0], [454.0, 54136.5], [455.0, 50170.2], [456.0, 68360.5], [457.0, 68453.5], [459.0, 38522.0], [458.0, 91194.0], [476.0, 57876.33333333333], [464.0, 60850.6], [466.0, 59225.0], [465.0, 92977.0], [467.0, 92873.0], [468.0, 75145.33333333333], [469.0, 92654.0], [470.0, 65738.0], [471.0, 52653.5], [472.0, 55181.0], [473.0, 47491.42857142857], [475.0, 99443.0], [474.0, 91623.0], [478.0, 66683.0], [477.0, 92229.0], [479.0, 92315.0], [481.0, 58206.0], [480.0, 49892.25], [482.0, 41358.0], [483.0, 66970.25], [485.0, 70274.0], [484.0, 92786.0], [486.0, 80144.0], [487.0, 66484.5], [488.0, 54298.75], [494.0, 78570.0], [495.0, 51591.0], [492.0, 41691.0], [493.0, 75485.0], [489.0, 58592.66666666667], [491.0, 67139.0], [490.0, 92046.0], [497.0, 52399.6], [496.0, 54918.5], [499.0, 53463.5], [498.0, 92628.0], [508.0, 59641.666666666664], [509.0, 59575.0], [510.0, 75862.0], [511.0, 84494.33333333333], [500.0, 67341.5], [501.0, 43468.0], [503.0, 67077.0], [502.0, 91976.5], [504.0, 59045.0], [505.0, 54013.6], [507.0, 67505.5], [506.0, 91719.0], [518.0, 60688.0], [514.0, 71228.5], [512.0, 76197.33333333333], [513.0, 92799.0], [526.0, 68665.5], [527.0, 68845.0], [515.0, 52435.75], [516.0, 78907.66666666667], [517.0, 60298.333333333336], [529.0, 45561.5], [528.0, 92141.8], [530.0, 92537.5], [542.0, 69779.0], [543.0, 69395.5], [539.0, 77737.33333333333], [540.0, 89272.0], [541.0, 61806.333333333336], [536.0, 57799.0], [519.0, 92639.0], [537.0, 100292.0], [538.0, 69794.5], [531.0, 56192.66666666667], [534.0, 69808.5], [533.0, 86975.66666666667], [532.0, 92588.0], [535.0, 76014.4], [520.0, 65166.8], [521.0, 68083.5], [524.0, 55251.0], [523.0, 92620.66666666667], [522.0, 92613.0], [525.0, 61677.66666666667], [547.0, 67781.28571428571], [556.0, 58965.25], [545.0, 69704.5], [544.0, 61588.333333333336], [558.0, 70472.625], [557.0, 92496.25], [559.0, 96388.25], [546.0, 73745.25], [549.0, 77813.66666666667], [548.0, 92729.0], [551.0, 92786.66666666667], [568.0, 79279.0], [569.0, 66727.0], [570.0, 84579.0], [571.0, 77778.0], [574.0, 58271.4], [573.0, 96249.0], [572.0, 94007.75], [575.0, 78649.66666666667], [560.0, 98613.0], [562.0, 89244.4], [561.0, 93381.0], [563.0, 77544.66666666667], [564.0, 63353.666666666664], [565.0, 70472.25], [567.0, 70926.0], [566.0, 96265.5], [552.0, 79237.0], [553.0, 60184.142857142855], [555.0, 82961.0], [554.0, 95022.66666666667], [577.0, 86460.5], [576.0, 71622.0], [591.0, 78506.66666666667], [590.0, 93876.18181818181], [578.0, 64101.0], [579.0, 71965.0], [580.0, 78912.33333333333], [581.0, 74726.5], [592.0, 80189.16666666667], [594.0, 94091.22222222222], [593.0, 93067.25], [600.0, 88016.53639010189], [583.0, 93738.5], [582.0, 94229.53333333333], [595.0, 83351.58333333334], [596.0, 67277.5], [597.0, 88932.0], [599.0, 84903.33333333331], [598.0, 95650.85714285714], [584.0, 64771.0], [585.0, 92798.0], [586.0, 74863.875], [587.0, 77319.30769230769], [588.0, 92657.0], [589.0, 72096.0], [1.0, 80641.0]], "isOverall": false, "label": "addPersonToGroup", "isController": false}, {"data": [[442.42721330956726, 66042.40166369591]], "isOverall": false, "label": "addPersonToGroup-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 600.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 35.1, "minX": 1.69999326E12, "maxY": 15390.216666666667, "series": [{"data": [[1.69999392E12, 3925.5333333333333], [1.69999362E12, 4270.933333333333], [1.69999398E12, 121.0], [1.69999368E12, 4271.666666666667], [1.69999338E12, 5217.266666666666], [1.69999332E12, 15390.216666666667], [1.69999374E12, 4203.466666666666], [1.69999344E12, 4698.466666666666], [1.69999326E12, 736.3666666666667], [1.6999938E12, 4059.733333333333], [1.6999935E12, 4482.866666666667], [1.69999386E12, 4082.55], [1.69999356E12, 4355.266666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69999392E12, 1454.7], [1.69999362E12, 1513.2], [1.69999398E12, 35.1], [1.69999368E12, 1540.5], [1.69999338E12, 1536.6], [1.69999332E12, 4300.766666666666], [1.69999374E12, 1528.8], [1.69999344E12, 1517.1], [1.69999326E12, 204.78333333333333], [1.6999938E12, 1489.8], [1.6999935E12, 1517.1], [1.69999386E12, 1517.1], [1.69999356E12, 1517.1]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69999398E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 29.301886792452834, "minX": 1.69999326E12, "maxY": 93222.61182519286, "series": [{"data": [[1.69999392E12, 91693.38605898125], [1.69999362E12, 92498.1159793814], [1.69999398E12, 86992.0], [1.69999368E12, 92468.15189873411], [1.69999338E12, 39019.923857868016], [1.69999332E12, 5439.832881662148], [1.69999374E12, 92605.7270408163], [1.69999344E12, 66602.23136246788], [1.69999326E12, 29.301886792452834], [1.6999938E12, 92691.89528795818], [1.6999935E12, 89227.36760925442], [1.69999386E12, 93222.61182519286], [1.69999356E12, 92701.74550128538]], "isOverall": false, "label": "addPersonToGroup", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69999398E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 28.81132075471698, "minX": 1.69999326E12, "maxY": 93221.71722365041, "series": [{"data": [[1.69999392E12, 91692.61930294914], [1.69999362E12, 92497.05670103099], [1.69999398E12, 86991.55555555556], [1.69999368E12, 92467.35949367078], [1.69999338E12, 39017.26649746188], [1.69999332E12, 5438.166214995482], [1.69999374E12, 92604.98979591839], [1.69999344E12, 66600.8791773779], [1.69999326E12, 28.81132075471698], [1.6999938E12, 92691.23560209415], [1.6999935E12, 89226.31362467863], [1.69999386E12, 93221.71722365041], [1.69999356E12, 92699.12853470442]], "isOverall": false, "label": "addPersonToGroup", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69999398E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.0536193029490617, "minX": 1.69999326E12, "maxY": 2.0943396226415096, "series": [{"data": [[1.69999392E12, 1.0536193029490617], [1.69999362E12, 1.1134020618556701], [1.69999398E12, 1.2222222222222223], [1.69999368E12, 1.0936708860759494], [1.69999338E12, 1.2360406091370548], [1.69999332E12, 1.3441734417344173], [1.69999374E12, 1.219387755102041], [1.69999344E12, 1.2982005141388169], [1.69999326E12, 2.0943396226415096], [1.6999938E12, 1.1649214659685854], [1.6999935E12, 1.259640102827764], [1.69999386E12, 1.0822622107969158], [1.69999356E12, 1.0771208226221076]], "isOverall": false, "label": "addPersonToGroup", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69999398E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.69999326E12, "maxY": 101643.0, "series": [{"data": [[1.69999392E12, 101643.0], [1.69999362E12, 97965.0], [1.69999398E12, 92608.0], [1.69999368E12, 99468.0], [1.69999338E12, 55531.0], [1.69999332E12, 23649.0], [1.69999374E12, 101024.0], [1.69999344E12, 81337.0], [1.69999326E12, 222.0], [1.6999938E12, 99876.0], [1.6999935E12, 96850.0], [1.69999386E12, 101173.0], [1.69999356E12, 98390.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69999392E12, 100141.5], [1.69999362E12, 97129.8], [1.69999398E12, 92608.0], [1.69999368E12, 97347.4], [1.69999338E12, 51081.8], [1.69999332E12, 16531.0], [1.69999374E12, 98499.0], [1.69999344E12, 78350.0], [1.69999326E12, 21.9], [1.6999938E12, 98755.8], [1.6999935E12, 94995.3], [1.69999386E12, 100542.5], [1.69999356E12, 96593.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69999392E12, 101643.0], [1.69999362E12, 97945.78], [1.69999398E12, 92608.0], [1.69999368E12, 99348.0], [1.69999338E12, 55084.98999999999], [1.69999332E12, 22562.24], [1.69999374E12, 100939.65], [1.69999344E12, 81218.0], [1.69999326E12, 222.0], [1.6999938E12, 99876.0], [1.6999935E12, 95948.32999999999], [1.69999386E12, 101173.0], [1.69999356E12, 97898.48000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69999392E12, 100332.5], [1.69999362E12, 97600.0], [1.69999398E12, 92608.0], [1.69999368E12, 98112.0], [1.69999338E12, 53204.95], [1.69999332E12, 19832.6], [1.69999374E12, 99143.2], [1.69999344E12, 80082.5], [1.69999326E12, 43.09999999999992], [1.6999938E12, 99540.4], [1.6999935E12, 95225.7], [1.69999386E12, 100851.75], [1.69999356E12, 97038.4]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69999392E12, 62186.0], [1.69999362E12, 64987.0], [1.69999398E12, 80641.0], [1.69999368E12, 66461.0], [1.69999338E12, 11996.0], [1.69999332E12, 9.0], [1.69999374E12, 66525.0], [1.69999344E12, 38836.0], [1.69999326E12, 11.0], [1.6999938E12, 67206.0], [1.6999935E12, 64380.0], [1.69999386E12, 67649.0], [1.69999356E12, 64913.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69999392E12, 98277.0], [1.69999362E12, 96244.5], [1.69999398E12, 89155.0], [1.69999368E12, 96457.0], [1.69999338E12, 37485.0], [1.69999332E12, 2933.0], [1.69999374E12, 97237.5], [1.69999344E12, 66634.0], [1.69999326E12, 18.0], [1.6999938E12, 97610.0], [1.6999935E12, 92879.0], [1.69999386E12, 98899.5], [1.69999356E12, 95568.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69999398E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 16.0, "minX": 1.0, "maxY": 96439.0, "series": [{"data": [[2.0, 96439.0], [34.0, 1016.5], [36.0, 25.0], [37.0, 500.0], [42.0, 27.0], [45.0, 39.5], [49.0, 59.5], [3.0, 95225.0], [53.0, 76.5], [52.0, 243.0], [56.0, 102.0], [4.0, 95497.0], [5.0, 95339.0], [6.0, 95353.5], [7.0, 67723.0], [8.0, 66637.5], [9.0, 58006.0], [10.0, 32371.0], [11.0, 12758.5], [12.0, 66782.0], [13.0, 10123.0], [14.0, 9031.0], [15.0, 7865.0], [16.0, 6036.0], [1.0, 95220.0], [17.0, 5140.0], [18.0, 4624.0], [19.0, 3991.0], [21.0, 3582.5], [24.0, 3557.5], [27.0, 2706.0], [28.0, 2361.0], [29.0, 2120.5], [31.0, 1555.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 91416.0], [34.0, 1086.0], [36.0, 27.0], [42.0, 35.0], [45.0, 57.0], [49.0, 63.0], [3.0, 92079.5], [53.0, 60.0], [52.0, 274.0], [56.0, 127.0], [4.0, 91671.0], [5.0, 91735.0], [6.0, 91908.0], [7.0, 91643.0], [8.0, 91591.0], [9.0, 91477.5], [10.0, 91349.0], [11.0, 91772.0], [12.0, 91616.5], [13.0, 91670.5], [14.0, 92008.0], [15.0, 91985.0], [16.0, 91543.0], [1.0, 86640.5], [17.0, 92388.0], [18.0, 4509.0], [19.0, 16.0], [27.0, 21.0], [28.0, 25.0], [29.0, 2125.0], [31.0, 1409.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 56.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 16.0, "minX": 1.0, "maxY": 96439.0, "series": [{"data": [[2.0, 96439.0], [34.0, 1004.5], [36.0, 25.0], [37.0, 500.0], [42.0, 27.0], [45.0, 39.5], [49.0, 59.0], [3.0, 95224.0], [53.0, 76.5], [52.0, 242.0], [56.0, 102.0], [4.0, 95497.0], [5.0, 95339.0], [6.0, 95352.0], [7.0, 67722.0], [8.0, 66637.0], [9.0, 58006.0], [10.0, 32371.0], [11.0, 12756.5], [12.0, 66781.0], [13.0, 10103.0], [14.0, 9017.0], [15.0, 7865.0], [16.0, 6035.0], [1.0, 95210.0], [17.0, 5140.0], [18.0, 4624.0], [19.0, 3990.0], [21.0, 3565.5], [24.0, 3557.5], [27.0, 2704.0], [28.0, 2361.0], [29.0, 2120.5], [31.0, 1555.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 91416.0], [34.0, 1086.0], [36.0, 26.0], [42.0, 35.0], [45.0, 57.0], [49.0, 62.0], [3.0, 92079.0], [53.0, 60.0], [52.0, 273.0], [56.0, 126.0], [4.0, 91671.0], [5.0, 91735.0], [6.0, 91907.5], [7.0, 91643.0], [8.0, 91590.5], [9.0, 91477.5], [10.0, 91349.0], [11.0, 91772.0], [12.0, 91616.5], [13.0, 91670.5], [14.0, 92008.0], [15.0, 91985.0], [16.0, 91542.0], [1.0, 86640.5], [17.0, 92387.5], [18.0, 4508.0], [19.0, 16.0], [27.0, 20.0], [28.0, 24.0], [29.0, 2125.0], [31.0, 1409.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 56.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.9166666666666666, "minX": 1.69999326E12, "maxY": 23.8, "series": [{"data": [[1.69999344E12, 6.483333333333333], [1.69999326E12, 0.9166666666666666], [1.69999362E12, 6.466666666666667], [1.6999938E12, 6.35], [1.6999935E12, 6.483333333333333], [1.69999368E12, 6.583333333333333], [1.69999338E12, 11.183333333333334], [1.69999386E12, 2.8666666666666667], [1.69999332E12, 23.8], [1.69999356E12, 6.483333333333333], [1.69999374E12, 6.533333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69999386E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.69999326E12, "maxY": 17.916666666666668, "series": [{"data": [[1.69999392E12, 1.4], [1.69999362E12, 2.1666666666666665], [1.69999398E12, 0.13333333333333333], [1.69999368E12, 1.9166666666666667], [1.69999338E12, 5.466666666666667], [1.69999332E12, 17.916666666666668], [1.69999374E12, 1.7666666666666666], [1.69999344E12, 3.75], [1.69999326E12, 0.6666666666666666], [1.6999938E12, 1.5833333333333333], [1.6999935E12, 2.933333333333333], [1.69999386E12, 1.4], [1.69999356E12, 2.45]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.69999392E12, 4.816666666666666], [1.69999362E12, 4.3], [1.69999398E12, 0.016666666666666666], [1.69999368E12, 4.666666666666667], [1.69999338E12, 1.1], [1.69999332E12, 0.5333333333333333], [1.69999374E12, 4.766666666666667], [1.69999344E12, 2.7333333333333334], [1.69999326E12, 0.21666666666666667], [1.6999938E12, 4.783333333333333], [1.6999935E12, 3.55], [1.69999386E12, 5.083333333333333], [1.69999356E12, 4.033333333333333]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69999398E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.69999326E12, "maxY": 17.916666666666668, "series": [{"data": [[1.69999392E12, 1.4], [1.69999362E12, 2.1666666666666665], [1.69999398E12, 0.13333333333333333], [1.69999368E12, 1.9166666666666667], [1.69999338E12, 5.466666666666667], [1.69999332E12, 17.916666666666668], [1.69999374E12, 1.7666666666666666], [1.69999344E12, 3.75], [1.69999326E12, 0.6666666666666666], [1.6999938E12, 1.5833333333333333], [1.6999935E12, 2.933333333333333], [1.69999386E12, 1.4], [1.69999356E12, 2.45]], "isOverall": false, "label": "addPersonToGroup-success", "isController": false}, {"data": [[1.69999392E12, 4.816666666666666], [1.69999362E12, 4.3], [1.69999398E12, 0.016666666666666666], [1.69999368E12, 4.666666666666667], [1.69999338E12, 1.1], [1.69999332E12, 0.5333333333333333], [1.69999374E12, 4.766666666666667], [1.69999344E12, 2.7333333333333334], [1.69999326E12, 0.21666666666666667], [1.6999938E12, 4.783333333333333], [1.6999935E12, 3.55], [1.69999386E12, 5.083333333333333], [1.69999356E12, 4.033333333333333]], "isOverall": false, "label": "addPersonToGroup-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69999398E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.69999326E12, "maxY": 17.916666666666668, "series": [{"data": [[1.69999392E12, 1.4], [1.69999362E12, 2.1666666666666665], [1.69999398E12, 0.13333333333333333], [1.69999368E12, 1.9166666666666667], [1.69999338E12, 5.466666666666667], [1.69999332E12, 17.916666666666668], [1.69999374E12, 1.7666666666666666], [1.69999344E12, 3.75], [1.69999326E12, 0.6666666666666666], [1.6999938E12, 1.5833333333333333], [1.6999935E12, 2.933333333333333], [1.69999386E12, 1.4], [1.69999356E12, 2.45]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69999392E12, 4.816666666666666], [1.69999362E12, 4.3], [1.69999398E12, 0.016666666666666666], [1.69999368E12, 4.666666666666667], [1.69999338E12, 1.1], [1.69999332E12, 0.5333333333333333], [1.69999374E12, 4.766666666666667], [1.69999344E12, 2.7333333333333334], [1.69999326E12, 0.21666666666666667], [1.6999938E12, 4.783333333333333], [1.6999935E12, 3.55], [1.69999386E12, 5.083333333333333], [1.69999356E12, 4.033333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69999398E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

