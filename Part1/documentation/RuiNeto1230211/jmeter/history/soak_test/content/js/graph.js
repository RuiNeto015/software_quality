/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "maxY": 59113.0, "series": [{"data": [[0.0, 9.0], [0.1, 11.0], [0.2, 12.0], [0.3, 14.0], [0.4, 14.0], [0.5, 15.0], [0.6, 16.0], [0.7, 17.0], [0.8, 18.0], [0.9, 19.0], [1.0, 19.0], [1.1, 20.0], [1.2, 21.0], [1.3, 22.0], [1.4, 23.0], [1.5, 24.0], [1.6, 25.0], [1.7, 26.0], [1.8, 28.0], [1.9, 29.0], [2.0, 30.0], [2.1, 31.0], [2.2, 32.0], [2.3, 34.0], [2.4, 35.0], [2.5, 37.0], [2.6, 38.0], [2.7, 39.0], [2.8, 41.0], [2.9, 42.0], [3.0, 44.0], [3.1, 45.0], [3.2, 47.0], [3.3, 48.0], [3.4, 49.0], [3.5, 51.0], [3.6, 52.0], [3.7, 54.0], [3.8, 56.0], [3.9, 57.0], [4.0, 59.0], [4.1, 62.0], [4.2, 64.0], [4.3, 66.0], [4.4, 69.0], [4.5, 72.0], [4.6, 74.0], [4.7, 78.0], [4.8, 81.0], [4.9, 84.0], [5.0, 87.0], [5.1, 89.0], [5.2, 91.0], [5.3, 93.0], [5.4, 98.0], [5.5, 101.0], [5.6, 103.0], [5.7, 106.0], [5.8, 110.0], [5.9, 114.0], [6.0, 117.0], [6.1, 121.0], [6.2, 123.0], [6.3, 125.0], [6.4, 128.0], [6.5, 133.0], [6.6, 136.0], [6.7, 140.0], [6.8, 148.0], [6.9, 155.0], [7.0, 165.0], [7.1, 178.0], [7.2, 183.0], [7.3, 195.0], [7.4, 226.0], [7.5, 252.0], [7.6, 271.0], [7.7, 313.0], [7.8, 357.0], [7.9, 399.0], [8.0, 470.0], [8.1, 561.0], [8.2, 666.0], [8.3, 731.0], [8.4, 853.0], [8.5, 991.0], [8.6, 1146.0], [8.7, 1320.0], [8.8, 1509.0], [8.9, 1635.0], [9.0, 1682.0], [9.1, 1720.0], [9.2, 1772.0], [9.3, 1842.0], [9.4, 1894.0], [9.5, 1949.0], [9.6, 2004.0], [9.7, 2078.0], [9.8, 2282.0], [9.9, 2455.0], [10.0, 2662.0], [10.1, 2847.0], [10.2, 2975.0], [10.3, 3135.0], [10.4, 3252.0], [10.5, 3322.0], [10.6, 3397.0], [10.7, 3513.0], [10.8, 3582.0], [10.9, 3694.0], [11.0, 3810.0], [11.1, 3921.0], [11.2, 4027.0], [11.3, 4182.0], [11.4, 4290.0], [11.5, 4397.0], [11.6, 4540.0], [11.7, 4739.0], [11.8, 4844.0], [11.9, 4918.0], [12.0, 5071.0], [12.1, 5281.0], [12.2, 5444.0], [12.3, 5583.0], [12.4, 5708.0], [12.5, 5861.0], [12.6, 6089.0], [12.7, 6262.0], [12.8, 6413.0], [12.9, 6607.0], [13.0, 6796.0], [13.1, 7021.0], [13.2, 7169.0], [13.3, 7457.0], [13.4, 7620.0], [13.5, 7824.0], [13.6, 8049.0], [13.7, 8383.0], [13.8, 8571.0], [13.9, 8816.0], [14.0, 9054.0], [14.1, 9294.0], [14.2, 9447.0], [14.3, 9711.0], [14.4, 10051.0], [14.5, 10248.0], [14.6, 10761.0], [14.7, 11047.0], [14.8, 11329.0], [14.9, 11611.0], [15.0, 11904.0], [15.1, 12166.0], [15.2, 12463.0], [15.3, 12834.0], [15.4, 13068.0], [15.5, 13378.0], [15.6, 13660.0], [15.7, 13980.0], [15.8, 14268.0], [15.9, 14702.0], [16.0, 14981.0], [16.1, 15320.0], [16.2, 15629.0], [16.3, 16080.0], [16.4, 16515.0], [16.5, 16894.0], [16.6, 17231.0], [16.7, 17599.0], [16.8, 18031.0], [16.9, 18303.0], [17.0, 18741.0], [17.1, 19005.0], [17.2, 19310.0], [17.3, 19582.0], [17.4, 19920.0], [17.5, 20168.0], [17.6, 20396.0], [17.7, 20659.0], [17.8, 20917.0], [17.9, 21105.0], [18.0, 21252.0], [18.1, 21489.0], [18.2, 21761.0], [18.3, 21998.0], [18.4, 22240.0], [18.5, 22417.0], [18.6, 22738.0], [18.7, 22914.0], [18.8, 23174.0], [18.9, 23517.0], [19.0, 23860.0], [19.1, 24126.0], [19.2, 24458.0], [19.3, 24680.0], [19.4, 24967.0], [19.5, 25307.0], [19.6, 25787.0], [19.7, 26392.0], [19.8, 26759.0], [19.9, 27257.0], [20.0, 27841.0], [20.1, 28751.0], [20.2, 29386.0], [20.3, 29997.0], [20.4, 30046.0], [20.5, 30054.0], [20.6, 30062.0], [20.7, 30070.0], [20.8, 30081.0], [20.9, 30092.0], [21.0, 30100.0], [21.1, 30108.0], [21.2, 30134.0], [21.3, 30163.0], [21.4, 30195.0], [21.5, 30275.0], [21.6, 30502.0], [21.7, 30761.0], [21.8, 30968.0], [21.9, 31208.0], [22.0, 31334.0], [22.1, 31442.0], [22.2, 31608.0], [22.3, 31723.0], [22.4, 31773.0], [22.5, 31835.0], [22.6, 31890.0], [22.7, 31950.0], [22.8, 31992.0], [22.9, 32046.0], [23.0, 32103.0], [23.1, 32145.0], [23.2, 32216.0], [23.3, 32288.0], [23.4, 32432.0], [23.5, 32536.0], [23.6, 32936.0], [23.7, 33172.0], [23.8, 33362.0], [23.9, 33473.0], [24.0, 33627.0], [24.1, 33744.0], [24.2, 33864.0], [24.3, 34084.0], [24.4, 34225.0], [24.5, 34795.0], [24.6, 34993.0], [24.7, 35264.0], [24.8, 35807.0], [24.9, 35956.0], [25.0, 36064.0], [25.1, 36217.0], [25.2, 36330.0], [25.3, 36407.0], [25.4, 36553.0], [25.5, 36796.0], [25.6, 36993.0], [25.7, 37164.0], [25.8, 37344.0], [25.9, 37649.0], [26.0, 37895.0], [26.1, 38150.0], [26.2, 38304.0], [26.3, 38659.0], [26.4, 38862.0], [26.5, 39055.0], [26.6, 39161.0], [26.7, 39285.0], [26.8, 39519.0], [26.9, 39733.0], [27.0, 39858.0], [27.1, 40168.0], [27.2, 40389.0], [27.3, 40491.0], [27.4, 40731.0], [27.5, 40844.0], [27.6, 41012.0], [27.7, 41140.0], [27.8, 41326.0], [27.9, 41573.0], [28.0, 41675.0], [28.1, 41791.0], [28.2, 41897.0], [28.3, 41940.0], [28.4, 42036.0], [28.5, 42164.0], [28.6, 42321.0], [28.7, 42694.0], [28.8, 42983.0], [28.9, 43069.0], [29.0, 43263.0], [29.1, 43376.0], [29.2, 43455.0], [29.3, 43544.0], [29.4, 43596.0], [29.5, 43656.0], [29.6, 43707.0], [29.7, 43733.0], [29.8, 43782.0], [29.9, 43821.0], [30.0, 43871.0], [30.1, 43931.0], [30.2, 43960.0], [30.3, 43988.0], [30.4, 44008.0], [30.5, 44053.0], [30.6, 44080.0], [30.7, 44105.0], [30.8, 44118.0], [30.9, 44143.0], [31.0, 44175.0], [31.1, 44198.0], [31.2, 44217.0], [31.3, 44235.0], [31.4, 44253.0], [31.5, 44267.0], [31.6, 44279.0], [31.7, 44287.0], [31.8, 44297.0], [31.9, 44314.0], [32.0, 44323.0], [32.1, 44334.0], [32.2, 44342.0], [32.3, 44356.0], [32.4, 44367.0], [32.5, 44375.0], [32.6, 44383.0], [32.7, 44393.0], [32.8, 44403.0], [32.9, 44408.0], [33.0, 44417.0], [33.1, 44423.0], [33.2, 44432.0], [33.3, 44438.0], [33.4, 44446.0], [33.5, 44450.0], [33.6, 44456.0], [33.7, 44468.0], [33.8, 44482.0], [33.9, 44491.0], [34.0, 44500.0], [34.1, 44509.0], [34.2, 44519.0], [34.3, 44528.0], [34.4, 44533.0], [34.5, 44544.0], [34.6, 44550.0], [34.7, 44559.0], [34.8, 44564.0], [34.9, 44576.0], [35.0, 44586.0], [35.1, 44597.0], [35.2, 44604.0], [35.3, 44611.0], [35.4, 44622.0], [35.5, 44628.0], [35.6, 44635.0], [35.7, 44643.0], [35.8, 44654.0], [35.9, 44658.0], [36.0, 44668.0], [36.1, 44675.0], [36.2, 44680.0], [36.3, 44690.0], [36.4, 44697.0], [36.5, 44702.0], [36.6, 44705.0], [36.7, 44711.0], [36.8, 44715.0], [36.9, 44721.0], [37.0, 44726.0], [37.1, 44732.0], [37.2, 44735.0], [37.3, 44743.0], [37.4, 44749.0], [37.5, 44754.0], [37.6, 44763.0], [37.7, 44771.0], [37.8, 44775.0], [37.9, 44780.0], [38.0, 44788.0], [38.1, 44797.0], [38.2, 44803.0], [38.3, 44808.0], [38.4, 44817.0], [38.5, 44822.0], [38.6, 44829.0], [38.7, 44833.0], [38.8, 44839.0], [38.9, 44844.0], [39.0, 44855.0], [39.1, 44862.0], [39.2, 44864.0], [39.3, 44873.0], [39.4, 44880.0], [39.5, 44883.0], [39.6, 44888.0], [39.7, 44892.0], [39.8, 44901.0], [39.9, 44909.0], [40.0, 44916.0], [40.1, 44923.0], [40.2, 44931.0], [40.3, 44937.0], [40.4, 44941.0], [40.5, 44946.0], [40.6, 44950.0], [40.7, 44954.0], [40.8, 44959.0], [40.9, 44968.0], [41.0, 44974.0], [41.1, 44980.0], [41.2, 44988.0], [41.3, 44993.0], [41.4, 44998.0], [41.5, 45001.0], [41.6, 45008.0], [41.7, 45012.0], [41.8, 45020.0], [41.9, 45028.0], [42.0, 45031.0], [42.1, 45036.0], [42.2, 45039.0], [42.3, 45044.0], [42.4, 45049.0], [42.5, 45055.0], [42.6, 45060.0], [42.7, 45065.0], [42.8, 45070.0], [42.9, 45075.0], [43.0, 45078.0], [43.1, 45083.0], [43.2, 45086.0], [43.3, 45091.0], [43.4, 45096.0], [43.5, 45102.0], [43.6, 45105.0], [43.7, 45111.0], [43.8, 45115.0], [43.9, 45122.0], [44.0, 45129.0], [44.1, 45134.0], [44.2, 45140.0], [44.3, 45144.0], [44.4, 45149.0], [44.5, 45151.0], [44.6, 45156.0], [44.7, 45160.0], [44.8, 45164.0], [44.9, 45169.0], [45.0, 45175.0], [45.1, 45180.0], [45.2, 45185.0], [45.3, 45190.0], [45.4, 45194.0], [45.5, 45197.0], [45.6, 45202.0], [45.7, 45207.0], [45.8, 45210.0], [45.9, 45213.0], [46.0, 45216.0], [46.1, 45220.0], [46.2, 45226.0], [46.3, 45231.0], [46.4, 45237.0], [46.5, 45241.0], [46.6, 45247.0], [46.7, 45252.0], [46.8, 45256.0], [46.9, 45259.0], [47.0, 45266.0], [47.1, 45269.0], [47.2, 45275.0], [47.3, 45282.0], [47.4, 45287.0], [47.5, 45292.0], [47.6, 45302.0], [47.7, 45308.0], [47.8, 45312.0], [47.9, 45316.0], [48.0, 45318.0], [48.1, 45325.0], [48.2, 45328.0], [48.3, 45333.0], [48.4, 45337.0], [48.5, 45342.0], [48.6, 45348.0], [48.7, 45353.0], [48.8, 45359.0], [48.9, 45362.0], [49.0, 45367.0], [49.1, 45373.0], [49.2, 45377.0], [49.3, 45382.0], [49.4, 45386.0], [49.5, 45390.0], [49.6, 45394.0], [49.7, 45399.0], [49.8, 45407.0], [49.9, 45411.0], [50.0, 45417.0], [50.1, 45420.0], [50.2, 45424.0], [50.3, 45429.0], [50.4, 45434.0], [50.5, 45437.0], [50.6, 45443.0], [50.7, 45449.0], [50.8, 45453.0], [50.9, 45457.0], [51.0, 45462.0], [51.1, 45468.0], [51.2, 45472.0], [51.3, 45477.0], [51.4, 45482.0], [51.5, 45486.0], [51.6, 45492.0], [51.7, 45500.0], [51.8, 45506.0], [51.9, 45511.0], [52.0, 45515.0], [52.1, 45519.0], [52.2, 45524.0], [52.3, 45529.0], [52.4, 45532.0], [52.5, 45536.0], [52.6, 45540.0], [52.7, 45544.0], [52.8, 45548.0], [52.9, 45552.0], [53.0, 45558.0], [53.1, 45564.0], [53.2, 45568.0], [53.3, 45573.0], [53.4, 45577.0], [53.5, 45582.0], [53.6, 45584.0], [53.7, 45587.0], [53.8, 45590.0], [53.9, 45593.0], [54.0, 45600.0], [54.1, 45605.0], [54.2, 45610.0], [54.3, 45617.0], [54.4, 45620.0], [54.5, 45624.0], [54.6, 45630.0], [54.7, 45633.0], [54.8, 45638.0], [54.9, 45642.0], [55.0, 45647.0], [55.1, 45650.0], [55.2, 45652.0], [55.3, 45656.0], [55.4, 45662.0], [55.5, 45667.0], [55.6, 45670.0], [55.7, 45674.0], [55.8, 45677.0], [55.9, 45681.0], [56.0, 45686.0], [56.1, 45690.0], [56.2, 45693.0], [56.3, 45697.0], [56.4, 45700.0], [56.5, 45704.0], [56.6, 45708.0], [56.7, 45711.0], [56.8, 45716.0], [56.9, 45718.0], [57.0, 45723.0], [57.1, 45729.0], [57.2, 45734.0], [57.3, 45736.0], [57.4, 45739.0], [57.5, 45746.0], [57.6, 45748.0], [57.7, 45754.0], [57.8, 45757.0], [57.9, 45761.0], [58.0, 45765.0], [58.1, 45768.0], [58.2, 45771.0], [58.3, 45775.0], [58.4, 45778.0], [58.5, 45782.0], [58.6, 45785.0], [58.7, 45789.0], [58.8, 45793.0], [58.9, 45795.0], [59.0, 45800.0], [59.1, 45804.0], [59.2, 45807.0], [59.3, 45813.0], [59.4, 45815.0], [59.5, 45819.0], [59.6, 45822.0], [59.7, 45826.0], [59.8, 45830.0], [59.9, 45832.0], [60.0, 45836.0], [60.1, 45841.0], [60.2, 45845.0], [60.3, 45848.0], [60.4, 45851.0], [60.5, 45853.0], [60.6, 45858.0], [60.7, 45860.0], [60.8, 45865.0], [60.9, 45870.0], [61.0, 45872.0], [61.1, 45873.0], [61.2, 45877.0], [61.3, 45881.0], [61.4, 45886.0], [61.5, 45891.0], [61.6, 45894.0], [61.7, 45900.0], [61.8, 45905.0], [61.9, 45907.0], [62.0, 45910.0], [62.1, 45913.0], [62.2, 45919.0], [62.3, 45925.0], [62.4, 45928.0], [62.5, 45931.0], [62.6, 45934.0], [62.7, 45937.0], [62.8, 45942.0], [62.9, 45945.0], [63.0, 45949.0], [63.1, 45955.0], [63.2, 45959.0], [63.3, 45963.0], [63.4, 45969.0], [63.5, 45972.0], [63.6, 45978.0], [63.7, 45986.0], [63.8, 45989.0], [63.9, 45995.0], [64.0, 46001.0], [64.1, 46005.0], [64.2, 46009.0], [64.3, 46013.0], [64.4, 46018.0], [64.5, 46020.0], [64.6, 46025.0], [64.7, 46028.0], [64.8, 46032.0], [64.9, 46036.0], [65.0, 46040.0], [65.1, 46043.0], [65.2, 46046.0], [65.3, 46049.0], [65.4, 46052.0], [65.5, 46056.0], [65.6, 46060.0], [65.7, 46063.0], [65.8, 46068.0], [65.9, 46072.0], [66.0, 46076.0], [66.1, 46079.0], [66.2, 46085.0], [66.3, 46091.0], [66.4, 46095.0], [66.5, 46098.0], [66.6, 46102.0], [66.7, 46107.0], [66.8, 46111.0], [66.9, 46116.0], [67.0, 46123.0], [67.1, 46127.0], [67.2, 46132.0], [67.3, 46135.0], [67.4, 46139.0], [67.5, 46144.0], [67.6, 46148.0], [67.7, 46154.0], [67.8, 46156.0], [67.9, 46161.0], [68.0, 46166.0], [68.1, 46169.0], [68.2, 46174.0], [68.3, 46178.0], [68.4, 46182.0], [68.5, 46186.0], [68.6, 46188.0], [68.7, 46193.0], [68.8, 46198.0], [68.9, 46204.0], [69.0, 46207.0], [69.1, 46214.0], [69.2, 46216.0], [69.3, 46219.0], [69.4, 46225.0], [69.5, 46229.0], [69.6, 46234.0], [69.7, 46238.0], [69.8, 46245.0], [69.9, 46253.0], [70.0, 46257.0], [70.1, 46264.0], [70.2, 46268.0], [70.3, 46272.0], [70.4, 46277.0], [70.5, 46281.0], [70.6, 46286.0], [70.7, 46293.0], [70.8, 46298.0], [70.9, 46303.0], [71.0, 46309.0], [71.1, 46313.0], [71.2, 46320.0], [71.3, 46325.0], [71.4, 46331.0], [71.5, 46335.0], [71.6, 46340.0], [71.7, 46349.0], [71.8, 46354.0], [71.9, 46361.0], [72.0, 46365.0], [72.1, 46374.0], [72.2, 46380.0], [72.3, 46385.0], [72.4, 46393.0], [72.5, 46396.0], [72.6, 46403.0], [72.7, 46409.0], [72.8, 46413.0], [72.9, 46418.0], [73.0, 46424.0], [73.1, 46431.0], [73.2, 46435.0], [73.3, 46441.0], [73.4, 46447.0], [73.5, 46454.0], [73.6, 46462.0], [73.7, 46469.0], [73.8, 46478.0], [73.9, 46483.0], [74.0, 46489.0], [74.1, 46495.0], [74.2, 46503.0], [74.3, 46510.0], [74.4, 46515.0], [74.5, 46524.0], [74.6, 46530.0], [74.7, 46537.0], [74.8, 46545.0], [74.9, 46553.0], [75.0, 46562.0], [75.1, 46566.0], [75.2, 46574.0], [75.3, 46584.0], [75.4, 46590.0], [75.5, 46599.0], [75.6, 46605.0], [75.7, 46611.0], [75.8, 46620.0], [75.9, 46627.0], [76.0, 46636.0], [76.1, 46643.0], [76.2, 46647.0], [76.3, 46656.0], [76.4, 46662.0], [76.5, 46668.0], [76.6, 46679.0], [76.7, 46689.0], [76.8, 46696.0], [76.9, 46705.0], [77.0, 46713.0], [77.1, 46725.0], [77.2, 46730.0], [77.3, 46736.0], [77.4, 46744.0], [77.5, 46749.0], [77.6, 46759.0], [77.7, 46765.0], [77.8, 46774.0], [77.9, 46781.0], [78.0, 46786.0], [78.1, 46795.0], [78.2, 46804.0], [78.3, 46815.0], [78.4, 46822.0], [78.5, 46828.0], [78.6, 46837.0], [78.7, 46841.0], [78.8, 46853.0], [78.9, 46865.0], [79.0, 46878.0], [79.1, 46891.0], [79.2, 46900.0], [79.3, 46911.0], [79.4, 46919.0], [79.5, 46932.0], [79.6, 46944.0], [79.7, 46954.0], [79.8, 46965.0], [79.9, 46974.0], [80.0, 46984.0], [80.1, 46994.0], [80.2, 47003.0], [80.3, 47016.0], [80.4, 47029.0], [80.5, 47043.0], [80.6, 47055.0], [80.7, 47063.0], [80.8, 47077.0], [80.9, 47088.0], [81.0, 47094.0], [81.1, 47107.0], [81.2, 47123.0], [81.3, 47134.0], [81.4, 47146.0], [81.5, 47161.0], [81.6, 47179.0], [81.7, 47191.0], [81.8, 47204.0], [81.9, 47217.0], [82.0, 47236.0], [82.1, 47251.0], [82.2, 47274.0], [82.3, 47297.0], [82.4, 47318.0], [82.5, 47336.0], [82.6, 47353.0], [82.7, 47377.0], [82.8, 47395.0], [82.9, 47417.0], [83.0, 47429.0], [83.1, 47447.0], [83.2, 47477.0], [83.3, 47523.0], [83.4, 47563.0], [83.5, 47606.0], [83.6, 47665.0], [83.7, 47732.0], [83.8, 47842.0], [83.9, 47921.0], [84.0, 47996.0], [84.1, 48037.0], [84.2, 48121.0], [84.3, 48219.0], [84.4, 48301.0], [84.5, 48349.0], [84.6, 48437.0], [84.7, 48520.0], [84.8, 48592.0], [84.9, 48642.0], [85.0, 48704.0], [85.1, 48776.0], [85.2, 48832.0], [85.3, 48887.0], [85.4, 48946.0], [85.5, 48985.0], [85.6, 49013.0], [85.7, 49096.0], [85.8, 49140.0], [85.9, 49197.0], [86.0, 49233.0], [86.1, 49318.0], [86.2, 49368.0], [86.3, 49434.0], [86.4, 49499.0], [86.5, 49550.0], [86.6, 49609.0], [86.7, 49658.0], [86.8, 49730.0], [86.9, 49779.0], [87.0, 49845.0], [87.1, 49865.0], [87.2, 49886.0], [87.3, 49918.0], [87.4, 49960.0], [87.5, 49995.0], [87.6, 50031.0], [87.7, 50083.0], [87.8, 50115.0], [87.9, 50155.0], [88.0, 50179.0], [88.1, 50222.0], [88.2, 50240.0], [88.3, 50270.0], [88.4, 50308.0], [88.5, 50333.0], [88.6, 50363.0], [88.7, 50387.0], [88.8, 50431.0], [88.9, 50463.0], [89.0, 50505.0], [89.1, 50540.0], [89.2, 50595.0], [89.3, 50643.0], [89.4, 50725.0], [89.5, 50771.0], [89.6, 50803.0], [89.7, 50830.0], [89.8, 50870.0], [89.9, 50891.0], [90.0, 50931.0], [90.1, 50965.0], [90.2, 51004.0], [90.3, 51050.0], [90.4, 51069.0], [90.5, 51096.0], [90.6, 51130.0], [90.7, 51160.0], [90.8, 51190.0], [90.9, 51216.0], [91.0, 51244.0], [91.1, 51270.0], [91.2, 51320.0], [91.3, 51344.0], [91.4, 51366.0], [91.5, 51390.0], [91.6, 51421.0], [91.7, 51457.0], [91.8, 51488.0], [91.9, 51521.0], [92.0, 51562.0], [92.1, 51623.0], [92.2, 51669.0], [92.3, 51700.0], [92.4, 51739.0], [92.5, 51760.0], [92.6, 51790.0], [92.7, 51833.0], [92.8, 51857.0], [92.9, 51893.0], [93.0, 51920.0], [93.1, 51950.0], [93.2, 51991.0], [93.3, 52034.0], [93.4, 52081.0], [93.5, 52136.0], [93.6, 52167.0], [93.7, 52202.0], [93.8, 52238.0], [93.9, 52281.0], [94.0, 52336.0], [94.1, 52386.0], [94.2, 52433.0], [94.3, 52481.0], [94.4, 52558.0], [94.5, 52596.0], [94.6, 52642.0], [94.7, 52667.0], [94.8, 52710.0], [94.9, 52744.0], [95.0, 52782.0], [95.1, 52823.0], [95.2, 52898.0], [95.3, 52942.0], [95.4, 53011.0], [95.5, 53064.0], [95.6, 53105.0], [95.7, 53155.0], [95.8, 53204.0], [95.9, 53266.0], [96.0, 53322.0], [96.1, 53363.0], [96.2, 53424.0], [96.3, 53499.0], [96.4, 53560.0], [96.5, 53614.0], [96.6, 53645.0], [96.7, 53694.0], [96.8, 53780.0], [96.9, 53830.0], [97.0, 53880.0], [97.1, 53928.0], [97.2, 53962.0], [97.3, 54062.0], [97.4, 54124.0], [97.5, 54161.0], [97.6, 54215.0], [97.7, 54270.0], [97.8, 54315.0], [97.9, 54388.0], [98.0, 54465.0], [98.1, 54560.0], [98.2, 54644.0], [98.3, 54721.0], [98.4, 54809.0], [98.5, 54859.0], [98.6, 54922.0], [98.7, 54993.0], [98.8, 55089.0], [98.9, 55175.0], [99.0, 55279.0], [99.1, 55388.0], [99.2, 55540.0], [99.3, 55685.0], [99.4, 55806.0], [99.5, 56020.0], [99.6, 56204.0], [99.7, 56416.0], [99.8, 56790.0], [99.9, 57302.0]], "isOverall": false, "label": "addPersonToGroup", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 692.0, "series": [{"data": [[0.0, 692.0], [100.0, 236.0], [32900.0, 11.0], [33700.0, 9.0], [35300.0, 3.0], [36100.0, 10.0], [36900.0, 7.0], [37700.0, 7.0], [38500.0, 2.0], [39300.0, 6.0], [40100.0, 6.0], [40900.0, 6.0], [42500.0, 3.0], [41700.0, 11.0], [44100.0, 56.0], [43300.0, 11.0], [44900.0, 209.0], [46500.0, 173.0], [45700.0, 331.0], [47300.0, 67.0], [48900.0, 28.0], [48100.0, 12.0], [49700.0, 26.0], [50500.0, 27.0], [200.0, 45.0], [51300.0, 47.0], [52100.0, 32.0], [52900.0, 22.0], [53700.0, 17.0], [54500.0, 13.0], [55300.0, 10.0], [56100.0, 5.0], [56900.0, 2.0], [300.0, 30.0], [400.0, 15.0], [500.0, 17.0], [600.0, 14.0], [700.0, 9.0], [800.0, 10.0], [900.0, 12.0], [1000.0, 8.0], [1100.0, 9.0], [1200.0, 2.0], [1300.0, 8.0], [1400.0, 10.0], [1500.0, 7.0], [1600.0, 23.0], [1700.0, 25.0], [1800.0, 24.0], [1900.0, 21.0], [2000.0, 17.0], [2100.0, 7.0], [2300.0, 7.0], [2200.0, 7.0], [2400.0, 4.0], [2500.0, 6.0], [2600.0, 9.0], [2700.0, 3.0], [2800.0, 10.0], [2900.0, 10.0], [3000.0, 7.0], [3100.0, 14.0], [3200.0, 14.0], [3300.0, 14.0], [3400.0, 10.0], [3500.0, 21.0], [3600.0, 8.0], [3700.0, 11.0], [3800.0, 12.0], [3900.0, 9.0], [4000.0, 10.0], [4100.0, 9.0], [4200.0, 13.0], [4300.0, 12.0], [4500.0, 13.0], [4400.0, 3.0], [4600.0, 7.0], [4700.0, 12.0], [4800.0, 14.0], [4900.0, 5.0], [5000.0, 9.0], [5100.0, 6.0], [5200.0, 9.0], [5300.0, 5.0], [5600.0, 11.0], [5400.0, 9.0], [5500.0, 9.0], [5700.0, 6.0], [5800.0, 8.0], [5900.0, 5.0], [6100.0, 8.0], [6000.0, 10.0], [6200.0, 4.0], [6300.0, 8.0], [6400.0, 9.0], [6500.0, 6.0], [6600.0, 6.0], [6700.0, 8.0], [6800.0, 4.0], [6900.0, 8.0], [7000.0, 8.0], [7100.0, 5.0], [7200.0, 3.0], [7300.0, 5.0], [7400.0, 9.0], [7500.0, 7.0], [7600.0, 7.0], [7700.0, 6.0], [7800.0, 3.0], [7900.0, 5.0], [8000.0, 7.0], [8100.0, 3.0], [8400.0, 4.0], [8200.0, 4.0], [8600.0, 5.0], [8800.0, 3.0], [9000.0, 5.0], [9200.0, 4.0], [9400.0, 7.0], [9600.0, 2.0], [10000.0, 5.0], [9800.0, 2.0], [10200.0, 6.0], [10400.0, 3.0], [10600.0, 2.0], [11200.0, 5.0], [10800.0, 6.0], [11000.0, 4.0], [11600.0, 4.0], [11400.0, 5.0], [11800.0, 4.0], [12000.0, 3.0], [12200.0, 4.0], [12400.0, 7.0], [12600.0, 2.0], [13000.0, 6.0], [12800.0, 7.0], [13200.0, 3.0], [13800.0, 4.0], [13400.0, 4.0], [13600.0, 3.0], [14000.0, 5.0], [14200.0, 3.0], [14400.0, 4.0], [14600.0, 1.0], [14800.0, 4.0], [15000.0, 3.0], [15200.0, 3.0], [15400.0, 5.0], [15600.0, 2.0], [15800.0, 5.0], [16000.0, 4.0], [16200.0, 2.0], [17200.0, 8.0], [16800.0, 2.0], [16400.0, 1.0], [17600.0, 1.0], [18000.0, 4.0], [18400.0, 2.0], [18800.0, 4.0], [19200.0, 3.0], [19600.0, 3.0], [20000.0, 4.0], [20400.0, 2.0], [20800.0, 3.0], [21200.0, 8.0], [22400.0, 3.0], [21600.0, 6.0], [22000.0, 2.0], [22800.0, 7.0], [23200.0, 2.0], [24000.0, 2.0], [24400.0, 3.0], [23600.0, 1.0], [25200.0, 3.0], [24800.0, 3.0], [25600.0, 4.0], [26400.0, 4.0], [26000.0, 3.0], [27200.0, 3.0], [27600.0, 4.0], [26800.0, 1.0], [28400.0, 1.0], [28800.0, 2.0], [29200.0, 2.0], [29600.0, 4.0], [30000.0, 87.0], [30400.0, 7.0], [30800.0, 5.0], [31200.0, 9.0], [31600.0, 11.0], [32000.0, 23.0], [32400.0, 11.0], [32800.0, 2.0], [33600.0, 11.0], [34400.0, 2.0], [35200.0, 4.0], [36000.0, 7.0], [36800.0, 6.0], [37600.0, 4.0], [38400.0, 3.0], [39200.0, 9.0], [40800.0, 13.0], [40000.0, 6.0], [41600.0, 13.0], [42400.0, 2.0], [43200.0, 13.0], [44000.0, 39.0], [44800.0, 208.0], [46400.0, 199.0], [45600.0, 304.0], [47200.0, 72.0], [48000.0, 21.0], [48800.0, 25.0], [49600.0, 22.0], [50400.0, 33.0], [52000.0, 28.0], [51200.0, 40.0], [52800.0, 20.0], [53600.0, 33.0], [55200.0, 14.0], [54400.0, 16.0], [56000.0, 8.0], [56800.0, 4.0], [33100.0, 7.0], [33900.0, 5.0], [34700.0, 2.0], [36300.0, 16.0], [35500.0, 1.0], [37100.0, 9.0], [38700.0, 7.0], [37900.0, 4.0], [39500.0, 5.0], [40300.0, 7.0], [41100.0, 6.0], [41900.0, 17.0], [42700.0, 5.0], [43500.0, 21.0], [44300.0, 118.0], [45100.0, 262.0], [46700.0, 167.0], [45900.0, 289.0], [48300.0, 22.0], [47500.0, 32.0], [49100.0, 23.0], [49900.0, 33.0], [50700.0, 27.0], [51500.0, 27.0], [53100.0, 28.0], [52300.0, 26.0], [53900.0, 25.0], [54700.0, 14.0], [55500.0, 6.0], [57100.0, 3.0], [56300.0, 2.0], [58700.0, 1.0], [57900.0, 1.0], [16500.0, 3.0], [16900.0, 1.0], [17300.0, 4.0], [18100.0, 5.0], [17700.0, 2.0], [18900.0, 7.0], [18500.0, 2.0], [19300.0, 6.0], [20100.0, 10.0], [19700.0, 1.0], [20500.0, 6.0], [20900.0, 6.0], [21300.0, 5.0], [22100.0, 5.0], [21700.0, 1.0], [22500.0, 5.0], [22900.0, 5.0], [23300.0, 3.0], [24500.0, 7.0], [23700.0, 6.0], [24100.0, 6.0], [24900.0, 6.0], [25300.0, 3.0], [26100.0, 3.0], [25700.0, 1.0], [26500.0, 5.0], [26900.0, 3.0], [27300.0, 1.0], [28100.0, 2.0], [27700.0, 1.0], [28900.0, 3.0], [29300.0, 2.0], [30100.0, 52.0], [29700.0, 3.0], [30500.0, 5.0], [30900.0, 8.0], [31300.0, 10.0], [31700.0, 23.0], [32100.0, 22.0], [32500.0, 7.0], [33800.0, 12.0], [34600.0, 2.0], [35400.0, 2.0], [36200.0, 10.0], [37000.0, 8.0], [37800.0, 5.0], [38600.0, 4.0], [39400.0, 5.0], [40200.0, 7.0], [41000.0, 10.0], [42600.0, 3.0], [41800.0, 13.0], [45000.0, 261.0], [43400.0, 13.0], [44200.0, 94.0], [45800.0, 343.0], [46600.0, 171.0], [47400.0, 49.0], [48200.0, 16.0], [49000.0, 22.0], [49800.0, 38.0], [50600.0, 23.0], [51400.0, 39.0], [53000.0, 24.0], [52200.0, 29.0], [53800.0, 26.0], [54600.0, 16.0], [55400.0, 10.0], [56200.0, 10.0], [57000.0, 3.0], [57800.0, 1.0], [33300.0, 11.0], [34100.0, 7.0], [34900.0, 7.0], [36500.0, 7.0], [35700.0, 5.0], [37300.0, 4.0], [38100.0, 10.0], [38900.0, 9.0], [40500.0, 4.0], [39700.0, 6.0], [41300.0, 6.0], [42900.0, 7.0], [42100.0, 8.0], [43700.0, 36.0], [44500.0, 141.0], [45300.0, 272.0], [46900.0, 123.0], [46100.0, 291.0], [48500.0, 21.0], [47700.0, 15.0], [49300.0, 20.0], [50100.0, 32.0], [50900.0, 34.0], [51700.0, 43.0], [52500.0, 24.0], [53300.0, 27.0], [54100.0, 27.0], [54900.0, 18.0], [55700.0, 10.0], [56500.0, 4.0], [57300.0, 4.0], [58100.0, 1.0], [8300.0, 5.0], [8500.0, 12.0], [8700.0, 3.0], [8900.0, 8.0], [9100.0, 7.0], [9300.0, 7.0], [9500.0, 7.0], [9700.0, 6.0], [9900.0, 2.0], [10100.0, 10.0], [10300.0, 1.0], [10500.0, 2.0], [10700.0, 2.0], [10900.0, 3.0], [11100.0, 4.0], [11300.0, 4.0], [11500.0, 4.0], [11700.0, 6.0], [11900.0, 5.0], [12100.0, 6.0], [12300.0, 2.0], [12500.0, 5.0], [12700.0, 3.0], [12900.0, 3.0], [13100.0, 5.0], [13300.0, 4.0], [13700.0, 5.0], [13500.0, 6.0], [13900.0, 4.0], [14100.0, 3.0], [14300.0, 6.0], [14700.0, 5.0], [14500.0, 1.0], [14900.0, 6.0], [15100.0, 5.0], [15300.0, 3.0], [15500.0, 3.0], [15700.0, 3.0], [16300.0, 7.0], [15900.0, 1.0], [16100.0, 2.0], [16600.0, 3.0], [17000.0, 5.0], [17400.0, 1.0], [18200.0, 4.0], [17800.0, 3.0], [18600.0, 4.0], [19000.0, 5.0], [19400.0, 1.0], [19800.0, 7.0], [20200.0, 6.0], [20600.0, 9.0], [21000.0, 7.0], [21400.0, 5.0], [21800.0, 7.0], [22200.0, 9.0], [22600.0, 2.0], [23000.0, 3.0], [23400.0, 4.0], [23800.0, 6.0], [24200.0, 2.0], [24600.0, 8.0], [25000.0, 2.0], [25400.0, 5.0], [25800.0, 1.0], [26600.0, 2.0], [26200.0, 1.0], [27400.0, 4.0], [27000.0, 3.0], [28200.0, 1.0], [27800.0, 1.0], [28600.0, 1.0], [29400.0, 3.0], [29000.0, 1.0], [30600.0, 5.0], [30200.0, 14.0], [31000.0, 6.0], [31400.0, 10.0], [31800.0, 19.0], [32200.0, 18.0], [32600.0, 3.0], [33200.0, 7.0], [34800.0, 6.0], [34000.0, 7.0], [36400.0, 7.0], [35600.0, 1.0], [38000.0, 4.0], [38800.0, 3.0], [37200.0, 5.0], [39600.0, 9.0], [40400.0, 10.0], [41200.0, 8.0], [42000.0, 14.0], [42800.0, 4.0], [44400.0, 155.0], [43600.0, 23.0], [45200.0, 258.0], [46800.0, 131.0], [46000.0, 325.0], [48400.0, 12.0], [47600.0, 20.0], [49200.0, 22.0], [50000.0, 35.0], [50800.0, 42.0], [52400.0, 23.0], [51600.0, 32.0], [53200.0, 19.0], [54000.0, 13.0], [54800.0, 24.0], [56400.0, 3.0], [55600.0, 10.0], [33500.0, 7.0], [34300.0, 5.0], [35900.0, 13.0], [36700.0, 7.0], [35100.0, 2.0], [38300.0, 7.0], [37500.0, 3.0], [39100.0, 11.0], [40700.0, 7.0], [39900.0, 1.0], [41500.0, 9.0], [42300.0, 7.0], [43100.0, 4.0], [44700.0, 217.0], [43900.0, 39.0], [46300.0, 221.0], [47100.0, 92.0], [45500.0, 292.0], [47900.0, 20.0], [48700.0, 17.0], [50300.0, 46.0], [49500.0, 21.0], [51100.0, 40.0], [51900.0, 38.0], [52700.0, 35.0], [53500.0, 20.0], [54300.0, 23.0], [55100.0, 14.0], [56700.0, 4.0], [55900.0, 7.0], [57500.0, 2.0], [59100.0, 1.0], [16700.0, 5.0], [17100.0, 3.0], [17500.0, 4.0], [17900.0, 5.0], [18300.0, 4.0], [19100.0, 4.0], [18700.0, 3.0], [19500.0, 7.0], [19900.0, 3.0], [20300.0, 4.0], [20700.0, 4.0], [21500.0, 6.0], [21100.0, 8.0], [22300.0, 8.0], [21900.0, 6.0], [22700.0, 8.0], [23100.0, 8.0], [23500.0, 4.0], [24300.0, 5.0], [23900.0, 6.0], [24700.0, 2.0], [25100.0, 5.0], [25500.0, 1.0], [25900.0, 3.0], [26300.0, 2.0], [26700.0, 2.0], [27100.0, 3.0], [27500.0, 1.0], [27900.0, 3.0], [28300.0, 2.0], [28700.0, 4.0], [29100.0, 1.0], [29500.0, 2.0], [29900.0, 1.0], [30300.0, 4.0], [30700.0, 6.0], [31500.0, 9.0], [31100.0, 3.0], [31900.0, 26.0], [32300.0, 8.0], [32700.0, 1.0], [33400.0, 9.0], [34200.0, 5.0], [35000.0, 6.0], [35800.0, 8.0], [36600.0, 5.0], [37400.0, 5.0], [38200.0, 7.0], [39000.0, 9.0], [39800.0, 9.0], [40600.0, 6.0], [42200.0, 8.0], [41400.0, 3.0], [43000.0, 11.0], [44600.0, 168.0], [43800.0, 23.0], [45400.0, 251.0], [46200.0, 255.0], [47000.0, 109.0], [48600.0, 21.0], [47800.0, 12.0], [50200.0, 42.0], [49400.0, 22.0], [51000.0, 42.0], [51800.0, 37.0], [52600.0, 34.0], [54200.0, 20.0], [53400.0, 20.0], [55000.0, 13.0], [55800.0, 6.0], [56600.0, 3.0], [57400.0, 2.0]], "isOverall": false, "label": "addPersonToGroup", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 59100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 97.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 7584.0, "series": [{"data": [[0.0, 930.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 97.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4085.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 7584.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.70004564E12, "maxY": 300.0, "series": [{"data": [[1.70004594E12, 271.9642857142856], [1.70004624E12, 300.0], [1.70004564E12, 1.6666666666666667], [1.70004726E12, 300.0], [1.70004666E12, 300.0], [1.70004696E12, 300.0], [1.70004606E12, 300.0], [1.70004636E12, 300.0], [1.70004642E12, 300.0], [1.70004672E12, 300.0], [1.70004582E12, 150.49589041095876], [1.70004612E12, 300.0], [1.70004714E12, 300.0], [1.70004744E12, 124.74911660777379], [1.70004654E12, 300.0], [1.70004684E12, 300.0], [1.7000469E12, 300.0], [1.7000472E12, 300.0], [1.7000463E12, 300.0], [1.7000466E12, 300.0], [1.700046E12, 300.0], [1.7000457E12, 36.31482834185537], [1.70004702E12, 300.0], [1.70004732E12, 300.0], [1.70004576E12, 88.46523178807946], [1.70004738E12, 262.206718346253], [1.70004678E12, 300.0], [1.70004708E12, 300.0], [1.70004618E12, 300.0], [1.70004648E12, 300.0], [1.7000475E12, 15.5], [1.70004588E12, 213.1286863270778]], "isOverall": false, "label": "jp@gc - Add Person To Group - Soak", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7000475E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 799.8444444444444, "minX": 1.0, "maxY": 46488.79516453981, "series": [{"data": [[2.0, 10793.0], [3.0, 6874.0], [4.0, 8741.5], [5.0, 6014.833333333333], [6.0, 5914.333333333334], [7.0, 5961.833333333333], [8.0, 4443.777777777777], [9.0, 3014.923076923077], [10.0, 3934.3], [11.0, 3954.3], [12.0, 3274.0833333333335], [13.0, 3196.916666666667], [14.0, 2866.5384615384614], [15.0, 2226.176470588235], [16.0, 2160.0588235294117], [17.0, 2479.2666666666664], [18.0, 1522.4499999999998], [19.0, 1555.3000000000002], [20.0, 1679.478260869565], [21.0, 1682.173913043478], [22.0, 2185.789473684211], [23.0, 1810.1739130434785], [24.0, 1553.0384615384614], [25.0, 1799.181818181818], [26.0, 1460.2758620689656], [27.0, 1396.1428571428573], [28.0, 1409.5862068965519], [29.0, 1436.7586206896551], [30.0, 1294.46875], [31.0, 964.2424242424242], [32.0, 1028.3870967741937], [33.0, 891.5555555555555], [34.0, 922.5142857142857], [35.0, 1251.4], [36.0, 961.5294117647059], [37.0, 883.0], [38.0, 920.4864864864865], [39.0, 851.775], [40.0, 853.780487804878], [41.0, 895.6153846153846], [42.0, 799.8444444444444], [43.0, 897.780487804878], [44.0, 964.4878048780488], [45.0, 1406.6315789473683], [46.0, 1556.2820512820513], [47.0, 2017.21875], [48.0, 2341.2], [49.0, 2869.9655172413795], [50.0, 2612.935483870968], [51.0, 2938.4400000000005], [52.0, 2962.4444444444443], [53.0, 3216.416666666666], [54.0, 3945.058823529412], [55.0, 3970.85], [56.0, 4332.411764705883], [57.0, 4498.78947368421], [58.0, 4890.625], [59.0, 6138.35], [60.0, 5062.529411764706], [61.0, 5230.875], [62.0, 7912.882352941177], [63.0, 5680.357142857142], [64.0, 5858.611111111111], [65.0, 6665.285714285714], [66.0, 4247.7692307692305], [67.0, 7669.25], [68.0, 6118.857142857143], [69.0, 6526.642857142858], [70.0, 7777.058823529412], [71.0, 7364.428571428572], [72.0, 7481.0], [73.0, 6874.533333333334], [74.0, 7145.499999999998], [75.0, 7581.166666666666], [76.0, 7888.272727272728], [77.0, 7217.928571428572], [78.0, 9838.666666666666], [79.0, 11728.166666666668], [80.0, 8262.5], [81.0, 9830.07142857143], [82.0, 10878.636363636364], [83.0, 9116.333333333334], [84.0, 9054.333333333332], [85.0, 9637.692307692309], [86.0, 9047.615384615385], [87.0, 10825.400000000001], [88.0, 11281.444444444445], [89.0, 10509.916666666666], [90.0, 14852.42857142857], [91.0, 11269.222222222223], [92.0, 11162.272727272726], [93.0, 13496.230769230771], [94.0, 10994.333333333334], [95.0, 13736.076923076924], [96.0, 11141.2], [97.0, 11330.099999999999], [98.0, 18127.857142857145], [99.0, 13077.6], [100.0, 14212.666666666666], [101.0, 13569.181818181818], [102.0, 13158.545454545454], [103.0, 12707.125], [104.0, 15757.7], [105.0, 15673.75], [106.0, 11005.333333333334], [107.0, 11272.888888888889], [108.0, 23182.5625], [109.0, 14701.111111111111], [110.0, 14190.5], [111.0, 14349.625], [112.0, 13913.09090909091], [113.0, 14370.666666666666], [114.0, 14654.11111111111], [115.0, 16547.3], [116.0, 17572.0], [117.0, 15003.300000000001], [118.0, 20991.25], [119.0, 17435.8], [120.0, 16107.125], [121.0, 16646.0], [122.0, 17279.222222222223], [123.0, 21982.75], [124.0, 17759.4], [125.0, 25007.555555555555], [126.0, 17221.625], [127.0, 21259.333333333332], [128.0, 17446.0], [129.0, 20935.4], [130.0, 24029.545454545456], [131.0, 19591.6], [132.0, 22207.5], [133.0, 18191.6], [134.0, 28556.09090909091], [135.0, 20241.454545454544], [136.0, 25453.285714285714], [137.0, 23470.5], [138.0, 19510.666666666668], [139.0, 21930.5], [140.0, 19884.100000000002], [141.0, 26589.25], [142.0, 24241.142857142855], [143.0, 22560.799999999996], [144.0, 21251.75], [145.0, 22358.0], [146.0, 23174.125], [147.0, 31175.750000000004], [148.0, 23059.909090909092], [149.0, 29716.285714285714], [150.0, 24757.5], [151.0, 27069.9], [152.0, 30140.5], [153.0, 22841.333333333332], [154.0, 23497.25], [155.0, 33731.0], [156.0, 30059.666666666664], [157.0, 27404.142857142855], [158.0, 27074.166666666664], [159.0, 24064.363636363636], [161.0, 24446.181818181816], [162.0, 33032.0], [163.0, 29233.545454545456], [164.0, 29729.888888888887], [165.0, 22842.6], [166.0, 25960.222222222223], [167.0, 31075.75], [160.0, 41581.5], [168.0, 28372.14285714286], [169.0, 32359.333333333332], [170.0, 29748.428571428572], [171.0, 27572.444444444445], [172.0, 28658.4], [173.0, 31690.555555555555], [174.0, 31404.333333333332], [175.0, 29214.4], [176.0, 28787.999999999996], [177.0, 31818.333333333332], [178.0, 33664.5], [179.0, 33992.13333333334], [180.0, 38906.71428571429], [181.0, 29842.25], [182.0, 31873.0], [183.0, 27090.3], [184.0, 33628.333333333336], [185.0, 30533.3], [186.0, 32751.25], [187.0, 31218.125000000004], [188.0, 33054.5], [189.0, 31462.000000000004], [190.0, 36836.37499999999], [191.0, 36448.37499999999], [192.0, 32343.714285714286], [193.0, 33998.142857142855], [194.0, 32132.166666666668], [195.0, 35902.4], [196.0, 32317.555555555555], [197.0, 34087.75], [198.0, 33998.25], [199.0, 38502.8], [200.0, 34618.5], [201.0, 33476.92857142857], [202.0, 39663.625], [203.0, 26192.3], [204.0, 36465.555555555555], [205.0, 33091.333333333336], [206.0, 34435.625], [207.0, 31027.666666666668], [208.0, 34934.45454545455], [209.0, 28936.14285714286], [210.0, 28471.25], [211.0, 28900.333333333336], [212.0, 28566.5], [213.0, 39331.23076923077], [214.0, 36322.42857142857], [215.0, 37116.16666666667], [216.0, 34136.88888888889], [217.0, 37178.5], [218.0, 32720.0], [219.0, 36196.78571428571], [220.0, 35793.166666666664], [221.0, 27636.14285714286], [222.0, 32071.0], [223.0, 37642.46153846153], [224.0, 33181.333333333336], [225.0, 37525.6], [226.0, 32711.333333333332], [227.0, 36061.27272727273], [228.0, 34729.71428571428], [229.0, 32626.222222222223], [230.0, 37262.083333333336], [231.0, 34089.555555555555], [232.0, 36930.545454545456], [233.0, 34710.666666666664], [234.0, 39037.2], [235.0, 30232.8], [236.0, 34611.2], [237.0, 35096.166666666664], [238.0, 33910.625], [239.0, 36807.5], [240.0, 38119.692307692305], [241.0, 38441.42857142857], [242.0, 35572.333333333336], [243.0, 40531.0], [244.0, 40749.454545454544], [245.0, 34619.57142857143], [246.0, 36226.33333333333], [247.0, 34699.454545454544], [248.0, 34950.125], [249.0, 31715.166666666664], [250.0, 34827.25], [251.0, 44309.88235294117], [252.0, 40778.142857142855], [253.0, 34804.555555555555], [254.0, 35825.625], [255.0, 38459.42857142857], [257.0, 37507.73333333333], [256.0, 39398.666666666664], [258.0, 37530.333333333336], [259.0, 33086.7], [260.0, 39056.61538461539], [261.0, 36939.625], [262.0, 31463.88888888889], [263.0, 34387.25], [264.0, 38265.461538461546], [270.0, 37504.25], [271.0, 42840.66666666667], [268.0, 36146.16666666667], [269.0, 39530.5], [265.0, 43496.93333333333], [266.0, 40833.25], [267.0, 37160.25], [273.0, 39934.066666666666], [272.0, 38477.2], [274.0, 39977.8], [275.0, 38371.3], [276.0, 41587.46666666666], [277.0, 40250.87499999999], [278.0, 38188.375], [279.0, 43314.73333333334], [280.0, 40526.0], [286.0, 41791.0], [287.0, 41107.17647058824], [284.0, 38480.375], [285.0, 40834.11111111112], [281.0, 45340.35], [282.0, 40326.14285714286], [283.0, 45501.36363636364], [289.0, 40329.857142857145], [288.0, 38463.6], [290.0, 42505.04347826087], [291.0, 42920.25], [292.0, 46425.88888888888], [293.0, 41418.93333333333], [294.0, 43091.93333333333], [295.0, 43468.9], [296.0, 42328.28571428572], [300.0, 46488.79516453981], [297.0, 42298.0], [298.0, 43015.625], [299.0, 43584.375], [1.0, 16003.5]], "isOverall": false, "label": "addPersonToGroup", "isController": false}, {"data": [[247.98629489603053, 37939.5351291745]], "isOverall": false, "label": "addPersonToGroup-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 300.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 11.55, "minX": 1.70004564E12, "maxY": 19048.283333333333, "series": [{"data": [[1.70004594E12, 4647.866666666667], [1.70004624E12, 4199.066666666667], [1.70004564E12, 41.5], [1.70004726E12, 3958.5], [1.70004666E12, 4086.133333333333], [1.70004696E12, 4061.9333333333334], [1.70004606E12, 4399.35], [1.70004636E12, 4175.6], [1.70004642E12, 4159.466666666666], [1.70004672E12, 4043.6], [1.70004582E12, 5081.433333333333], [1.70004612E12, 4417.683333333333], [1.70004714E12, 3995.3], [1.70004744E12, 2955.0666666666666], [1.70004654E12, 4178.533333333334], [1.70004684E12, 4031.133333333333], [1.7000469E12, 4037.733333333333], [1.7000472E12, 3973.133333333333], [1.7000463E12, 4177.8], [1.7000466E12, 4025.266666666667], [1.700046E12, 4481.483333333334], [1.7000457E12, 19048.283333333333], [1.70004702E12, 3997.0333333333333], [1.70004732E12, 3945.266666666667], [1.70004576E12, 8415.816666666668], [1.70004738E12, 3959.8333333333335], [1.70004678E12, 4036.366666666667], [1.70004708E12, 3847.2], [1.70004618E12, 4265.066666666667], [1.70004648E12, 4174.866666666667], [1.7000475E12, 410.1333333333333], [1.70004588E12, 4735.3]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70004594E12, 1528.8], [1.70004624E12, 1505.4], [1.70004564E12, 11.55], [1.70004726E12, 1507.9166666666667], [1.70004666E12, 1513.2], [1.70004696E12, 1524.9], [1.70004606E12, 1517.1], [1.70004636E12, 1521.0], [1.70004642E12, 1505.4], [1.70004672E12, 1497.6], [1.70004582E12, 1423.5], [1.70004612E12, 1544.4], [1.70004714E12, 1515.75], [1.70004744E12, 1108.4166666666667], [1.70004654E12, 1536.6], [1.70004684E12, 1501.5], [1.7000469E12, 1513.2], [1.7000472E12, 1515.75], [1.7000463E12, 1509.3], [1.7000466E12, 1470.3], [1.700046E12, 1509.3], [1.7000457E12, 5320.8], [1.70004702E12, 1506.7666666666667], [1.70004732E12, 1507.9166666666667], [1.70004576E12, 2355.6], [1.70004738E12, 1515.75], [1.70004678E12, 1505.4], [1.70004708E12, 1453.0833333333333], [1.70004618E12, 1505.4], [1.70004648E12, 1517.1], [1.7000475E12, 117.5], [1.70004588E12, 1454.7]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7000475E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 89.0, "minX": 1.70004564E12, "maxY": 47160.031007751924, "series": [{"data": [[1.70004594E12, 36019.20408163265], [1.70004624E12, 46591.81088082902], [1.70004564E12, 89.0], [1.70004726E12, 46781.19740259738], [1.70004666E12, 46489.12886597939], [1.70004696E12, 46426.416879795404], [1.70004606E12, 46227.0462724936], [1.70004636E12, 46277.830769230786], [1.70004642E12, 46656.40155440417], [1.70004672E12, 46696.93229166664], [1.70004582E12, 20343.01095890409], [1.70004612E12, 45697.553030303054], [1.70004714E12, 47160.031007751924], [1.70004744E12, 37925.30388692578], [1.70004654E12, 46038.982233502546], [1.70004684E12, 46977.15064935072], [1.7000469E12, 46580.09536082476], [1.7000472E12, 46849.38501291987], [1.7000463E12, 46695.37209302327], [1.7000466E12, 46926.1697612732], [1.700046E12, 44092.13436692503], [1.7000457E12, 607.256391526662], [1.70004702E12, 46676.67357512953], [1.70004732E12, 47059.257142857154], [1.70004576E12, 7899.965231788083], [1.70004738E12, 46445.50387596895], [1.70004678E12, 46518.96113989637], [1.70004708E12, 47121.84905660373], [1.70004618E12, 46381.689119171], [1.70004648E12, 46643.83033419025], [1.7000475E12, 37283.03333333334], [1.70004588E12, 30363.34584450403]], "isOverall": false, "label": "addPersonToGroup", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7000475E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 88.66666666666666, "minX": 1.70004564E12, "maxY": 47159.2015503876, "series": [{"data": [[1.70004594E12, 36015.38265306122], [1.70004624E12, 46590.715025906684], [1.70004564E12, 88.66666666666666], [1.70004726E12, 46780.47532467532], [1.70004666E12, 46488.469072164924], [1.70004696E12, 46425.805626598485], [1.70004606E12, 46225.95115681232], [1.70004636E12, 46276.95641025639], [1.70004642E12, 46655.681347150305], [1.70004672E12, 46696.24739583331], [1.70004582E12, 20341.3506849315], [1.70004612E12, 45696.704545454515], [1.70004714E12, 47159.2015503876], [1.70004744E12, 37924.79858657247], [1.70004654E12, 46037.98477157355], [1.70004684E12, 46976.41818181816], [1.7000469E12, 46579.523195876274], [1.7000472E12, 46848.945736434085], [1.7000463E12, 46694.70542635656], [1.7000466E12, 46925.522546419066], [1.700046E12, 44090.638242894056], [1.7000457E12, 606.5230094959823], [1.70004702E12, 46676.17875647664], [1.70004732E12, 47058.78181818186], [1.70004576E12, 7898.279801324501], [1.70004738E12, 46445.08268733856], [1.70004678E12, 46518.18911917096], [1.70004708E12, 47121.1886792453], [1.70004618E12, 46380.66062176169], [1.70004648E12, 46643.00514138816], [1.7000475E12, 37281.93333333334], [1.70004588E12, 30361.91152815013]], "isOverall": false, "label": "addPersonToGroup", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7000475E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.5830388692579502, "minX": 1.70004564E12, "maxY": 8.0, "series": [{"data": [[1.70004594E12, 0.806122448979592], [1.70004624E12, 0.725388601036269], [1.70004564E12, 8.0], [1.70004726E12, 0.625974025974025], [1.70004666E12, 0.595360824742268], [1.70004696E12, 0.6061381074168792], [1.70004606E12, 0.7300771208226217], [1.70004636E12, 0.6974358974358976], [1.70004642E12, 0.6347150259067358], [1.70004672E12, 0.6380208333333334], [1.70004582E12, 0.7808219178082192], [1.70004612E12, 0.7348484848484846], [1.70004714E12, 0.6279069767441856], [1.70004744E12, 0.5830388692579502], [1.70004654E12, 0.639593908629442], [1.70004684E12, 0.6000000000000001], [1.7000469E12, 0.5979381443298968], [1.7000472E12, 0.6149870801033588], [1.7000463E12, 0.7467700258397935], [1.7000466E12, 0.6021220159151194], [1.700046E12, 0.7338501291989663], [1.7000457E12, 0.9050401753104467], [1.70004702E12, 0.5984455958549227], [1.70004732E12, 0.6493506493506492], [1.70004576E12, 0.7301324503311251], [1.70004738E12, 0.6330749354005175], [1.70004678E12, 0.6217616580310877], [1.70004708E12, 0.6711590296495958], [1.70004618E12, 0.7849740932642487], [1.70004648E12, 0.6478149100257065], [1.7000475E12, 0.7333333333333334], [1.70004588E12, 0.7855227882037541]], "isOverall": false, "label": "addPersonToGroup", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7000475E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.70004564E12, "maxY": 59113.0, "series": [{"data": [[1.70004594E12, 42305.0], [1.70004624E12, 53836.0], [1.70004564E12, 236.0], [1.70004726E12, 58703.0], [1.70004666E12, 55397.0], [1.70004696E12, 56188.0], [1.70004606E12, 52022.0], [1.70004636E12, 54265.0], [1.70004642E12, 53998.0], [1.70004672E12, 55877.0], [1.70004582E12, 28751.0], [1.70004612E12, 51876.0], [1.70004714E12, 56527.0], [1.70004744E12, 55768.0], [1.70004654E12, 53147.0], [1.70004684E12, 55639.0], [1.7000469E12, 55436.0], [1.7000472E12, 57302.0], [1.7000463E12, 53018.0], [1.7000466E12, 53415.0], [1.700046E12, 50348.0], [1.7000457E12, 5600.0], [1.70004702E12, 56535.0], [1.70004732E12, 57393.0], [1.70004576E12, 14084.0], [1.70004738E12, 59113.0], [1.70004678E12, 56790.0], [1.70004708E12, 57896.0], [1.70004618E12, 52471.0], [1.70004648E12, 53500.0], [1.7000475E12, 41254.0], [1.70004588E12, 33889.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70004594E12, 40756.4], [1.70004624E12, 51652.7], [1.70004564E12, 236.0], [1.70004726E12, 56294.8], [1.70004666E12, 53670.0], [1.70004696E12, 54769.9], [1.70004606E12, 50122.8], [1.70004636E12, 52091.0], [1.70004642E12, 51956.0], [1.70004672E12, 53722.6], [1.70004582E12, 26385.4], [1.70004612E12, 50258.0], [1.70004714E12, 55806.0], [1.70004744E12, 53648.3], [1.70004654E12, 52384.0], [1.70004684E12, 55022.3], [1.7000469E12, 54586.6], [1.7000472E12, 56147.0], [1.7000463E12, 51967.2], [1.7000466E12, 52742.2], [1.700046E12, 48737.0], [1.7000457E12, 2382.9000000000015], [1.70004702E12, 55008.5], [1.70004732E12, 56692.6], [1.70004576E12, 12546.800000000001], [1.70004738E12, 57396.0], [1.70004678E12, 53806.4], [1.70004708E12, 55325.3], [1.70004618E12, 51065.8], [1.70004648E12, 51994.4], [1.7000475E12, 40844.7], [1.70004588E12, 32796.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70004594E12, 42030.84], [1.70004624E12, 53802.56], [1.70004564E12, 236.0], [1.70004726E12, 58703.0], [1.70004666E12, 55397.0], [1.70004696E12, 56188.0], [1.70004606E12, 51685.700000000004], [1.70004636E12, 54254.85], [1.70004642E12, 53904.600000000006], [1.70004672E12, 55877.0], [1.70004582E12, 27835.24], [1.70004612E12, 51689.7], [1.70004714E12, 56527.0], [1.70004744E12, 55768.0], [1.70004654E12, 53147.0], [1.70004684E12, 55639.0], [1.7000469E12, 55436.0], [1.7000472E12, 57302.0], [1.7000463E12, 53004.32], [1.7000466E12, 53415.0], [1.700046E12, 50303.2], [1.7000457E12, 3591.84], [1.70004702E12, 56535.0], [1.70004732E12, 57393.0], [1.70004576E12, 13971.400000000005], [1.70004738E12, 59113.0], [1.70004678E12, 56790.0], [1.70004708E12, 57896.0], [1.70004618E12, 52338.4], [1.70004648E12, 53460.03], [1.7000475E12, 41254.0], [1.70004588E12, 33806.49]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70004594E12, 41158.6], [1.70004624E12, 52024.1], [1.70004564E12, 236.0], [1.70004726E12, 57034.4], [1.70004666E12, 54111.2], [1.70004696E12, 54868.6], [1.70004606E12, 50369.8], [1.70004636E12, 52603.25], [1.70004642E12, 52642.0], [1.70004672E12, 54288.8], [1.70004582E12, 27151.3], [1.70004612E12, 50586.0], [1.70004714E12, 55936.5], [1.70004744E12, 54538.45], [1.70004654E12, 52719.6], [1.70004684E12, 55345.55], [1.7000469E12, 54966.2], [1.7000472E12, 56919.5], [1.7000463E12, 52347.4], [1.7000466E12, 53092.45], [1.700046E12, 48986.0], [1.7000457E12, 3238.6999999999994], [1.70004702E12, 55928.799999999996], [1.70004732E12, 56975.8], [1.70004576E12, 13313.799999999996], [1.70004738E12, 57951.3], [1.70004678E12, 54595.75], [1.70004708E12, 55675.65], [1.70004618E12, 51414.1], [1.70004648E12, 52434.799999999996], [1.7000475E12, 41161.75], [1.70004588E12, 33212.75]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.70004594E12, 9036.0], [1.70004624E12, 20445.0], [1.70004564E12, 11.0], [1.70004726E12, 22546.0], [1.70004666E12, 20577.0], [1.70004696E12, 22307.0], [1.70004606E12, 18426.0], [1.70004636E12, 20694.0], [1.70004642E12, 20222.0], [1.70004672E12, 21366.0], [1.70004582E12, 1466.0], [1.70004612E12, 17248.0], [1.70004714E12, 23808.0], [1.70004744E12, 12236.0], [1.70004654E12, 19875.0], [1.70004684E12, 24326.0], [1.7000469E12, 22762.0], [1.7000472E12, 21981.0], [1.7000463E12, 19918.0], [1.7000466E12, 21998.0], [1.700046E12, 16149.0], [1.7000457E12, 9.0], [1.70004702E12, 22209.0], [1.70004732E12, 23187.0], [1.70004576E12, 708.0], [1.70004738E12, 20396.0], [1.70004678E12, 22278.0], [1.70004708E12, 21985.0], [1.70004618E12, 19039.0], [1.70004648E12, 20173.0], [1.7000475E12, 31771.0], [1.70004588E12, 1832.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70004594E12, 37710.0], [1.70004624E12, 50324.0], [1.70004564E12, 20.0], [1.70004726E12, 54476.0], [1.70004666E12, 52161.5], [1.70004696E12, 53109.5], [1.70004606E12, 48969.0], [1.70004636E12, 51079.0], [1.70004642E12, 50791.0], [1.70004672E12, 51939.0], [1.70004582E12, 20081.5], [1.70004612E12, 49118.0], [1.70004714E12, 54375.0], [1.70004744E12, 46686.0], [1.70004654E12, 51213.5], [1.70004684E12, 52752.0], [1.7000469E12, 52869.0], [1.7000472E12, 54603.0], [1.7000463E12, 50798.0], [1.7000466E12, 51539.5], [1.700046E12, 45185.0], [1.7000457E12, 105.0], [1.70004702E12, 53462.0], [1.70004732E12, 54809.0], [1.70004576E12, 7402.0], [1.70004738E12, 55295.0], [1.70004678E12, 52593.0], [1.70004708E12, 53941.5], [1.70004618E12, 49723.0], [1.70004648E12, 51165.5], [1.7000475E12, 38135.5], [1.70004588E12, 31833.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7000475E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 26.0, "minX": 1.0, "maxY": 51026.0, "series": [{"data": [[2.0, 50142.0], [32.0, 54.0], [33.0, 115.0], [34.0, 63.0], [35.0, 211.0], [38.0, 116.0], [39.0, 187.0], [40.0, 106.5], [41.0, 155.0], [3.0, 50568.0], [4.0, 50779.0], [5.0, 49223.0], [6.0, 49282.5], [7.0, 43513.0], [8.0, 48770.5], [9.0, 20038.0], [10.0, 43821.0], [11.0, 31888.5], [12.0, 35867.0], [13.0, 6186.0], [14.0, 5588.5], [15.0, 4766.0], [1.0, 51026.0], [16.0, 3191.5], [17.0, 2989.0], [18.0, 3694.0], [19.0, 26.0], [21.0, 2086.0], [22.0, 32.5], [24.0, 39.0], [25.0, 1825.0], [26.0, 1754.5], [28.0, 52.5], [29.0, 48.0], [30.0, 61.0], [31.0, 989.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 61.0], [33.0, 678.0], [2.0, 45738.0], [34.0, 74.0], [38.0, 105.0], [39.0, 257.0], [40.0, 124.0], [41.0, 214.5], [3.0, 45536.5], [4.0, 45773.5], [5.0, 45431.0], [6.0, 45518.5], [7.0, 45441.0], [8.0, 45370.0], [9.0, 45440.0], [10.0, 45572.0], [11.0, 45748.0], [12.0, 45876.0], [13.0, 45869.5], [14.0, 45675.0], [15.0, 46247.0], [16.0, 46432.5], [1.0, 46196.5], [17.0, 45954.0], [18.0, 46028.0], [19.0, 46526.0], [21.0, 27.0], [24.0, 36.0], [25.0, 42.0], [28.0, 62.5], [29.0, 63.0], [30.0, 69.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 41.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 26.0, "minX": 1.0, "maxY": 51025.0, "series": [{"data": [[2.0, 50142.0], [32.0, 54.0], [33.0, 115.0], [34.0, 63.0], [35.0, 211.0], [38.0, 116.0], [39.0, 187.0], [40.0, 106.5], [41.0, 155.0], [3.0, 50568.0], [4.0, 50765.5], [5.0, 49223.0], [6.0, 49282.5], [7.0, 43512.0], [8.0, 48770.0], [9.0, 20020.0], [10.0, 43821.0], [11.0, 31888.5], [12.0, 35866.0], [13.0, 6168.0], [14.0, 5585.5], [15.0, 4766.0], [1.0, 51025.0], [16.0, 3187.5], [17.0, 2988.0], [18.0, 3693.0], [19.0, 26.0], [21.0, 2086.0], [22.0, 32.5], [24.0, 38.0], [25.0, 1821.0], [26.0, 1744.5], [28.0, 52.5], [29.0, 48.0], [30.0, 60.5], [31.0, 989.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 61.0], [33.0, 678.0], [2.0, 45738.0], [34.0, 74.0], [38.0, 105.0], [39.0, 257.0], [40.0, 124.0], [41.0, 214.5], [3.0, 45528.0], [4.0, 45773.0], [5.0, 45431.0], [6.0, 45518.5], [7.0, 45441.0], [8.0, 45370.0], [9.0, 45439.0], [10.0, 45572.0], [11.0, 45747.0], [12.0, 45876.0], [13.0, 45869.5], [14.0, 45675.0], [15.0, 46247.0], [16.0, 46432.5], [1.0, 46196.0], [17.0, 45954.0], [18.0, 46028.0], [19.0, 46526.0], [21.0, 26.5], [24.0, 36.0], [25.0, 42.0], [28.0, 62.5], [29.0, 63.0], [30.0, 68.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 41.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.70004564E12, "maxY": 23.85, "series": [{"data": [[1.70004594E12, 7.5], [1.70004624E12, 6.416666666666667], [1.70004564E12, 0.05], [1.70004726E12, 6.416666666666667], [1.70004666E12, 6.466666666666667], [1.70004696E12, 6.516666666666667], [1.70004606E12, 6.483333333333333], [1.70004636E12, 6.5], [1.70004642E12, 6.433333333333334], [1.70004672E12, 6.4], [1.70004582E12, 7.083333333333333], [1.70004612E12, 6.6], [1.70004714E12, 6.45], [1.70004744E12, 1.9166666666666667], [1.70004654E12, 6.566666666666666], [1.70004684E12, 6.416666666666667], [1.7000469E12, 6.466666666666667], [1.7000472E12, 6.45], [1.7000463E12, 6.45], [1.7000466E12, 6.283333333333333], [1.700046E12, 6.45], [1.7000457E12, 23.85], [1.70004702E12, 6.433333333333334], [1.70004732E12, 6.416666666666667], [1.70004576E12, 11.066666666666666], [1.70004738E12, 4.75], [1.70004678E12, 6.433333333333334], [1.70004708E12, 6.183333333333334], [1.70004618E12, 6.45], [1.70004648E12, 6.483333333333333], [1.70004588E12, 7.216666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70004744E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.70004564E12, "maxY": 21.3, "series": [{"data": [[1.70004594E12, 3.45], [1.70004624E12, 1.9666666666666666], [1.70004564E12, 0.05], [1.70004726E12, 1.0833333333333333], [1.70004666E12, 1.4666666666666666], [1.70004696E12, 1.2666666666666666], [1.70004606E12, 2.6], [1.70004636E12, 1.7333333333333334], [1.70004642E12, 1.8166666666666667], [1.70004672E12, 1.45], [1.70004582E12, 6.033333333333333], [1.70004612E12, 2.4166666666666665], [1.70004714E12, 1.15], [1.70004744E12, 0.9666666666666667], [1.70004654E12, 1.6], [1.70004684E12, 1.3666666666666667], [1.7000469E12, 1.2833333333333334], [1.7000472E12, 1.0666666666666667], [1.7000463E12, 1.85], [1.7000466E12, 1.6333333333333333], [1.700046E12, 2.9833333333333334], [1.7000457E12, 21.3], [1.70004702E12, 1.2], [1.70004732E12, 1.0166666666666666], [1.70004576E12, 10.05], [1.70004738E12, 1.0166666666666666], [1.70004678E12, 1.3333333333333333], [1.70004708E12, 1.1666666666666667], [1.70004618E12, 2.216666666666667], [1.70004648E12, 1.7666666666666666], [1.7000475E12, 0.4666666666666667], [1.70004588E12, 4.433333333333334]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.70004594E12, 3.0833333333333335], [1.70004624E12, 4.466666666666667], [1.70004726E12, 5.333333333333333], [1.70004666E12, 5.0], [1.70004696E12, 5.25], [1.70004606E12, 3.8833333333333333], [1.70004636E12, 4.766666666666667], [1.70004642E12, 4.616666666666666], [1.70004672E12, 4.95], [1.70004582E12, 0.05], [1.70004612E12, 4.183333333333334], [1.70004714E12, 5.3], [1.70004744E12, 3.75], [1.70004654E12, 4.966666666666667], [1.70004684E12, 5.05], [1.7000469E12, 5.183333333333334], [1.7000472E12, 5.383333333333334], [1.7000463E12, 4.6], [1.7000466E12, 4.65], [1.700046E12, 3.466666666666667], [1.7000457E12, 1.5166666666666666], [1.70004702E12, 5.233333333333333], [1.70004732E12, 5.4], [1.70004576E12, 0.016666666666666666], [1.70004738E12, 5.433333333333334], [1.70004678E12, 5.1], [1.70004708E12, 5.016666666666667], [1.70004618E12, 4.216666666666667], [1.70004648E12, 4.716666666666667], [1.7000475E12, 0.03333333333333333], [1.70004588E12, 1.7833333333333334]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7000475E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.70004564E12, "maxY": 21.3, "series": [{"data": [[1.70004594E12, 3.45], [1.70004624E12, 1.9666666666666666], [1.70004564E12, 0.05], [1.70004726E12, 1.0833333333333333], [1.70004666E12, 1.4666666666666666], [1.70004696E12, 1.2666666666666666], [1.70004606E12, 2.6], [1.70004636E12, 1.7333333333333334], [1.70004642E12, 1.8166666666666667], [1.70004672E12, 1.45], [1.70004582E12, 6.033333333333333], [1.70004612E12, 2.4166666666666665], [1.70004714E12, 1.15], [1.70004744E12, 0.9666666666666667], [1.70004654E12, 1.6], [1.70004684E12, 1.3666666666666667], [1.7000469E12, 1.2833333333333334], [1.7000472E12, 1.0666666666666667], [1.7000463E12, 1.85], [1.7000466E12, 1.6333333333333333], [1.700046E12, 2.9833333333333334], [1.7000457E12, 21.3], [1.70004702E12, 1.2], [1.70004732E12, 1.0166666666666666], [1.70004576E12, 10.05], [1.70004738E12, 1.0166666666666666], [1.70004678E12, 1.3333333333333333], [1.70004708E12, 1.1666666666666667], [1.70004618E12, 2.216666666666667], [1.70004648E12, 1.7666666666666666], [1.7000475E12, 0.4666666666666667], [1.70004588E12, 4.433333333333334]], "isOverall": false, "label": "addPersonToGroup-success", "isController": false}, {"data": [[1.70004594E12, 3.0833333333333335], [1.70004624E12, 4.466666666666667], [1.70004726E12, 5.333333333333333], [1.70004666E12, 5.0], [1.70004696E12, 5.25], [1.70004606E12, 3.8833333333333333], [1.70004636E12, 4.766666666666667], [1.70004642E12, 4.616666666666666], [1.70004672E12, 4.95], [1.70004582E12, 0.05], [1.70004612E12, 4.183333333333334], [1.70004714E12, 5.3], [1.70004744E12, 3.75], [1.70004654E12, 4.966666666666667], [1.70004684E12, 5.05], [1.7000469E12, 5.183333333333334], [1.7000472E12, 5.383333333333334], [1.7000463E12, 4.6], [1.7000466E12, 4.65], [1.700046E12, 3.466666666666667], [1.7000457E12, 1.5166666666666666], [1.70004702E12, 5.233333333333333], [1.70004732E12, 5.4], [1.70004576E12, 0.016666666666666666], [1.70004738E12, 5.433333333333334], [1.70004678E12, 5.1], [1.70004708E12, 5.016666666666667], [1.70004618E12, 4.216666666666667], [1.70004648E12, 4.716666666666667], [1.7000475E12, 0.03333333333333333], [1.70004588E12, 1.7833333333333334]], "isOverall": false, "label": "addPersonToGroup-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7000475E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.70004564E12, "maxY": 21.3, "series": [{"data": [[1.70004594E12, 3.45], [1.70004624E12, 1.9666666666666666], [1.70004564E12, 0.05], [1.70004726E12, 1.0833333333333333], [1.70004666E12, 1.4666666666666666], [1.70004696E12, 1.2666666666666666], [1.70004606E12, 2.6], [1.70004636E12, 1.7333333333333334], [1.70004642E12, 1.8166666666666667], [1.70004672E12, 1.45], [1.70004582E12, 6.033333333333333], [1.70004612E12, 2.4166666666666665], [1.70004714E12, 1.15], [1.70004744E12, 0.9666666666666667], [1.70004654E12, 1.6], [1.70004684E12, 1.3666666666666667], [1.7000469E12, 1.2833333333333334], [1.7000472E12, 1.0666666666666667], [1.7000463E12, 1.85], [1.7000466E12, 1.6333333333333333], [1.700046E12, 2.9833333333333334], [1.7000457E12, 21.3], [1.70004702E12, 1.2], [1.70004732E12, 1.0166666666666666], [1.70004576E12, 10.05], [1.70004738E12, 1.0166666666666666], [1.70004678E12, 1.3333333333333333], [1.70004708E12, 1.1666666666666667], [1.70004618E12, 2.216666666666667], [1.70004648E12, 1.7666666666666666], [1.7000475E12, 0.4666666666666667], [1.70004588E12, 4.433333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.70004594E12, 3.0833333333333335], [1.70004624E12, 4.466666666666667], [1.70004726E12, 5.333333333333333], [1.70004666E12, 5.0], [1.70004696E12, 5.25], [1.70004606E12, 3.8833333333333333], [1.70004636E12, 4.766666666666667], [1.70004642E12, 4.616666666666666], [1.70004672E12, 4.95], [1.70004582E12, 0.05], [1.70004612E12, 4.183333333333334], [1.70004714E12, 5.3], [1.70004744E12, 3.75], [1.70004654E12, 4.966666666666667], [1.70004684E12, 5.05], [1.7000469E12, 5.183333333333334], [1.7000472E12, 5.383333333333334], [1.7000463E12, 4.6], [1.7000466E12, 4.65], [1.700046E12, 3.466666666666667], [1.7000457E12, 1.5166666666666666], [1.70004702E12, 5.233333333333333], [1.70004732E12, 5.4], [1.70004576E12, 0.016666666666666666], [1.70004738E12, 5.433333333333334], [1.70004678E12, 5.1], [1.70004708E12, 5.016666666666667], [1.70004618E12, 4.216666666666667], [1.70004648E12, 4.716666666666667], [1.7000475E12, 0.03333333333333333], [1.70004588E12, 1.7833333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7000475E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

