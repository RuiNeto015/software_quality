/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "maxY": 49827.0, "series": [{"data": [[0.0, 7.0], [0.1, 7.0], [0.2, 8.0], [0.3, 8.0], [0.4, 8.0], [0.5, 9.0], [0.6, 9.0], [0.7, 9.0], [0.8, 9.0], [0.9, 10.0], [1.0, 10.0], [1.1, 10.0], [1.2, 10.0], [1.3, 10.0], [1.4, 11.0], [1.5, 11.0], [1.6, 11.0], [1.7, 11.0], [1.8, 11.0], [1.9, 11.0], [2.0, 12.0], [2.1, 12.0], [2.2, 12.0], [2.3, 13.0], [2.4, 13.0], [2.5, 13.0], [2.6, 13.0], [2.7, 13.0], [2.8, 14.0], [2.9, 14.0], [3.0, 14.0], [3.1, 14.0], [3.2, 14.0], [3.3, 14.0], [3.4, 15.0], [3.5, 15.0], [3.6, 15.0], [3.7, 15.0], [3.8, 15.0], [3.9, 15.0], [4.0, 15.0], [4.1, 16.0], [4.2, 16.0], [4.3, 16.0], [4.4, 16.0], [4.5, 16.0], [4.6, 16.0], [4.7, 16.0], [4.8, 16.0], [4.9, 16.0], [5.0, 16.0], [5.1, 16.0], [5.2, 17.0], [5.3, 17.0], [5.4, 17.0], [5.5, 17.0], [5.6, 17.0], [5.7, 17.0], [5.8, 17.0], [5.9, 17.0], [6.0, 17.0], [6.1, 17.0], [6.2, 18.0], [6.3, 18.0], [6.4, 18.0], [6.5, 18.0], [6.6, 18.0], [6.7, 18.0], [6.8, 19.0], [6.9, 19.0], [7.0, 19.0], [7.1, 19.0], [7.2, 19.0], [7.3, 20.0], [7.4, 20.0], [7.5, 20.0], [7.6, 20.0], [7.7, 20.0], [7.8, 20.0], [7.9, 20.0], [8.0, 20.0], [8.1, 21.0], [8.2, 21.0], [8.3, 21.0], [8.4, 21.0], [8.5, 21.0], [8.6, 21.0], [8.7, 22.0], [8.8, 22.0], [8.9, 22.0], [9.0, 22.0], [9.1, 22.0], [9.2, 22.0], [9.3, 23.0], [9.4, 23.0], [9.5, 23.0], [9.6, 23.0], [9.7, 23.0], [9.8, 24.0], [9.9, 25.0], [10.0, 25.0], [10.1, 26.0], [10.2, 26.0], [10.3, 26.0], [10.4, 26.0], [10.5, 27.0], [10.6, 27.0], [10.7, 27.0], [10.8, 28.0], [10.9, 28.0], [11.0, 28.0], [11.1, 29.0], [11.2, 29.0], [11.3, 29.0], [11.4, 29.0], [11.5, 29.0], [11.6, 30.0], [11.7, 30.0], [11.8, 31.0], [11.9, 31.0], [12.0, 31.0], [12.1, 32.0], [12.2, 32.0], [12.3, 33.0], [12.4, 33.0], [12.5, 33.0], [12.6, 34.0], [12.7, 35.0], [12.8, 35.0], [12.9, 35.0], [13.0, 36.0], [13.1, 37.0], [13.2, 37.0], [13.3, 38.0], [13.4, 39.0], [13.5, 39.0], [13.6, 39.0], [13.7, 40.0], [13.8, 40.0], [13.9, 41.0], [14.0, 41.0], [14.1, 42.0], [14.2, 43.0], [14.3, 44.0], [14.4, 44.0], [14.5, 46.0], [14.6, 46.0], [14.7, 47.0], [14.8, 48.0], [14.9, 50.0], [15.0, 50.0], [15.1, 51.0], [15.2, 53.0], [15.3, 54.0], [15.4, 55.0], [15.5, 56.0], [15.6, 57.0], [15.7, 58.0], [15.8, 60.0], [15.9, 60.0], [16.0, 63.0], [16.1, 63.0], [16.2, 66.0], [16.3, 68.0], [16.4, 73.0], [16.5, 78.0], [16.6, 80.0], [16.7, 84.0], [16.8, 93.0], [16.9, 96.0], [17.0, 105.0], [17.1, 107.0], [17.2, 111.0], [17.3, 116.0], [17.4, 117.0], [17.5, 126.0], [17.6, 133.0], [17.7, 137.0], [17.8, 142.0], [17.9, 146.0], [18.0, 154.0], [18.1, 162.0], [18.2, 164.0], [18.3, 168.0], [18.4, 171.0], [18.5, 178.0], [18.6, 180.0], [18.7, 192.0], [18.8, 202.0], [18.9, 209.0], [19.0, 219.0], [19.1, 223.0], [19.2, 232.0], [19.3, 238.0], [19.4, 253.0], [19.5, 269.0], [19.6, 275.0], [19.7, 284.0], [19.8, 307.0], [19.9, 329.0], [20.0, 375.0], [20.1, 395.0], [20.2, 429.0], [20.3, 451.0], [20.4, 537.0], [20.5, 573.0], [20.6, 609.0], [20.7, 678.0], [20.8, 720.0], [20.9, 742.0], [21.0, 785.0], [21.1, 802.0], [21.2, 844.0], [21.3, 902.0], [21.4, 937.0], [21.5, 954.0], [21.6, 964.0], [21.7, 1001.0], [21.8, 1021.0], [21.9, 1062.0], [22.0, 1104.0], [22.1, 1125.0], [22.2, 1206.0], [22.3, 1230.0], [22.4, 1248.0], [22.5, 1261.0], [22.6, 1305.0], [22.7, 1352.0], [22.8, 1373.0], [22.9, 1401.0], [23.0, 1421.0], [23.1, 1445.0], [23.2, 1492.0], [23.3, 1517.0], [23.4, 1582.0], [23.5, 1594.0], [23.6, 1610.0], [23.7, 1647.0], [23.8, 1650.0], [23.9, 1677.0], [24.0, 1696.0], [24.1, 1740.0], [24.2, 1752.0], [24.3, 1763.0], [24.4, 1813.0], [24.5, 1853.0], [24.6, 1906.0], [24.7, 1937.0], [24.8, 2020.0], [24.9, 2111.0], [25.0, 2184.0], [25.1, 2257.0], [25.2, 2321.0], [25.3, 2355.0], [25.4, 2449.0], [25.5, 2475.0], [25.6, 2521.0], [25.7, 2566.0], [25.8, 2694.0], [25.9, 2767.0], [26.0, 2805.0], [26.1, 2922.0], [26.2, 2993.0], [26.3, 3057.0], [26.4, 3123.0], [26.5, 3163.0], [26.6, 3237.0], [26.7, 3376.0], [26.8, 3472.0], [26.9, 3522.0], [27.0, 3580.0], [27.1, 3617.0], [27.2, 3741.0], [27.3, 3837.0], [27.4, 3915.0], [27.5, 3924.0], [27.6, 3981.0], [27.7, 4080.0], [27.8, 4146.0], [27.9, 4218.0], [28.0, 4265.0], [28.1, 4432.0], [28.2, 4445.0], [28.3, 4477.0], [28.4, 4610.0], [28.5, 4614.0], [28.6, 4730.0], [28.7, 4796.0], [28.8, 4922.0], [28.9, 5013.0], [29.0, 5044.0], [29.1, 5207.0], [29.2, 5259.0], [29.3, 5311.0], [29.4, 5385.0], [29.5, 5541.0], [29.6, 5573.0], [29.7, 5592.0], [29.8, 5730.0], [29.9, 5807.0], [30.0, 5845.0], [30.1, 5917.0], [30.2, 5997.0], [30.3, 6084.0], [30.4, 6149.0], [30.5, 6213.0], [30.6, 6240.0], [30.7, 6300.0], [30.8, 6415.0], [30.9, 6531.0], [31.0, 6581.0], [31.1, 6616.0], [31.2, 6713.0], [31.3, 6822.0], [31.4, 6904.0], [31.5, 6982.0], [31.6, 7074.0], [31.7, 7200.0], [31.8, 7269.0], [31.9, 7361.0], [32.0, 7476.0], [32.1, 7555.0], [32.2, 7646.0], [32.3, 7751.0], [32.4, 7792.0], [32.5, 7896.0], [32.6, 7924.0], [32.7, 7994.0], [32.8, 8158.0], [32.9, 8188.0], [33.0, 8272.0], [33.1, 8333.0], [33.2, 8432.0], [33.3, 8512.0], [33.4, 8551.0], [33.5, 8686.0], [33.6, 8737.0], [33.7, 8807.0], [33.8, 8953.0], [33.9, 8992.0], [34.0, 9150.0], [34.1, 9202.0], [34.2, 9320.0], [34.3, 9435.0], [34.4, 9593.0], [34.5, 9637.0], [34.6, 9704.0], [34.7, 9857.0], [34.8, 9963.0], [34.9, 10042.0], [35.0, 10200.0], [35.1, 10258.0], [35.2, 10398.0], [35.3, 10510.0], [35.4, 10597.0], [35.5, 10675.0], [35.6, 10783.0], [35.7, 10965.0], [35.8, 11021.0], [35.9, 11078.0], [36.0, 11255.0], [36.1, 11354.0], [36.2, 11476.0], [36.3, 11586.0], [36.4, 11647.0], [36.5, 11684.0], [36.6, 11923.0], [36.7, 12074.0], [36.8, 12173.0], [36.9, 12240.0], [37.0, 12381.0], [37.1, 12546.0], [37.2, 12686.0], [37.3, 12714.0], [37.4, 13006.0], [37.5, 13097.0], [37.6, 13200.0], [37.7, 13424.0], [37.8, 13551.0], [37.9, 13595.0], [38.0, 13630.0], [38.1, 13751.0], [38.2, 13872.0], [38.3, 14018.0], [38.4, 14196.0], [38.5, 14300.0], [38.6, 14425.0], [38.7, 14599.0], [38.8, 14671.0], [38.9, 14865.0], [39.0, 15004.0], [39.1, 15130.0], [39.2, 15243.0], [39.3, 15282.0], [39.4, 15565.0], [39.5, 15595.0], [39.6, 15716.0], [39.7, 15905.0], [39.8, 16014.0], [39.9, 16081.0], [40.0, 16243.0], [40.1, 16442.0], [40.2, 16492.0], [40.3, 16550.0], [40.4, 16775.0], [40.5, 16871.0], [40.6, 16950.0], [40.7, 16983.0], [40.8, 17160.0], [40.9, 17239.0], [41.0, 17359.0], [41.1, 17417.0], [41.2, 17448.0], [41.3, 17563.0], [41.4, 17652.0], [41.5, 17767.0], [41.6, 17816.0], [41.7, 17850.0], [41.8, 17914.0], [41.9, 18000.0], [42.0, 18083.0], [42.1, 18170.0], [42.2, 18232.0], [42.3, 18267.0], [42.4, 18384.0], [42.5, 18528.0], [42.6, 18609.0], [42.7, 18673.0], [42.8, 18739.0], [42.9, 18836.0], [43.0, 19060.0], [43.1, 19136.0], [43.2, 19217.0], [43.3, 19331.0], [43.4, 19606.0], [43.5, 19704.0], [43.6, 19895.0], [43.7, 20104.0], [43.8, 20172.0], [43.9, 20518.0], [44.0, 20707.0], [44.1, 20869.0], [44.2, 20936.0], [44.3, 21240.0], [44.4, 21331.0], [44.5, 21622.0], [44.6, 21759.0], [44.7, 21843.0], [44.8, 22067.0], [44.9, 22232.0], [45.0, 22594.0], [45.1, 22734.0], [45.2, 22830.0], [45.3, 22943.0], [45.4, 23034.0], [45.5, 23138.0], [45.6, 23299.0], [45.7, 23382.0], [45.8, 23457.0], [45.9, 23571.0], [46.0, 23786.0], [46.1, 23842.0], [46.2, 24054.0], [46.3, 24121.0], [46.4, 24260.0], [46.5, 24383.0], [46.6, 24486.0], [46.7, 24593.0], [46.8, 24738.0], [46.9, 24905.0], [47.0, 25028.0], [47.1, 25163.0], [47.2, 25301.0], [47.3, 25483.0], [47.4, 25554.0], [47.5, 25638.0], [47.6, 25785.0], [47.7, 26066.0], [47.8, 26193.0], [47.9, 26229.0], [48.0, 26338.0], [48.1, 26482.0], [48.2, 26527.0], [48.3, 26640.0], [48.4, 26742.0], [48.5, 26901.0], [48.6, 26989.0], [48.7, 27123.0], [48.8, 27212.0], [48.9, 27366.0], [49.0, 27482.0], [49.1, 27601.0], [49.2, 27716.0], [49.3, 27755.0], [49.4, 27841.0], [49.5, 27964.0], [49.6, 28104.0], [49.7, 28306.0], [49.8, 28382.0], [49.9, 28551.0], [50.0, 28675.0], [50.1, 28723.0], [50.2, 28930.0], [50.3, 28998.0], [50.4, 29225.0], [50.5, 29271.0], [50.6, 29298.0], [50.7, 29612.0], [50.8, 29734.0], [50.9, 30018.0], [51.0, 30123.0], [51.1, 30197.0], [51.2, 30364.0], [51.3, 30423.0], [51.4, 30612.0], [51.5, 30676.0], [51.6, 30980.0], [51.7, 31060.0], [51.8, 31132.0], [51.9, 31383.0], [52.0, 31573.0], [52.1, 31614.0], [52.2, 31752.0], [52.3, 32038.0], [52.4, 32125.0], [52.5, 32270.0], [52.6, 32426.0], [52.7, 32532.0], [52.8, 32838.0], [52.9, 32987.0], [53.0, 33012.0], [53.1, 33128.0], [53.2, 33284.0], [53.3, 33418.0], [53.4, 33583.0], [53.5, 33689.0], [53.6, 33959.0], [53.7, 34003.0], [53.8, 34052.0], [53.9, 34322.0], [54.0, 34397.0], [54.1, 34509.0], [54.2, 34545.0], [54.3, 34758.0], [54.4, 34885.0], [54.5, 35078.0], [54.6, 35258.0], [54.7, 35347.0], [54.8, 35525.0], [54.9, 35579.0], [55.0, 35810.0], [55.1, 35982.0], [55.2, 36067.0], [55.3, 36257.0], [55.4, 36420.0], [55.5, 36507.0], [55.6, 36584.0], [55.7, 36771.0], [55.8, 36883.0], [55.9, 37045.0], [56.0, 37109.0], [56.1, 37350.0], [56.2, 37410.0], [56.3, 37649.0], [56.4, 37734.0], [56.5, 37861.0], [56.6, 38111.0], [56.7, 38315.0], [56.8, 38471.0], [56.9, 38629.0], [57.0, 38723.0], [57.1, 38877.0], [57.2, 38977.0], [57.3, 39033.0], [57.4, 39092.0], [57.5, 39240.0], [57.6, 39288.0], [57.7, 39435.0], [57.8, 39521.0], [57.9, 39753.0], [58.0, 39881.0], [58.1, 39920.0], [58.2, 39940.0], [58.3, 40073.0], [58.4, 40176.0], [58.5, 40268.0], [58.6, 40477.0], [58.7, 40610.0], [58.8, 40745.0], [58.9, 40898.0], [59.0, 40988.0], [59.1, 41127.0], [59.2, 41266.0], [59.3, 41490.0], [59.4, 41544.0], [59.5, 41622.0], [59.6, 41744.0], [59.7, 41779.0], [59.8, 41982.0], [59.9, 42022.0], [60.0, 42219.0], [60.1, 42266.0], [60.2, 42351.0], [60.3, 42380.0], [60.4, 42416.0], [60.5, 42524.0], [60.6, 42543.0], [60.7, 42573.0], [60.8, 42621.0], [60.9, 42650.0], [61.0, 42692.0], [61.1, 42766.0], [61.2, 42799.0], [61.3, 42828.0], [61.4, 42908.0], [61.5, 43029.0], [61.6, 43058.0], [61.7, 43129.0], [61.8, 43263.0], [61.9, 43307.0], [62.0, 43433.0], [62.1, 43536.0], [62.2, 43577.0], [62.3, 43617.0], [62.4, 43691.0], [62.5, 43754.0], [62.6, 43798.0], [62.7, 43811.0], [62.8, 43816.0], [62.9, 43854.0], [63.0, 43926.0], [63.1, 43963.0], [63.2, 44018.0], [63.3, 44045.0], [63.4, 44057.0], [63.5, 44080.0], [63.6, 44097.0], [63.7, 44114.0], [63.8, 44145.0], [63.9, 44172.0], [64.0, 44185.0], [64.1, 44216.0], [64.2, 44229.0], [64.3, 44231.0], [64.4, 44294.0], [64.5, 44330.0], [64.6, 44337.0], [64.7, 44351.0], [64.8, 44355.0], [64.9, 44369.0], [65.0, 44371.0], [65.1, 44379.0], [65.2, 44403.0], [65.3, 44412.0], [65.4, 44446.0], [65.5, 44457.0], [65.6, 44460.0], [65.7, 44492.0], [65.8, 44511.0], [65.9, 44519.0], [66.0, 44530.0], [66.1, 44557.0], [66.2, 44569.0], [66.3, 44578.0], [66.4, 44589.0], [66.5, 44600.0], [66.6, 44614.0], [66.7, 44633.0], [66.8, 44639.0], [66.9, 44671.0], [67.0, 44677.0], [67.1, 44702.0], [67.2, 44709.0], [67.3, 44726.0], [67.4, 44734.0], [67.5, 44741.0], [67.6, 44754.0], [67.7, 44765.0], [67.8, 44772.0], [67.9, 44782.0], [68.0, 44797.0], [68.1, 44810.0], [68.2, 44820.0], [68.3, 44857.0], [68.4, 44866.0], [68.5, 44868.0], [68.6, 44878.0], [68.7, 44892.0], [68.8, 44909.0], [68.9, 44931.0], [69.0, 44936.0], [69.1, 44941.0], [69.2, 44946.0], [69.3, 44952.0], [69.4, 44969.0], [69.5, 44974.0], [69.6, 44979.0], [69.7, 44990.0], [69.8, 45009.0], [69.9, 45018.0], [70.0, 45024.0], [70.1, 45034.0], [70.2, 45040.0], [70.3, 45049.0], [70.4, 45051.0], [70.5, 45056.0], [70.6, 45067.0], [70.7, 45079.0], [70.8, 45098.0], [70.9, 45105.0], [71.0, 45114.0], [71.1, 45124.0], [71.2, 45136.0], [71.3, 45148.0], [71.4, 45153.0], [71.5, 45164.0], [71.6, 45168.0], [71.7, 45174.0], [71.8, 45179.0], [71.9, 45182.0], [72.0, 45190.0], [72.1, 45206.0], [72.2, 45208.0], [72.3, 45224.0], [72.4, 45229.0], [72.5, 45255.0], [72.6, 45263.0], [72.7, 45267.0], [72.8, 45272.0], [72.9, 45278.0], [73.0, 45297.0], [73.1, 45305.0], [73.2, 45330.0], [73.3, 45340.0], [73.4, 45346.0], [73.5, 45364.0], [73.6, 45371.0], [73.7, 45380.0], [73.8, 45395.0], [73.9, 45397.0], [74.0, 45408.0], [74.1, 45422.0], [74.2, 45425.0], [74.3, 45445.0], [74.4, 45449.0], [74.5, 45465.0], [74.6, 45483.0], [74.7, 45491.0], [74.8, 45505.0], [74.9, 45513.0], [75.0, 45529.0], [75.1, 45536.0], [75.2, 45542.0], [75.3, 45543.0], [75.4, 45552.0], [75.5, 45556.0], [75.6, 45573.0], [75.7, 45579.0], [75.8, 45586.0], [75.9, 45597.0], [76.0, 45607.0], [76.1, 45615.0], [76.2, 45632.0], [76.3, 45636.0], [76.4, 45644.0], [76.5, 45647.0], [76.6, 45654.0], [76.7, 45665.0], [76.8, 45676.0], [76.9, 45687.0], [77.0, 45705.0], [77.1, 45723.0], [77.2, 45739.0], [77.3, 45758.0], [77.4, 45781.0], [77.5, 45785.0], [77.6, 45811.0], [77.7, 45826.0], [77.8, 45834.0], [77.9, 45875.0], [78.0, 45886.0], [78.1, 45902.0], [78.2, 45919.0], [78.3, 45936.0], [78.4, 45949.0], [78.5, 45965.0], [78.6, 45980.0], [78.7, 46004.0], [78.8, 46017.0], [78.9, 46024.0], [79.0, 46031.0], [79.1, 46044.0], [79.2, 46061.0], [79.3, 46070.0], [79.4, 46093.0], [79.5, 46114.0], [79.6, 46133.0], [79.7, 46145.0], [79.8, 46159.0], [79.9, 46171.0], [80.0, 46204.0], [80.1, 46229.0], [80.2, 46250.0], [80.3, 46260.0], [80.4, 46271.0], [80.5, 46279.0], [80.6, 46292.0], [80.7, 46300.0], [80.8, 46328.0], [80.9, 46341.0], [81.0, 46356.0], [81.1, 46366.0], [81.2, 46396.0], [81.3, 46400.0], [81.4, 46439.0], [81.5, 46451.0], [81.6, 46478.0], [81.7, 46497.0], [81.8, 46524.0], [81.9, 46556.0], [82.0, 46578.0], [82.1, 46598.0], [82.2, 46625.0], [82.3, 46648.0], [82.4, 46669.0], [82.5, 46686.0], [82.6, 46693.0], [82.7, 46701.0], [82.8, 46712.0], [82.9, 46738.0], [83.0, 46744.0], [83.1, 46748.0], [83.2, 46756.0], [83.3, 46787.0], [83.4, 46799.0], [83.5, 46817.0], [83.6, 46826.0], [83.7, 46839.0], [83.8, 46848.0], [83.9, 46854.0], [84.0, 46864.0], [84.1, 46893.0], [84.2, 46904.0], [84.3, 46922.0], [84.4, 46925.0], [84.5, 46930.0], [84.6, 46944.0], [84.7, 46949.0], [84.8, 46955.0], [84.9, 46970.0], [85.0, 46975.0], [85.1, 46988.0], [85.2, 46996.0], [85.3, 47010.0], [85.4, 47016.0], [85.5, 47028.0], [85.6, 47050.0], [85.7, 47061.0], [85.8, 47078.0], [85.9, 47088.0], [86.0, 47102.0], [86.1, 47115.0], [86.2, 47121.0], [86.3, 47124.0], [86.4, 47134.0], [86.5, 47146.0], [86.6, 47162.0], [86.7, 47189.0], [86.8, 47195.0], [86.9, 47205.0], [87.0, 47227.0], [87.1, 47233.0], [87.2, 47238.0], [87.3, 47257.0], [87.4, 47261.0], [87.5, 47269.0], [87.6, 47272.0], [87.7, 47280.0], [87.8, 47288.0], [87.9, 47298.0], [88.0, 47308.0], [88.1, 47329.0], [88.2, 47331.0], [88.3, 47348.0], [88.4, 47356.0], [88.5, 47363.0], [88.6, 47380.0], [88.7, 47389.0], [88.8, 47400.0], [88.9, 47407.0], [89.0, 47417.0], [89.1, 47424.0], [89.2, 47435.0], [89.3, 47448.0], [89.4, 47464.0], [89.5, 47484.0], [89.6, 47495.0], [89.7, 47524.0], [89.8, 47547.0], [89.9, 47574.0], [90.0, 47592.0], [90.1, 47598.0], [90.2, 47610.0], [90.3, 47612.0], [90.4, 47620.0], [90.5, 47630.0], [90.6, 47639.0], [90.7, 47658.0], [90.8, 47661.0], [90.9, 47669.0], [91.0, 47674.0], [91.1, 47686.0], [91.2, 47697.0], [91.3, 47708.0], [91.4, 47717.0], [91.5, 47728.0], [91.6, 47738.0], [91.7, 47762.0], [91.8, 47776.0], [91.9, 47789.0], [92.0, 47803.0], [92.1, 47807.0], [92.2, 47814.0], [92.3, 47830.0], [92.4, 47842.0], [92.5, 47863.0], [92.6, 47872.0], [92.7, 47892.0], [92.8, 47894.0], [92.9, 47909.0], [93.0, 47918.0], [93.1, 47930.0], [93.2, 47940.0], [93.3, 47947.0], [93.4, 47956.0], [93.5, 47960.0], [93.6, 47966.0], [93.7, 47984.0], [93.8, 47992.0], [93.9, 48002.0], [94.0, 48012.0], [94.1, 48017.0], [94.2, 48037.0], [94.3, 48053.0], [94.4, 48068.0], [94.5, 48082.0], [94.6, 48105.0], [94.7, 48111.0], [94.8, 48117.0], [94.9, 48145.0], [95.0, 48153.0], [95.1, 48162.0], [95.2, 48176.0], [95.3, 48187.0], [95.4, 48203.0], [95.5, 48207.0], [95.6, 48222.0], [95.7, 48248.0], [95.8, 48253.0], [95.9, 48257.0], [96.0, 48282.0], [96.1, 48288.0], [96.2, 48301.0], [96.3, 48355.0], [96.4, 48380.0], [96.5, 48390.0], [96.6, 48410.0], [96.7, 48415.0], [96.8, 48427.0], [96.9, 48443.0], [97.0, 48464.0], [97.1, 48486.0], [97.2, 48506.0], [97.3, 48527.0], [97.4, 48571.0], [97.5, 48596.0], [97.6, 48635.0], [97.7, 48656.0], [97.8, 48687.0], [97.9, 48722.0], [98.0, 48727.0], [98.1, 48749.0], [98.2, 48768.0], [98.3, 48795.0], [98.4, 48798.0], [98.5, 48807.0], [98.6, 48852.0], [98.7, 48868.0], [98.8, 48896.0], [98.9, 48933.0], [99.0, 48961.0], [99.1, 48998.0], [99.2, 49016.0], [99.3, 49078.0], [99.4, 49149.0], [99.5, 49191.0], [99.6, 49210.0], [99.7, 49252.0], [99.8, 49468.0], [99.9, 49541.0], [100.0, 49827.0]], "isOverall": false, "label": "addPersonToGroup", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 578.0, "series": [{"data": [[0.0, 578.0], [100.0, 62.0], [34500.0, 6.0], [32900.0, 3.0], [33700.0, 3.0], [35300.0, 1.0], [36100.0, 1.0], [36900.0, 2.0], [37700.0, 3.0], [38500.0, 2.0], [40100.0, 3.0], [40900.0, 4.0], [39300.0, 1.0], [41700.0, 6.0], [42500.0, 9.0], [43300.0, 4.0], [44100.0, 15.0], [44900.0, 33.0], [45700.0, 22.0], [46500.0, 14.0], [47300.0, 29.0], [48100.0, 27.0], [48900.0, 11.0], [200.0, 33.0], [300.0, 13.0], [400.0, 9.0], [500.0, 6.0], [600.0, 7.0], [700.0, 9.0], [800.0, 8.0], [900.0, 14.0], [1000.0, 10.0], [1100.0, 7.0], [1200.0, 13.0], [1300.0, 11.0], [1400.0, 12.0], [1500.0, 11.0], [1600.0, 15.0], [1700.0, 12.0], [1800.0, 8.0], [1900.0, 6.0], [2000.0, 4.0], [2100.0, 5.0], [2200.0, 5.0], [2300.0, 5.0], [2400.0, 7.0], [2500.0, 7.0], [2600.0, 3.0], [2700.0, 5.0], [2800.0, 4.0], [2900.0, 5.0], [3000.0, 4.0], [3100.0, 7.0], [3200.0, 4.0], [3300.0, 1.0], [3400.0, 6.0], [3500.0, 5.0], [3600.0, 4.0], [3700.0, 4.0], [3800.0, 3.0], [3900.0, 9.0], [4000.0, 3.0], [4100.0, 5.0], [4200.0, 5.0], [4300.0, 3.0], [4400.0, 8.0], [4500.0, 1.0], [4600.0, 8.0], [4700.0, 5.0], [4800.0, 1.0], [4900.0, 4.0], [5000.0, 5.0], [5100.0, 2.0], [5200.0, 7.0], [5300.0, 5.0], [5500.0, 9.0], [5600.0, 1.0], [5700.0, 4.0], [5800.0, 8.0], [6000.0, 5.0], [5900.0, 4.0], [6100.0, 5.0], [6200.0, 6.0], [6300.0, 4.0], [6400.0, 3.0], [6500.0, 5.0], [6600.0, 5.0], [6700.0, 3.0], [6800.0, 4.0], [6900.0, 6.0], [7000.0, 2.0], [7100.0, 3.0], [7200.0, 6.0], [7300.0, 2.0], [7400.0, 3.0], [7500.0, 4.0], [7600.0, 4.0], [7700.0, 5.0], [7800.0, 4.0], [7900.0, 7.0], [8000.0, 2.0], [8100.0, 4.0], [8200.0, 5.0], [8400.0, 4.0], [8600.0, 4.0], [8800.0, 3.0], [9000.0, 2.0], [9200.0, 4.0], [9400.0, 2.0], [9600.0, 4.0], [9800.0, 3.0], [10000.0, 5.0], [10200.0, 5.0], [10400.0, 2.0], [10600.0, 4.0], [10800.0, 2.0], [11000.0, 5.0], [11200.0, 4.0], [11400.0, 1.0], [11600.0, 5.0], [11800.0, 1.0], [12000.0, 4.0], [12200.0, 3.0], [12400.0, 1.0], [12600.0, 4.0], [13000.0, 4.0], [13200.0, 1.0], [13400.0, 5.0], [13600.0, 4.0], [13800.0, 2.0], [14000.0, 2.0], [14200.0, 2.0], [14400.0, 1.0], [14600.0, 3.0], [14800.0, 4.0], [15000.0, 3.0], [15200.0, 5.0], [15400.0, 2.0], [15600.0, 2.0], [15800.0, 1.0], [16000.0, 5.0], [16200.0, 1.0], [17200.0, 3.0], [16800.0, 6.0], [16400.0, 7.0], [17600.0, 3.0], [18400.0, 2.0], [18000.0, 5.0], [18800.0, 2.0], [19200.0, 4.0], [19600.0, 3.0], [20000.0, 1.0], [20800.0, 4.0], [21200.0, 2.0], [21600.0, 1.0], [22000.0, 2.0], [22800.0, 4.0], [23200.0, 2.0], [23600.0, 1.0], [24000.0, 4.0], [24400.0, 3.0], [24800.0, 2.0], [25200.0, 3.0], [25600.0, 4.0], [26000.0, 2.0], [26400.0, 3.0], [27600.0, 4.0], [26800.0, 2.0], [27200.0, 2.0], [28000.0, 1.0], [28400.0, 2.0], [28800.0, 1.0], [29200.0, 8.0], [29600.0, 3.0], [30000.0, 1.0], [30400.0, 3.0], [31200.0, 2.0], [31600.0, 4.0], [32000.0, 4.0], [32400.0, 3.0], [32800.0, 3.0], [33600.0, 2.0], [34400.0, 1.0], [36800.0, 4.0], [35200.0, 4.0], [36000.0, 3.0], [37600.0, 3.0], [38400.0, 2.0], [39200.0, 5.0], [40000.0, 4.0], [40800.0, 3.0], [41600.0, 2.0], [42400.0, 4.0], [43200.0, 4.0], [44000.0, 15.0], [44800.0, 27.0], [45600.0, 33.0], [46400.0, 15.0], [47200.0, 37.0], [48000.0, 24.0], [48800.0, 13.0], [33100.0, 1.0], [33900.0, 3.0], [34700.0, 3.0], [36300.0, 1.0], [35500.0, 4.0], [38700.0, 1.0], [37100.0, 4.0], [37900.0, 2.0], [39500.0, 3.0], [40300.0, 1.0], [41100.0, 3.0], [41900.0, 3.0], [42700.0, 7.0], [43500.0, 7.0], [44300.0, 24.0], [45100.0, 43.0], [45900.0, 20.0], [46700.0, 25.0], [47500.0, 17.0], [48300.0, 13.0], [49100.0, 6.0], [16500.0, 3.0], [16900.0, 5.0], [17300.0, 3.0], [17700.0, 6.0], [18100.0, 3.0], [18500.0, 3.0], [19300.0, 1.0], [18900.0, 2.0], [19700.0, 3.0], [20100.0, 6.0], [20500.0, 2.0], [20900.0, 1.0], [21300.0, 3.0], [21700.0, 4.0], [22100.0, 1.0], [22500.0, 3.0], [22900.0, 4.0], [23300.0, 5.0], [23700.0, 3.0], [24100.0, 3.0], [24500.0, 4.0], [24900.0, 4.0], [25300.0, 2.0], [26500.0, 5.0], [25700.0, 3.0], [26100.0, 4.0], [26900.0, 4.0], [27300.0, 4.0], [27700.0, 5.0], [28100.0, 4.0], [28500.0, 1.0], [28900.0, 6.0], [29300.0, 1.0], [29700.0, 2.0], [30100.0, 6.0], [30500.0, 1.0], [30900.0, 3.0], [31300.0, 2.0], [31700.0, 2.0], [32100.0, 3.0], [32500.0, 2.0], [33000.0, 5.0], [34600.0, 2.0], [35400.0, 3.0], [36200.0, 3.0], [37800.0, 2.0], [37000.0, 3.0], [38600.0, 3.0], [39400.0, 4.0], [40200.0, 4.0], [41000.0, 1.0], [41800.0, 2.0], [42600.0, 9.0], [43400.0, 3.0], [44200.0, 13.0], [45000.0, 36.0], [46600.0, 19.0], [45800.0, 18.0], [47400.0, 28.0], [48200.0, 27.0], [49000.0, 6.0], [49800.0, 1.0], [33300.0, 1.0], [34100.0, 1.0], [34900.0, 1.0], [35700.0, 1.0], [36500.0, 5.0], [38900.0, 4.0], [37300.0, 3.0], [38100.0, 3.0], [39700.0, 3.0], [41300.0, 2.0], [42100.0, 2.0], [42900.0, 4.0], [43700.0, 7.0], [44500.0, 24.0], [45300.0, 32.0], [46100.0, 19.0], [46900.0, 37.0], [47700.0, 26.0], [48500.0, 12.0], [49300.0, 1.0], [8300.0, 4.0], [8500.0, 4.0], [8700.0, 5.0], [8900.0, 6.0], [9100.0, 3.0], [9300.0, 3.0], [9500.0, 4.0], [9700.0, 3.0], [9900.0, 3.0], [10300.0, 3.0], [10500.0, 5.0], [10700.0, 2.0], [10900.0, 4.0], [11300.0, 5.0], [11500.0, 5.0], [11700.0, 1.0], [11900.0, 2.0], [12100.0, 3.0], [12300.0, 3.0], [12500.0, 3.0], [12700.0, 3.0], [12900.0, 2.0], [13100.0, 3.0], [13500.0, 5.0], [13700.0, 4.0], [13900.0, 2.0], [14100.0, 3.0], [14300.0, 4.0], [14500.0, 3.0], [14700.0, 1.0], [14900.0, 1.0], [15100.0, 3.0], [15300.0, 1.0], [15500.0, 4.0], [15700.0, 3.0], [16100.0, 2.0], [15900.0, 3.0], [16300.0, 1.0], [17400.0, 9.0], [17000.0, 2.0], [16600.0, 2.0], [17800.0, 7.0], [18200.0, 8.0], [18600.0, 5.0], [19000.0, 3.0], [19800.0, 2.0], [21400.0, 2.0], [20600.0, 2.0], [21800.0, 3.0], [22200.0, 2.0], [22600.0, 2.0], [23000.0, 2.0], [23400.0, 3.0], [23800.0, 5.0], [24200.0, 2.0], [25000.0, 2.0], [25400.0, 2.0], [26200.0, 4.0], [26600.0, 2.0], [27000.0, 3.0], [27400.0, 2.0], [27800.0, 3.0], [28600.0, 5.0], [28200.0, 1.0], [29400.0, 2.0], [29800.0, 2.0], [30600.0, 5.0], [31000.0, 4.0], [31400.0, 2.0], [31800.0, 1.0], [32200.0, 1.0], [32600.0, 1.0], [34000.0, 5.0], [34800.0, 3.0], [33200.0, 3.0], [35600.0, 1.0], [36400.0, 4.0], [38800.0, 4.0], [40400.0, 2.0], [42000.0, 3.0], [41200.0, 2.0], [42800.0, 5.0], [43600.0, 4.0], [44400.0, 22.0], [45200.0, 33.0], [46000.0, 26.0], [46800.0, 25.0], [47600.0, 38.0], [48400.0, 20.0], [49200.0, 8.0], [33500.0, 4.0], [34300.0, 4.0], [35100.0, 1.0], [35900.0, 4.0], [36700.0, 2.0], [37500.0, 1.0], [38300.0, 3.0], [39100.0, 3.0], [39900.0, 7.0], [40700.0, 3.0], [41500.0, 5.0], [42300.0, 8.0], [43100.0, 4.0], [44700.0, 31.0], [43900.0, 8.0], [45500.0, 40.0], [46300.0, 20.0], [47100.0, 29.0], [47900.0, 37.0], [48700.0, 21.0], [49500.0, 4.0], [17100.0, 2.0], [16700.0, 1.0], [17900.0, 3.0], [18300.0, 2.0], [17500.0, 1.0], [19100.0, 3.0], [18700.0, 6.0], [19500.0, 2.0], [20300.0, 1.0], [19900.0, 1.0], [20700.0, 2.0], [21100.0, 3.0], [21900.0, 1.0], [22300.0, 1.0], [22700.0, 2.0], [23100.0, 4.0], [23500.0, 2.0], [24300.0, 3.0], [24700.0, 3.0], [25100.0, 2.0], [25500.0, 4.0], [25900.0, 1.0], [26300.0, 3.0], [26700.0, 3.0], [27100.0, 3.0], [27500.0, 2.0], [27900.0, 3.0], [28300.0, 5.0], [28700.0, 1.0], [29100.0, 2.0], [30300.0, 5.0], [30700.0, 1.0], [31100.0, 2.0], [31500.0, 2.0], [31900.0, 1.0], [32300.0, 3.0], [33400.0, 3.0], [34200.0, 1.0], [35000.0, 2.0], [35800.0, 1.0], [36600.0, 1.0], [37400.0, 2.0], [38200.0, 1.0], [39000.0, 6.0], [39800.0, 2.0], [40600.0, 3.0], [41400.0, 2.0], [42200.0, 5.0], [43000.0, 5.0], [44600.0, 21.0], [43800.0, 11.0], [45400.0, 26.0], [46200.0, 24.0], [47000.0, 26.0], [47800.0, 28.0], [48600.0, 11.0], [49400.0, 3.0]], "isOverall": false, "label": "addPersonToGroup", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 49800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 93.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2004.0, "series": [{"data": [[0.0, 623.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 93.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2004.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 687.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 114.53070175438596, "minX": 1.69997946E12, "maxY": 300.0, "series": [{"data": [[1.6999797E12, 289.77525252525265], [1.69997952E12, 300.0], [1.69997958E12, 300.0], [1.69997946E12, 164.52173913043495], [1.69997976E12, 114.53070175438596], [1.69997964E12, 300.0]], "isOverall": false, "label": "jp@gc - Add Person To Group - Load", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69997976E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 16.5, "minX": 1.0, "maxY": 48948.0, "series": [{"data": [[2.0, 39293.0], [3.0, 41602.0], [4.0, 40984.0], [5.0, 42380.0], [6.0, 14240.666666666666], [7.0, 21314.5], [8.0, 14141.666666666666], [9.0, 21377.0], [10.0, 42232.0], [11.0, 14130.0], [12.0, 21183.5], [13.0, 21635.0], [14.0, 21754.0], [15.0, 19446.5], [16.0, 13124.666666666666], [17.0, 14575.333333333334], [18.0, 13052.0], [19.0, 16.5], [20.0, 21252.5], [21.0, 15154.666666666666], [22.0, 8971.0], [23.0, 15049.666666666666], [24.0, 45009.0], [25.0, 11432.0], [26.0, 11509.25], [27.0, 11579.5], [28.0, 9947.75], [29.0, 9990.75], [30.0, 11516.25], [31.0, 10012.5], [32.0, 10010.25], [33.0, 6819.500000000001], [34.0, 10502.25], [35.0, 14162.333333333334], [36.0, 10505.25], [37.0, 8543.0], [38.0, 7149.833333333334], [39.0, 8624.2], [40.0, 8528.0], [41.0, 7871.166666666666], [42.0, 11834.5], [43.0, 7837.000000000001], [44.0, 7904.833333333334], [45.0, 15752.0], [46.0, 7085.333333333333], [47.0, 7830.166666666667], [48.0, 7998.5], [49.0, 7784.0], [50.0, 7145.5], [51.0, 7847.333333333334], [52.0, 9432.6], [53.0, 6105.428571428572], [54.0, 5362.25], [55.0, 7155.833333333333], [56.0, 5366.375], [57.0, 21678.0], [58.0, 5403.625], [59.0, 5469.5], [60.0, 6769.285714285714], [61.0, 6202.857142857142], [62.0, 4892.111111111111], [63.0, 10836.0], [64.0, 4282.0], [65.0, 8821.8], [66.0, 7864.833333333333], [67.0, 7860.833333333333], [68.0, 4396.200000000001], [69.0, 4312.909090909091], [70.0, 5263.0], [71.0, 23840.0], [72.0, 3408.571428571429], [73.0, 15765.333333333334], [74.0, 4412.6], [75.0, 4771.3], [76.0, 4883.222222222223], [77.0, 4885.555555555556], [78.0, 4400.3], [79.0, 4881.333333333333], [80.0, 4886.777777777777], [81.0, 5348.666666666667], [82.0, 4385.700000000001], [83.0, 5495.375], [84.0, 4888.888888888889], [85.0, 6298.428571428572], [86.0, 3966.083333333333], [87.0, 5940.5], [88.0, 4360.818181818182], [89.0, 4316.272727272727], [90.0, 4380.7], [91.0, 5471.375], [92.0, 3989.7272727272725], [93.0, 4412.5], [94.0, 4847.3], [95.0, 5519.0], [96.0, 4348.09090909091], [97.0, 4342.0], [98.0, 4032.3636363636365], [99.0, 4140.583333333333], [100.0, 4785.6], [101.0, 4465.499999999999], [102.0, 3486.230769230769], [103.0, 5601.75], [104.0, 4051.666666666667], [105.0, 4440.727272727273], [106.0, 4493.818181818181], [107.0, 4480.9], [108.0, 4091.6363636363635], [109.0, 5608.375], [110.0, 4133.818181818182], [111.0, 6425.142857142858], [112.0, 4549.999999999999], [113.0, 4979.6], [114.0, 264.625], [115.0, 9026.8], [116.0, 8138.0], [117.0, 6311.75], [118.0, 5533.222222222223], [119.0, 6983.714285714285], [120.0, 5303.666666666667], [121.0, 5959.125], [122.0, 7986.833333333333], [123.0, 7256.571428571429], [124.0, 6580.75], [125.0, 502.83333333333337], [126.0, 10584.222222222223], [127.0, 6466.25], [128.0, 8734.666666666666], [129.0, 7395.999999999999], [130.0, 7758.571428571428], [131.0, 6435.5], [132.0, 9146.5], [133.0, 7026.25], [134.0, 12095.75], [135.0, 6890.375], [136.0, 6823.375], [137.0, 12100.25], [138.0, 6933.625], [139.0, 10900.2], [140.0, 9284.5], [141.0, 6775.888888888889], [142.0, 10267.2], [143.0, 8309.0], [144.0, 10413.4], [145.0, 7181.875], [146.0, 17612.666666666664], [147.0, 9780.0], [148.0, 7357.375], [149.0, 12659.0], [150.0, 8321.57142857143], [151.0, 13093.0], [152.0, 10140.5], [153.0, 12971.0], [154.0, 12493.75], [155.0, 11734.0], [156.0, 16813.666666666664], [157.0, 14128.25], [158.0, 16810.666666666664], [159.0, 9813.666666666668], [160.0, 14492.25], [161.0, 26111.0], [162.0, 14516.75], [163.0, 11401.8], [164.0, 17074.333333333336], [165.0, 11505.6], [166.0, 13739.75], [167.0, 13783.25], [168.0, 17543.0], [169.0, 15062.75], [170.0, 19018.0], [171.0, 14032.25], [172.0, 14981.5], [173.0, 12057.0], [174.0, 24842.0], [175.0, 13365.5], [176.0, 12252.0], [177.0, 18834.666666666664], [178.0, 18945.0], [179.0, 11595.0], [180.0, 24806.0], [181.0, 14464.75], [182.0, 18053.0], [183.0, 17962.666666666664], [184.0, 4238.6], [185.0, 32359.666666666668], [186.0, 25328.5], [187.0, 11846.5], [188.0, 15640.75], [190.0, 15843.75], [191.0, 12106.833333333332], [189.0, 48948.0], [192.0, 26555.0], [193.0, 14773.75], [194.0, 18531.0], [195.0, 18594.666666666664], [196.0, 15173.25], [197.0, 25327.5], [198.0, 13672.2], [199.0, 27064.0], [200.0, 18659.666666666664], [201.0, 18891.333333333336], [202.0, 12118.166666666666], [203.0, 19644.666666666664], [204.0, 19032.0], [205.0, 19820.333333333336], [206.0, 19852.666666666664], [207.0, 16348.25], [208.0, 16806.75], [210.0, 14393.4], [211.0, 16692.25], [212.0, 15844.25], [214.0, 18994.666666666664], [215.0, 16657.5], [213.0, 45964.0], [209.0, 48852.0], [216.0, 16548.75], [217.0, 19133.333333333336], [218.0, 27011.0], [219.0, 16755.0], [220.0, 19221.0], [221.0, 14045.2], [222.0, 27743.0], [223.0, 27190.0], [224.0, 13124.2], [225.0, 6337.0], [226.0, 25934.0], [227.0, 16284.75], [228.0, 33593.333333333336], [229.0, 14973.5], [230.0, 16397.75], [231.0, 15905.0], [232.0, 17228.25], [233.0, 26266.5], [234.0, 14212.6], [235.0, 20907.333333333336], [236.0, 20851.333333333336], [237.0, 26011.5], [239.0, 11749.142857142857], [238.0, 46723.5], [241.0, 17409.25], [242.0, 27597.5], [243.0, 16208.666666666666], [244.0, 15365.5], [245.0, 20033.333333333336], [246.0, 20922.0], [247.0, 45484.0], [240.0, 45153.0], [248.0, 17019.5], [249.0, 21026.0], [250.0, 15593.2], [252.0, 29182.6], [253.0, 33829.666666666664], [254.0, 15325.8], [255.0, 19503.0], [251.0, 48511.0], [258.0, 17733.0], [256.0, 26660.5], [257.0, 41809.666666666664], [259.0, 21812.5], [268.0, 45454.666666666664], [269.0, 15687.4], [270.0, 20412.666666666664], [271.0, 22108.666666666664], [260.0, 18356.666666666664], [261.0, 32415.333333333332], [262.0, 32501.333333333332], [263.0, 24301.714285714286], [264.0, 21256.0], [265.0, 25037.8], [266.0, 27246.0], [267.0, 34563.0], [273.0, 32681.0], [272.0, 23976.0], [274.0, 8690.5], [275.0, 20895.5], [276.0, 37430.5], [277.0, 26714.0], [278.0, 28694.0], [279.0, 20737.333333333336], [280.0, 32513.125], [286.0, 21274.333333333336], [287.0, 32398.14285714286], [284.0, 22322.666666666664], [285.0, 28317.0], [281.0, 34647.666666666664], [282.0, 32470.6], [283.0, 27454.0], [290.0, 29090.5], [289.0, 40880.857142857145], [288.0, 46430.0], [291.0, 33882.63636363636], [300.0, 36696.11755146267], [292.0, 21506.333333333336], [293.0, 22380.666666666664], [294.0, 37313.0], [295.0, 40654.5], [296.0, 34226.375], [297.0, 32401.375], [298.0, 19988.333333333336], [299.0, 44367.533333333326], [1.0, 41152.0]], "isOverall": false, "label": "addPersonToGroup", "isController": false}, {"data": [[226.03698268271242, 25599.118579395345]], "isOverall": false, "label": "addPersonToGroup-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 300.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 889.2, "minX": 1.69997946E12, "maxY": 21123.333333333332, "series": [{"data": [[1.6999797E12, 4637.6], [1.69997952E12, 6446.816666666667], [1.69997958E12, 5129.016666666666], [1.69997946E12, 21123.333333333332], [1.69997976E12, 2670.8], [1.69997964E12, 4796.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6999797E12, 1544.4], [1.69997952E12, 1829.1], [1.69997958E12, 1560.0], [1.69997946E12, 5901.75], [1.69997976E12, 889.2], [1.69997964E12, 1544.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69997976E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5125.699604743086, "minX": 1.69997946E12, "maxY": 45698.89473684211, "series": [{"data": [[1.6999797E12, 45151.08333333336], [1.69997952E12, 32552.573560767585], [1.69997958E12, 44474.205], [1.69997946E12, 5125.699604743086], [1.69997976E12, 45698.89473684211], [1.69997964E12, 45654.972222222204]], "isOverall": false, "label": "addPersonToGroup", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69997976E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5124.42951251647, "minX": 1.69997946E12, "maxY": 45698.0745614035, "series": [{"data": [[1.6999797E12, 45150.222222222204], [1.69997952E12, 32550.878464818754], [1.69997958E12, 44473.03500000002], [1.69997946E12, 5124.42951251647], [1.69997976E12, 45698.0745614035], [1.69997964E12, 45652.69949494947]], "isOverall": false, "label": "addPersonToGroup", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69997976E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.7017543859649126, "minX": 1.69997946E12, "maxY": 0.8807641633728569, "series": [{"data": [[1.6999797E12, 0.7121212121212117], [1.69997952E12, 0.8038379530916843], [1.69997958E12, 0.8300000000000004], [1.69997946E12, 0.8807641633728569], [1.69997976E12, 0.7017543859649126], [1.69997964E12, 0.7222222222222223]], "isOverall": false, "label": "addPersonToGroup", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69997976E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.69997946E12, "maxY": 49827.0, "series": [{"data": [[1.6999797E12, 49585.0], [1.69997952E12, 42416.0], [1.69997958E12, 48414.0], [1.69997946E12, 27697.0], [1.69997976E12, 49827.0], [1.69997964E12, 49049.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6999797E12, 48840.4], [1.69997952E12, 40505.9], [1.69997958E12, 47633.5], [1.69997946E12, 17556.80000000003], [1.69997976E12, 49200.0], [1.69997964E12, 48389.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6999797E12, 49584.03], [1.69997952E12, 42276.2], [1.69997958E12, 48355.37], [1.69997946E12, 23775.460000000003], [1.69997976E12, 49786.96], [1.69997964E12, 48970.29]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6999797E12, 49044.25], [1.69997952E12, 41550.6], [1.69997958E12, 47967.35], [1.69997946E12, 21179.799999999996], [1.69997976E12, 49412.0], [1.69997964E12, 48674.8]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6999797E12, 15905.0], [1.69997952E12, 11077.0], [1.69997958E12, 16081.0], [1.69997946E12, 7.0], [1.69997976E12, 39293.0], [1.69997964E12, 16647.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6999797E12, 47947.0], [1.69997952E12, 32356.0], [1.69997958E12, 46396.5], [1.69997946E12, 1505.0], [1.69997976E12, 47927.0], [1.69997964E12, 47476.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69997976E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 15.0, "minX": 1.0, "maxY": 47823.0, "series": [{"data": [[2.0, 47762.0], [40.0, 15.0], [42.0, 2057.0], [3.0, 47471.0], [50.0, 15.0], [54.0, 1480.0], [59.0, 705.5], [67.0, 302.0], [4.0, 47823.0], [70.0, 17.0], [80.0, 19.0], [5.0, 46922.0], [87.0, 114.0], [88.0, 27.0], [97.0, 46.0], [6.0, 46787.0], [7.0, 46084.5], [8.0, 44180.0], [9.0, 33959.0], [10.0, 27160.0], [11.0, 24500.0], [12.0, 19711.0], [13.0, 16028.0], [14.0, 14381.0], [15.0, 13097.0], [16.0, 10544.5], [1.0, 47304.0], [17.0, 9564.0], [18.0, 8203.0], [19.0, 7995.0], [21.0, 7361.0], [22.0, 6337.0], [24.0, 5168.5], [28.0, 3710.5], [30.0, 2767.0], [31.0, 15.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 45289.5], [40.0, 20.5], [42.0, 1906.0], [3.0, 45425.0], [50.0, 19.0], [54.0, 1252.0], [59.0, 25.0], [67.0, 301.0], [4.0, 45190.0], [70.0, 31.5], [80.0, 26.0], [5.0, 45177.0], [87.0, 234.5], [88.0, 33.0], [97.0, 44.0], [6.0, 44969.0], [7.0, 45001.0], [8.0, 44859.0], [9.0, 44850.0], [10.0, 45423.0], [11.0, 45320.0], [12.0, 45436.0], [13.0, 43986.0], [14.0, 45471.0], [15.0, 12714.0], [21.0, 16.0], [30.0, 3072.5], [31.0, 16.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 97.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 15.0, "minX": 1.0, "maxY": 47823.0, "series": [{"data": [[2.0, 47762.0], [40.0, 15.0], [42.0, 2057.0], [3.0, 47466.5], [50.0, 15.0], [54.0, 1479.0], [59.0, 697.5], [67.0, 301.0], [4.0, 47823.0], [70.0, 17.0], [80.0, 19.0], [5.0, 46922.0], [87.0, 113.0], [88.0, 27.0], [97.0, 46.0], [6.0, 46787.0], [7.0, 46084.5], [8.0, 44179.0], [9.0, 33959.0], [10.0, 27159.0], [11.0, 24500.0], [12.0, 19711.0], [13.0, 16028.0], [14.0, 14381.0], [15.0, 13097.0], [16.0, 10544.0], [1.0, 47304.0], [17.0, 9564.0], [18.0, 8201.0], [19.0, 7995.0], [21.0, 7361.0], [22.0, 6336.5], [24.0, 5163.0], [28.0, 3706.0], [30.0, 2762.0], [31.0, 15.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 45289.5], [40.0, 20.5], [42.0, 1906.0], [3.0, 45424.0], [50.0, 19.0], [54.0, 1238.0], [59.0, 24.5], [67.0, 301.0], [4.0, 45189.0], [70.0, 31.0], [80.0, 26.0], [5.0, 45177.0], [87.0, 234.5], [88.0, 33.0], [97.0, 44.0], [6.0, 44969.0], [7.0, 45000.5], [8.0, 44859.0], [9.0, 44850.0], [10.0, 45423.0], [11.0, 45319.0], [12.0, 45436.0], [13.0, 43985.5], [14.0, 45471.0], [15.0, 12714.0], [21.0, 16.0], [30.0, 3072.5], [31.0, 15.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 97.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.4, "minX": 1.69997946E12, "maxY": 30.3, "series": [{"data": [[1.6999797E12, 5.4], [1.69997952E12, 7.816666666666666], [1.69997958E12, 6.666666666666667], [1.69997946E12, 30.3], [1.69997964E12, 6.6]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6999797E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.35, "minX": 1.69997946E12, "maxY": 23.883333333333333, "series": [{"data": [[1.6999797E12, 3.2666666666666666], [1.69997952E12, 7.466666666666667], [1.69997958E12, 4.966666666666667], [1.69997946E12, 23.883333333333333], [1.69997976E12, 1.8833333333333333], [1.69997964E12, 3.8666666666666667]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.6999797E12, 3.3333333333333335], [1.69997952E12, 0.35], [1.69997958E12, 1.7], [1.69997946E12, 1.4166666666666667], [1.69997976E12, 1.9166666666666667], [1.69997964E12, 2.7333333333333334]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69997976E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.35, "minX": 1.69997946E12, "maxY": 23.883333333333333, "series": [{"data": [[1.6999797E12, 3.2666666666666666], [1.69997952E12, 7.466666666666667], [1.69997958E12, 4.966666666666667], [1.69997946E12, 23.883333333333333], [1.69997976E12, 1.8833333333333333], [1.69997964E12, 3.8666666666666667]], "isOverall": false, "label": "addPersonToGroup-success", "isController": false}, {"data": [[1.6999797E12, 3.3333333333333335], [1.69997952E12, 0.35], [1.69997958E12, 1.7], [1.69997946E12, 1.4166666666666667], [1.69997976E12, 1.9166666666666667], [1.69997964E12, 2.7333333333333334]], "isOverall": false, "label": "addPersonToGroup-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69997976E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.35, "minX": 1.69997946E12, "maxY": 23.883333333333333, "series": [{"data": [[1.6999797E12, 3.2666666666666666], [1.69997952E12, 7.466666666666667], [1.69997958E12, 4.966666666666667], [1.69997946E12, 23.883333333333333], [1.69997976E12, 1.8833333333333333], [1.69997964E12, 3.8666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6999797E12, 3.3333333333333335], [1.69997952E12, 0.35], [1.69997958E12, 1.7], [1.69997946E12, 1.4166666666666667], [1.69997976E12, 1.9166666666666667], [1.69997964E12, 2.7333333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69997976E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

